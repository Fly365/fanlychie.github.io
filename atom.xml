<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>範宗雲</title>
  <subtitle>面朝大海，望眼欲穿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-07-23T11:03:00.217Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>範宗雲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Cloud Ribbon — 客户端负载均衡器</title>
    <link href="http://yoursite.com/post/spring-cloud-netflix-ribbon.html"/>
    <id>http://yoursite.com/post/spring-cloud-netflix-ribbon.html</id>
    <published>2017-07-20T05:57:18.000Z</published>
    <updated>2017-07-23T11:03:00.217Z</updated>
    
    <content type="html"><![CDATA[<p>Ribbon 是 Netflix 开源的项目，主要用于为提供客户端软件提供负载均衡算法。Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一个基于 HTTP 和 TCP 的客户端负载均衡器。</p>
<h3 id="1-Ribbon-单独使用"><a href="#1-Ribbon-单独使用" class="headerlink" title="1. Ribbon 单独使用"></a>1. Ribbon 单独使用</h3><p>创建两个项目：order-service（订单服务，作为服务提供者）、user-center（用户中心，作为服务消费者）。并在 user-center（服务消费者）端使用 Spring Cloud Ribbon 做客户端负载均衡。</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-ribbon-project.png" alt=""></p>
<h4 id="1-1-服务提供者"><a href="#1-1-服务提供者" class="headerlink" title="1.1 服务提供者"></a>1.1 服务提供者</h4><p>在 order-service/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 order-service/src/main/resources/application.yml 配置两个端口以便启动两个不同实例用于测试：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">order-service</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">service1</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">service1</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8881</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">service2</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8882</span></div></pre></td></tr></table></figure>
<p>编写查询用户订单的服务方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/find/&#123;uid:[1-9]\\d+&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(@PathVariable Integer uid)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------------------------------------------------"</span>);</div><div class="line">        System.out.println(<span class="string">"------------------ 方法被调用 ------------------"</span>);</div><div class="line">        System.out.println(<span class="string">"------------------------------------------------"</span>);</div><div class="line">        <span class="keyword">return</span> orderRepository.findByUid(uid);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置根路径的访问许可，以便客户端负载均衡器能够 PING 通本服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addStatusController(<span class="string">"/"</span>, HttpStatus.OK);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写 Spring Boot 应用启动类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-服务消费者"><a href="#1-2-服务消费者" class="headerlink" title="1.2 服务消费者"></a>1.2 服务消费者</h4><p>在 user-center/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 user-center/src/main/resources/application.yml 配置客户端负载均衡：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8888</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">user-center</span></div><div class="line"><span class="attr">order-service:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    eureka:</span></div><div class="line"><span class="attr">      enabled:</span> <span class="literal">false</span></div><div class="line">    <span class="comment"># 微服务的服务器列表</span></div><div class="line"><span class="attr">    listOfServers:</span> <span class="attr">localhost:8881,localhost:8882</span></div><div class="line">    <span class="comment"># 刷新微服务的服务器列表信息间隔的毫秒数</span></div><div class="line"><span class="attr">    ServerListRefreshInterval:</span> <span class="number">3000</span></div></pre></td></tr></table></figure>
<p>默认情况下，Spring Cloud Ribbon 使用 NoOpPing 作为 IPing 的实现，NoOpPing 实际上并没有 PING 服务器而是一直返回 true。而 PingUrl 则会通过 PING 服务器根路径地址来检查每一台服务器的状态以确认服务是否还在线。默认情况下，Spring Cloud Ribbon 使用 ZoneAvoidanceRule 作为 IRule 的实现，ZoneAvoidanceRule 基于 AZ（可用区）过滤服务器最大程度避免区域服务器故障。由于本地环境测试，这里采用 AvailabilityFilteringRule，它使用 Ribbon 内置的断路器功能来过滤掉处于开路状态（无法 PING 通）的服务器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfiguration</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> IClientConfig ribbonClientConfig;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IPing <span class="title">ribbonPing</span><span class="params">(IClientConfig config)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PingUrl();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">(IClientConfig config)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AvailabilityFilteringRule();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写用户订单查询服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/orders/&#123;uid:[1-9]\\d+&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">orders</span><span class="params">(@PathVariable Integer uid)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(String.format(<span class="string">"http://order-service/order/find/%d"</span>, uid), List.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写 Spring Boot 应用启动类，使用<code>@LoadBalanced</code>注解，为 RestTemplate 开启负载均衡的能力：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"order-service"</span>, configuration = RibbonConfiguration.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@LoadBalanced</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">proviceRestTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-启动服务"><a href="#1-3-启动服务" class="headerlink" title="1.3 启动服务"></a>1.3 启动服务</h4><p>启动两个服务提供者服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ java -jar order-service-<span class="number">0.0</span>.1-SNAPSHOT.jar</div><div class="line">$ java -Dspring.profiles.active=service2 -jar order-service-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>启动一个服务消费者服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar user-center-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>你可以尝试多次访问用户订单服务，或尝试途中关闭其中一个服务提供者服务再访问用户订单服务，以便查看其效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -i -X GET http:<span class="comment">//localhost:8888/user/orders/1001</span></div></pre></td></tr></table></figure>
<h3 id="2-整合-Eureka"><a href="#2-整合-Eureka" class="headerlink" title="2. 整合 Eureka"></a>2. 整合 Eureka</h3><p>创建三个项目：eureka-server（服务注册中心）、order-service（订单服务，作为服务提供者）、user-center（用户中心，作为服务消费者）。并在 user-center（服务消费者）端使用 Spring Cloud Ribbon 做客户端负载均衡。</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-ribbon-eureka-project.png" alt=""></p>
<h4 id="2-1-服务注册中心"><a href="#2-1-服务注册中心" class="headerlink" title="2.1 服务注册中心"></a>2.1 服务注册中心</h4><p>在 eureka-server/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>eureka-server/src/main/resources/application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  server:</span></div><div class="line"><span class="attr">    renewal-percent-threshold:</span> <span class="number">0.49</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      default-zone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  level:</span></div><div class="line">    <span class="string">com.netflix.eureka:</span> <span class="string">'off'</span></div><div class="line">    <span class="string">com.netflix.discovery:</span> <span class="string">'off'</span></div></pre></td></tr></table></figure>
<p>Spring Boot 应用启动类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-服务提供者"><a href="#2-2-服务提供者" class="headerlink" title="2.2 服务提供者"></a>2.2 服务提供者</h4><p>在 order-service/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 order-service/src/main/resources/application.yml 配置两个端口以便启动两个不同实例用于测试：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">order-service</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">service1</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">service1</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8881</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">service2</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8882</span></div></pre></td></tr></table></figure>
<p>编写查询用户订单的服务方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/find/&#123;uid:[1-9]\\d+&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(@PathVariable Integer uid)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------------------------------------------------"</span>);</div><div class="line">        System.out.println(<span class="string">"------------------ 方法被调用 ------------------"</span>);</div><div class="line">        System.out.println(<span class="string">"------------------------------------------------"</span>);</div><div class="line">        <span class="keyword">return</span> orderRepository.findByUid(uid);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写 Spring Boot 应用启动类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-服务消费者"><a href="#2-3-服务消费者" class="headerlink" title="2.3 服务消费者"></a>2.3 服务消费者</h4><p>在 user-center/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-center/src/main/resources/application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8888</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">user-center</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></div></pre></td></tr></table></figure>
<p>编写用户订单查询服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/orders/&#123;uid:[1-9]\\d+&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">orders</span><span class="params">(@PathVariable Integer uid)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(String.format(<span class="string">"http://order-service/order/find/%d"</span>, uid), List.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写 Spring Boot 应用启动类，使用<code>@LoadBalanced</code>注解，为 RestTemplate 开启负载均衡的能力：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"order-service"</span>, configuration = RibbonConfiguration.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@LoadBalanced</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">proviceRestTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-4-启动服务"><a href="#2-4-启动服务" class="headerlink" title="2.4 启动服务"></a>2.4 启动服务</h4><p>启动服务注册中心：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar eureka-server-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>启动两个服务提供者服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ java -jar order-service-<span class="number">0.0</span>.1-SNAPSHOT.jar</div><div class="line">$ java -Dspring.profiles.active=service2 -jar order-service-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>启动一个服务消费者服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar user-center-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>你可以尝试多次访问用户订单服务，或尝试途中关闭其中一个服务提供者服务再访问用户订单服务，以便查看其效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -i -X GET http:<span class="comment">//localhost:8888/user/orders/1001</span></div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Cloud-Dalston.SR1<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-cloud-samples/tree/master/spring-cloud-netflix-ribbon-sample" target="_blank" rel="external">spring-cloud-netflix-ribbon-sample</a>、<a href="https://github.com/fanlychie/spring-cloud-samples/tree/master/spring-cloud-netflix-ribbon-with-eureka-sample" target="_blank" rel="external">spring-cloud-netflix-ribbon-with-eureka-sample</a><br>参考文档文献链接：<a href="https://spring.io/guides/gs/client-side-load-balancing" target="_blank" rel="external">client-side-load-balancing</a>、<a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR1/#spring-cloud-ribbon" target="_blank" rel="external">spring-cloud-ribbon</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ribbon 是 Netflix 开源的项目，主要用于为提供客户端软件提供负载均衡算法。Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一个基于 HTTP 和 TCP 的客户端负载均衡器。&lt;/p&gt;
&lt;h3 id=&quot;1-Ribbon-单独使
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://yoursite.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Eureka — 服务发现</title>
    <link href="http://yoursite.com/post/spring-cloud-netflix-eureka.html"/>
    <id>http://yoursite.com/post/spring-cloud-netflix-eureka.html</id>
    <published>2017-06-21T13:57:47.000Z</published>
    <updated>2017-07-06T17:11:16.739Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud 是一套基于 Spring Boot 实现的微服务开发工具。微服务（也称微服务架构），简单的说，就是将一个系统按照一定的规则有效的拆分成多个不同的服务，每个服务都能够独立的进行开发、部署、扩展和维护。服务与服务之间可以通过 RESTful API 等方式进行相互调用。</p>
<p>Spring Cloud 没有重复制造轮子，它只是将业界内多个开源的微服务框架集成起来，再通过 Spring Boot 进行包装屏蔽掉了复杂的配置和实现原理，目的是给开发者予一套简单易懂、易部署和易维护的分布式系统开发工具包。它提供了微服务开发所需的配置管理、服务发现、断路器、智能路由、微代理、控制总线等组件。</p>
<a id="more"></a>
<h2 id="1-Eureka"><a href="#1-Eureka" class="headerlink" title="1. Eureka"></a>1. Eureka</h2><p>Eureka 是一种基于 REST 的服务，主要用于定位服务，以实现中间层服务器的负载均衡和故障转移。它是由 Spring Cloud Netflix（Spring Cloud 的子项目） 项目提供的。</p>
<h3 id="1-1-Spring-Cloud-Netflix"><a href="#1-1-Spring-Cloud-Netflix" class="headerlink" title="1.1 Spring Cloud Netflix"></a>1.1 Spring Cloud Netflix</h3><p>它主要是对 Netflix 开源的一系列产品进行包装，为 Spring Boot 应用程序提供自动配置的 Netflix OSS 集成。通过一些简单的注解，就能快速启用并构建大型的分布式系统。它提供的模块有：<br>服务发现（Eureka）、断路器（Hystrix）、智能路由（Zuul）、客户端负载均衡（Ribbon）。</p>
<h3 id="1-2-样例项目结构"><a href="#1-2-样例项目结构" class="headerlink" title="1.2 样例项目结构"></a>1.2 样例项目结构</h3><p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-sample-structure.png" alt=""></p>
<h3 id="1-3-服务注册中心"><a href="#1-3-服务注册中心" class="headerlink" title="1.3 服务注册中心"></a>1.3 服务注册中心</h3><p>在 pom.xml 中声明使用<code>spring-cloud-starter-eureka-server</code>启动器（本示例对应的项目是<code>eureka-server</code>）：</p>
<p></p><p class="code-title">pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p>使用<code>@EnableEurekaServer</code>注解将应用声明为 Eureka 服务器端（Eureka Server），从而启动 Eureka 服务注册中心的组件，对外提供服务注册和发现的功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在默认的模式中，Eureka 服务器端也充当客户端并向给定的 serviceUrl 注册自己。在生产环境中，我们通常会有多台服务器端应用，但是为了简单起见，本示例使用单台服务器，因此需要禁掉 Eureka 服务器端应用的客户端行为：</p>
<p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure><p></p>
<table>
<thead>
<tr>
<th>配置项</th>
<th style="text-align:center">默认值</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>eureka.instance.hostname</td>
<td style="text-align:center">-</td>
<td>实例的主机名。</td>
</tr>
<tr>
<td>eureka.client.register-with-eureka</td>
<td style="text-align:center">true</td>
<td>该实例是否向 Eureka 服务器注册自己，以供外部应用发现自己。在某些情况下，你可能不希望当前的应用被外部的其他应用发现，而只是想从服务器发现其他服务的实例，此时你可以将此值设为 false。</td>
</tr>
<tr>
<td>eureka.client.fetch-registry</td>
<td style="text-align:center">true</td>
<td>该实例是否向 Eureka 服务器获取所有的注册信息表。</td>
</tr>
<tr>
<td>eureka.client.service-url.defaultZone</td>
<td style="text-align:center">-</td>
<td>该实例与 Eureka 服务器通讯的 URL 地址列表。如果 Eureka 服务器地址不止一个，则使用英文的逗号分隔。</td>
</tr>
</tbody>
</table>
<p>Eureka 服务器默认监听 8761 端口来接收服务注册，除此之外它还提供一个可视化的直观页面，可以方便的查看注册的服务。启动<code>EurekaServerApplication</code>，访问：<code>http://localhost:8761/</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-server-page-1.png" alt=""></p>
<p>从上图可以看到，此时还没有任何服务注册到 Eureka 服务器。</p>
<h3 id="1-4-客户端（服务提供者）"><a href="#1-4-客户端（服务提供者）" class="headerlink" title="1.4 客户端（服务提供者）"></a>1.4 客户端（服务提供者）</h3><p>在 pom.xml 中声明使用<code>spring-cloud-starter-eureka</code>启动器（本示例对应的项目是<code>order-service</code>）：</p>
<p></p><p class="code-title">pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p>使用<code>@EnableEurekaClient</code>或<code>@EnableDiscoveryClient</code>注解可以将应用声明为 Eureka 客户端（Eureka Client）。当客户端向 Eureka 服务器注册时，它会提供关于自身的一些元数据，例如主机和端口，健康指示符 URL，主页等信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceApplication</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除此之外，还需要配置才能找到 Eureka 服务器：</p>
<p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8881</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">order-service</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></div></pre></td></tr></table></figure><p></p>
<p><code>spring.application.name</code>是 Eureka 客户端向服务器注册的服务ID和虚拟主机的名称。在 Eureka 服务器中，服务ID相同的实例将集群在一起。<br>启动<code>OrderServiceApplication</code>，再次访问：<code>http://localhost:8761/</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-server-page-2.png" alt=""></p>
<p>从上图可以看到，客户端应用程序已经成功被注册了。</p>
<h3 id="1-5-高可用"><a href="#1-5-高可用" class="headerlink" title="1.5 高可用"></a>1.5 高可用</h3><p>以上示例都是单点运行的，不适合于生产环境。<a href="https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance#high-level-architecture" target="_blank" rel="external">Eureka</a> 官方给出的应用部署架构图是这样的：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/eureka-architecture.png" alt=""></p>
<p>下面对这个架构图来作一些解读，希望能帮助你更好的理解。</p>
<p><strong>1．Region 和 Zone</strong><br>在 Eureka 中有 Region（区域）和 Zone（Availability Zone，可用区）的区分。<br>这是由于 Netflix 开源的 Eureka 旨在 AWS（Amazon Web Services，现在通常称为云计算）中运行，因此使用了一些 AWS 特有的概念术语。<br>在非 AWS 的环境下，我们可以简单的将 Region 理解成大区或地域（如阿里云服务器的华南、华北地区），Zone 可以简单的理解成机房。如需了解更多相关信息，可参考：<a href="http://blog.csdn.net/awschina/article/details/17639191" target="_blank" rel="external">AWS的区域和可用区概念解释</a>。<br>上图是一个 Eureka 集群的部署架构图，它面有 3 个 Zone（us-east-1c、us-east-1d、us-east-1e），它们都属于 us-east-1 这个 Region。</p>
<p><strong> 2．Eureka Server </strong><br>每个 Zone 至少有一个 Eureka Server，能够对外提供服务发现和处理区域故障。<br>在 Eureka Server 集群中（<code>eureka.client.register-with-eureka</code>不能设置为 false），没有 Master/Slave 的区分，每个 Eureka Server 都是对等（Peer）的。它们除了可以作为服务注册中心外还可以充当客户端向其他 Eureka Server 注册自己，并且会从它的对等的节点（由<code>eureka.client.service-url.defaultZone</code>配置指定）中 Replicate（复制）所有的服务注册表信息以达到同步的目的，如果因为某种原因导致同步失败，默认等待 5 分钟（可以通过<code>eureka.server.wait-time-in-ms-when-sync-empt</code>配置），在这期间，它不向客户端提供服务注册信息。并且默认失败重试 5 次（可以通过<code>eureka.server.number-of-replication-retries</code>配置）。</p>
<p><strong> 3．Eureka Client </strong><br>Eureka 客户端应用分两种，Applicaton Service（服务提供者）和 Application Client（服务消费者）。<br>Applicaton Service（服务提供者）通常需要向给定的 serviceUrl 对应的 Eureka Server 来 Register（注册）自己，以供外部应用可以发现自己。其注册信息包含主机名和端口信息等元数据。然后默认以每隔 30 秒的频率向注册的 Eureka Server 发送一次心跳（可以通过<code>eureka.instance.lease-renewal-interval-in-seconds</code>配置）来 Renew（续约）服务。<br>Eureka Server 默认为 90 秒内如果没有收到客户端的心跳，则它会将该客户端实例从它的注册表中剔除，以禁止该实例的流量（可以通过<code>eureka.instance.lease-expiration-duration-in-seconds</code>配置。注意，如果该值设置的太大，即使实例已经不存在了，流量也可以路由到该实例；如果设置的太小，很可能因为网络问题导致实例被服务器剔除；该值至少应该比发送心跳频率的间隔值要大）。<br>Eureka 客户端默认会从注册的 Eureka Server 中获取所有的服务注册表信息（可以通过<code>eureka.client.fetch-registry</code>配置），默认是以每隔 30 秒的频率去 Get Registry（获取注册表） 一次（可以通过<code>eureka.client.registry-fetch-interval-seconds</code>配置）。<br>Application Client（服务消费者）可以不向任何 Eureka Server 注册自己，它可以只从 Eureka Server 获取注册过的服务列表，通过 RESTful API 的方式远程调用 Applicaton Service（服务提供者）。</p>
<h4 id="1-5-1-Eureka-Server-高可用样例"><a href="#1-5-1-Eureka-Server-高可用样例" class="headerlink" title="1.5.1 Eureka Server 高可用样例"></a>1.5.1 Eureka Server 高可用样例</h4><p>本示例是在同一主机运行多个 Eureka Server 实例，由于 Eureka 会过滤同一主机的相同主机名（详见<code>com.netflix.eureka.cluster.PeerEurekaNodes#isThisMyUrl</code>），但是它不检查端口，因此需要先行定义至少两个不同的主机名，并使它们映射到<code>127.0.0.1</code>。<br>这里采用修改 hosts 文件的方式。Windows 操作系统的 hosts 文件路径是<code>C:\Windows\System32\drivers\etc\hosts</code>。找到并打开系统的 hosts 文件，在最后添加如下行：</p>
<p></p><p class="code-title">hosts</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">peer1</span> <span class="string">peer2</span> <span class="string">peer3</span></div></pre></td></tr></table></figure><p></p>
<p>修改<code>eureka-server</code>项目的配置文件：</p>
<p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">peer1</span></div><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  level:</span></div><div class="line">    <span class="string">com.netflix.eureka:</span> <span class="string">'off'</span></div><div class="line">    <span class="string">com.netflix.discovery:</span> <span class="string">'off'</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">peer1</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer1</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer2:8762/eureka/,http://peer3:8763/eureka/</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">peer2</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8762</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer2</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/,http://peer3:8763/eureka/</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">peer3</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8763</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer3</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/,http://peer2:8762/eureka/</span></div></pre></td></tr></table></figure><p></p>
<p>这里配置了 3 个 Eureka Server 实例，每个实例与其他两个实例分别进行两两的相互注册，关系如图示：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/ES-2.png" alt=""></p>
<p>需要注意的是，Eureka Server 的服务注册信息不能进行二次传播。如下图的实例关系配置是不可取的：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/ES-1.png" alt=""></p>
<p>此图的每个 Eureka Server 实例是单向的向另外一个实例注册，假如现有一个新的客户端实例 C 向 1 注册，那么，1 和 2 中都会有 C 的注册信息，但是 3 中是没有 C 的注册信息的（详见<code>com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl#replicateToPeers</code>）。</p>
<p>启动 3 个 Eureka Server 实例：</p>
<p></p><p class="code-title">cmd</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动 peer1 实例</span></div><div class="line"><span class="string">&gt; java -jar eureka-server-0.0.1-SNAPSHOT.jar</span></div><div class="line"># 启动 peer2 实例</div><div class="line">&gt; java -jar -Dspring.profiles.active=peer2 eureka-server-0.0.1-SNAPSHOT.jar</div><div class="line"># 启动 peer3 实例</div><div class="line">&gt; java -jar -Dspring.profiles.active=peer3 eureka-server-0.0.1-SNAPSHOT.jar</div></pre></td></tr></table></figure><p></p>
<h4 id="1-5-2-Eureka-Client-高可用样例"><a href="#1-5-2-Eureka-Client-高可用样例" class="headerlink" title="1.5.2 Eureka Client 高可用样例"></a>1.5.2 Eureka Client 高可用样例</h4><p>修改<code>order-service</code>项目的配置文件：</p>
<p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">order-service</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">client1</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">client1</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8881</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">client2</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8882</span></div></pre></td></tr></table></figure><p></p>
<p>客户端的<code>eureka.client.service-url.defaultZone</code>指定为当前 Zone 中任意一台服务注册中心的地址就可以，因为上例中配置的每台服务注册中心的服务注册表是两两相互进行复制的。</p>
<p>启动 2 个 Eureka Client 实例：</p>
<p></p><p class="code-title">cmd</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动 client1 实例</span></div><div class="line"><span class="string">&gt; java -jar order-service-0.0.1-SNAPSHOT.jar</span></div><div class="line"># 启动 client2 实例</div><div class="line">&gt; java -jar -Dspring.profiles.active=client2 order-service-0.0.1-SNAPSHOT.jar</div></pre></td></tr></table></figure><p></p>
<p>重新刷新<code>http://localhost:8761/</code>：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-server-page-3.png" alt=""></p>
<h3 id="1-6-自我保护模式"><a href="#1-6-自我保护模式" class="headerlink" title="1.6 自我保护模式"></a>1.6 自我保护模式</h3><p>Eureka 默认开启了自我保护模式（可以通过<code>eureka.server.enable-self-preservation</code>配置）。该模式被激活的条件是：在 1 分钟后，<code>Renews (last min)</code>&lt;<code>Renews threshold</code>。你可以在 Eureka Server 首页的右上侧可以看到：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-server-page-part.png" alt=""></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Renews threshold</td>
<td>Eureka Server 期望每分钟收到客户端实例续约的总数</td>
</tr>
<tr>
<td>Renews (last min)</td>
<td>Eureka Server 最后 1 分钟收到客户端实例续约的总数</td>
</tr>
</tbody>
</table>
<p><strong> 1．服务器端续约阀值的计算源码（Renews threshold） </strong></p>
<p></p><p class="code-title">com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl#openForTraffic</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.expectedNumberOfRenewsPerMin = count * <span class="number">2</span>;</div><div class="line"><span class="keyword">this</span>.numberOfRenewsPerMinThreshold = (<span class="keyword">int</span>) (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());</div></pre></td></tr></table></figure><p></p>
<p>其中，count 为 服务器的数量。数值 2 表示每 30 秒 1 个心跳，每分钟 2 个心跳的固定频率因子。</p>
<p>归纳公式：<code>2M * renewalPercentThreshold</code>。其中，M 为服务器的个数，计算结果只保留整数位。</p>
<p>renewalPercentThreshold 默认是 0.85（可以通过<code>eureka.server.renewal-percent-threshold</code>配置）。</p>
<p>其实这就是个固定值，因为对于每个 Eureka Server 来说，M 只能取 1。这段代码达到的效果是：</p>
<p>1．expectedNumberOfRenewsPerMin 重置为固定值 2；<br>2．numberOfRenewsPerMinThreshold 的值被设置为 1；</p>
<p><strong> 2．客户端续约阀值的计算源码（Renews threshold） </strong></p>
<p></p><p class="code-title">com.netflix.eureka.registry.AbstractInstanceRegistry#register</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.expectedNumberOfRenewsPerMin = <span class="keyword">this</span>.expectedNumberOfRenewsPerMin + <span class="number">2</span>;</div><div class="line">    <span class="keyword">this</span>.numberOfRenewsPerMinThreshold = (<span class="keyword">int</span>) (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>注：上面贴出的 PeerAwareInstanceRegistryImpl 继承自 AbstractInstanceRegistry。<br>它们共享 expectedNumberOfRenewsPerMin 和 numberOfRenewsPerMinThreshold 属性，具体可自行翻阅源码。</p>
<p>设有 N 个客户端，服务器端先启动，expectedNumberOfRenewsPerMin 被重置为固定值 2。接着客户端依次启动：</p>
<p><code>N = 1</code>–&gt;<code>(2 + 2) * renewalPercentThreshold</code><br><code>N = 2</code>–&gt;<code>(2 + 2 + 2) * renewalPercentThreshold</code><br><code>N = 3</code>–&gt;<code>(2 + 2 + 2 + 2) * renewalPercentThreshold</code></p>
<p>归纳公式：<code>2(N + 1) * renewalPercentThreshold</code>，计算结果只保留整数位。</p>
<p>即，如果只有 1 个 Eureka Server 或者有多个 Eureka Server 但它们之间没有相互注册：</p>
<p>当 N = 0 时，只计算服务器端。<code>Renews threshold</code>= 1。由于没有客户端向服务器发送心跳，<code>Renews (last min)</code>&lt;<code>Renews threshold</code>，Eureka 自我保护模式被激活；</p>
<p>当 N ≠ 0 时，服务器端的计算结果被客户端覆盖，即只计算客户端；</p>
<p>当 N = 2 时，<code>Renews threshold</code>= 2(N + 1) * renewalPercentThreshold = 2 * 3 * 0.85 = 5。2 个客户端以每 30 秒发送 1 个心跳，1 分钟后总共向服务器发送 4 个心跳，<code>Renews (last min)</code>&lt;<code>Renews threshold</code>，Eureka 自我保护模式被激活；</p>
<p>所以如果 N &lt; 3，在 1 分钟后，服务器端收到的客户端实例续约的总数总是小于期望的阀值，因此 Eureka 的自我保护模式自动被激活。首页会出现警告信息：</p>
<font color="#da5985" style="margin:-12px 0 6px 0;display:block;">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</font>

<p>这种情况下，由于 Eureka Server 没有对等的节点，同步不到服务注册信息，默认需等待 5 分钟（可以通过<code>eureka.server.wait-time-in-ms-when-sync-empty</code>配置）。即 5 分钟后你应该看到此信息。</p>
<p>为避免这种情况发生，你可以：</p>
<ul>
<li>关闭自我保护模式（<code>eureka.server.enable-self-preservation</code>设为 false）</li>
<li>降低 renewalPercentThreshold 的比例（<code>eureka.server.renewal-percent-threshold</code>设置为 0.5 以下，比如 0.49）</li>
<li>部署多个 Eureka Server 并开启其客户端行为（<code>eureka.client.register-with-eureka</code>不要设为 false，默认为 true）</li>
</ul>
<p><div style="margin-top:18px"></div>如果是采取部署多个 Eureka Server 并开启其客户端行为使其相互注册。假设有 M 个 Eureka Server，那么，每个 Eureka Server 每分钟可以额外收到 2 * (M - 1) 个心跳。例如：</p>
<p>当 M = 1，N = 2 时，<code>Renews threshold</code>= 2(N + 1) * renewalPercentThreshold = 2 * 3 * 0.85 = 5，2 个客户端以每 30 秒发送 1 个心跳，1 分钟后总共向服务器发送 4 个心跳，<code>Renews (last min)</code>&lt;<code>Renews threshold</code>；</p>
<p>当 M = 2，N = 2 时，<code>Renews threshold</code>= 2(N + 1) * renewalPercentThreshold = 2 * 3 * 0.85 = 5，2 个客户端以每 30 秒发送 1 个心跳，1 分钟后总共向服务器发送 4 个心跳，另外还有 1 个 M 发来的 2 个心跳，总共是 6 个心跳，<code>Renews (last min)</code>&gt;<code>Renews threshold</code>；</p>
<p>Eureka 的自我保护模式是有意义的，该模式被激活后，它不会从注册列表中剔除因长时间没收到心跳导致租期过期的服务，而是等待修复，直到心跳恢复正常之后，它自动退出自我保护模式。这种模式旨在避免因网络分区故障导致服务不可用的问题。例如，两个客户端实例 C1 和 C2 的连通性是良好的，但是由于网络故障，C2 未能及时向 Eureka 发送心跳续约，这时候 Eureka 不能简单的将 C2 从注册表中剔除。因为如果剔除了，C1 就无法从 Eureka 服务器中获取 C2 注册的服务，但是这时候 C2 服务是可用的。所以，Eureka 的自我保护模式最好还是开启它。</p>
<h3 id="1-7-Eureka-与-Zookeeper-的区别"><a href="#1-7-Eureka-与-Zookeeper-的区别" class="headerlink" title="1.7 Eureka 与 Zookeeper 的区别"></a>1.7 Eureka 与 Zookeeper 的区别</h3><p>Eureka 最大程度上保证 AP（Availability，可用性；Partition-tolerance，分区容错性），而 Zookeeper 保证的是 CP（Consistency，一致性；Partition-tolerance，分区容错性）。<br>如果因为网络分区故障导致服务器（master 节点）无法与其它节点联系，对于 Zookeeper 来说，这是不能容忍的。它会对剩下的节点重新进行 leader 选举，在这期间，整个 Zookeeper 集群是不可用的，这就直接导致了所有注册服务瘫痪的现象。<br>而对于 Eureka 来说，每个节点都是对等的，失去了一个节点，就自动切换到其它节点，只要还有一个 Eureka 节点存在，就能正常对外提供注册服务。Eureka 可以很好的应对因网络分区故障而导致的部分节点失去联系的状况。</p>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Cloud-Dalston.SR1<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-cloud-samples/tree/master/spring-cloud-netflix-eureka-sample" target="_blank" rel="external">spring-cloud-netflix-eureka-sample</a><br>参考文档文献链接：<a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR1/#_spring_cloud_netflix" target="_blank" rel="external">http://cloud.spring.io/spring-cloud-static/Dalston.SR1/#_spring_cloud_netflix</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Cloud 是一套基于 Spring Boot 实现的微服务开发工具。微服务（也称微服务架构），简单的说，就是将一个系统按照一定的规则有效的拆分成多个不同的服务，每个服务都能够独立的进行开发、部署、扩展和维护。服务与服务之间可以通过 RESTful API 等方式进行相互调用。&lt;/p&gt;
&lt;p&gt;Spring Cloud 没有重复制造轮子，它只是将业界内多个开源的微服务框架集成起来，再通过 Spring Boot 进行包装屏蔽掉了复杂的配置和实现原理，目的是给开发者予一套简单易懂、易部署和易维护的分布式系统开发工具包。它提供了微服务开发所需的配置管理、服务发现、断路器、智能路由、微代理、控制总线等组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://yoursite.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Test</title>
    <link href="http://yoursite.com/post/spring-boot-testing.html"/>
    <id>http://yoursite.com/post/spring-boot-testing.html</id>
    <published>2017-06-20T06:51:38.000Z</published>
    <updated>2017-07-07T12:32:19.249Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 框架提供了一个专门的测试模块（<code>spring-test</code>），用于应用程序的集成测试。 在 Spring Boot 中，你可以通过<code>spring-boot-starter-test</code>启动器快速开启和使用它。</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<h2 id="1-Junit-测试"><a href="#1-Junit-测试" class="headerlink" title="1. Junit 测试"></a>1. Junit 测试</h2><p>当你的单元测试代码不需要用到 Spring Boot 功能，而只是一个简单的测试时，你可以直接编写你的 Junit 测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJunitTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHi</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hi Junit."</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-Spring-Boot-测试"><a href="#2-Spring-Boot-测试" class="headerlink" title="2. Spring Boot 测试"></a>2. Spring Boot 测试</h2><p>当你的集成测试代码需要用到 Spring Boot 功能时，你可以使用<code>@SpringBootTest</code>注解。<br>该注解是普通的 Spring 项目（非 Spring Boot 项目）中编写集成测试代码所使用的<code>@ContextConfiguration</code>注解的替代品。其作用是用于确定如何装载 Spring 应用程序的上下文资源。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInjectTest</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HelloService helloService;</div><div class="line">	</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHi</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(helloService.sayHi());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"--- Hi ---"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"--- Hello ---"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当运行 Spring Boot 应用程序测试时，它会自动的从当前测试类所在的包起一层一层向上搜索，直到找到一个<code>@SpringBootApplication</code>或<code>@SpringBootConfiguration</code>注释类为止。以此来确定如何装载 Spring 应用程序的上下文资源。只要你以合理的方式组织你的代码，你项目的主配置通常是可以被发现的。本示例项目的部分文件结构图为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">spring-boot-testing-sample</div><div class="line">\__ src</div><div class="line">     \__ main</div><div class="line">     :     \__ java</div><div class="line">     :           \__ org</div><div class="line">     :                \__ fanlychie</div><div class="line">     :                        |__ Application.java</div><div class="line">     :                        \__ service</div><div class="line">     :                               |__ HelloService.java</div><div class="line">     \__ test</div><div class="line">           \__ java</div><div class="line">                 \__ org</div><div class="line">                      \__ fanlychie</div><div class="line">                              \__ test</div><div class="line">                                    |__ BeanInjectTest.java</div></pre></td></tr></table></figure>
<p>其中，主配置启动类的代码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果搜索算法搜索不到你项目的主配置文件，将报出异常：</p>
<font color="#da5985" style="margin:-12px 0 6px 0;display:block;">java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=…) with your test</font>

<p>解决办法是，按 Spring Boot 的约定重新组织你的代码结构，或者手工指定你要装载的主配置文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>(classes = &#123;YourApplication.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInjectTest</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基于 Spring 环境的 Junit 集成测试还需要使用<code>@RunWith(SpringJUnit4ClassRunner.class)</code>注解，该注解能够改变 Junit 并让其运行在 Spring 的测试环境，以得到 Spring 测试环境的上下文支持。否则，在 Junit 测试中，Bean 的自动装配等注解将不起作用。但由于 SpringJUnit4ClassRunner 不方便记忆，Spring 4.3 起提供了一个等同于 SpringJUnit4ClassRunner 的类 SpringRunner，因此可以简写成：<code>@RunWith(SpringRunner.class)</code>。</p>
<h2 id="3-Spring-MVC-测试"><a href="#3-Spring-MVC-测试" class="headerlink" title="3. Spring MVC 测试"></a>3. Spring MVC 测试</h2><p>当你想对 Spring MVC 控制器编写单元测试代码时，可以使用<code>@WebMvcTest</code>注解。它提供了自配置的 MockMvc，可以不需要完整启动 HTTP 服务器就可以快速测试 MVC 控制器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line">	</div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@WebMvcTest</span>(HelloController.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MockMvc mvc;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mvc.perform(get(<span class="string">"/hello"</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andDo(print());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(ModelMap model)</span> </span>&#123;</div><div class="line">        model.put(<span class="string">"message"</span>, <span class="string">"Hello Page"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>@WebMvcTest</code>注解时，只有一部分的 Bean 能够被扫描得到，它们分别是：</p>
<ul>
<li><code>@Controller</code></li>
<li><code>@ControllerAdvice</code></li>
<li><code>@JsonComponent</code></li>
<li><code>Filter</code></li>
<li><code>WebMvcConfigurer</code></li>
<li><code>HandlerMethodArgumentResolver</code></li>
</ul>
<p>其他常规的<code>@Component</code>（包括<code>@Service</code>、<code>@Repository</code>等）Bean 则不会被加载到 Spring 测试环境上下文中。</p>
<p>如果测试的 MVC 控制器中需要<code>@Component</code>Bean 的参与，你可以使用<code>@MockBean</code>注解来协助完成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.BDDMockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line">    </div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@WebMvcTest</span>(HelloController.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MockMvc mvc;</div><div class="line">    </div><div class="line">    <span class="meta">@MockBean</span></div><div class="line">    <span class="keyword">private</span> HelloService helloService;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHi</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 模拟 HelloService.sayHi() 调用, 返回 "=== Hi ==="</span></div><div class="line">        when(helloService.sayHi()).thenReturn(<span class="string">"=== Hi ==="</span>);</div><div class="line">        mvc.perform(get(<span class="string">"/hello/sayHi"</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andDo(print());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HelloService helloService;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello/sayHi"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(ModelMap model)</span> </span>&#123;</div><div class="line">        model.put(<span class="string">"message"</span>, helloService.sayHi());</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-Spring-Boot-Web-测试"><a href="#4-Spring-Boot-Web-测试" class="headerlink" title="4. Spring Boot Web 测试"></a>4. Spring Boot Web 测试</h2><p>当你想启动一个完整的 HTTP 服务器对 Spring Boot 的 Web 应用编写测试代码时，可以使用<code>@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)</code>注解开启一个随机的可用端口。Spring Boot 针对 REST 调用的测试提供了一个 TestRestTemplate 模板，它可以解析链接服务器的相对地址。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = WebEnvironment.RANDOM_PORT)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TestRestTemplate restTemplate;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; result = restTemplate.getForObject(<span class="string">"/hello/sayHello"</span>, Map.class);</div><div class="line">        System.out.println(result.get(<span class="string">"message"</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HelloService helloService;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello/sayHello"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object <span class="title">helloInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        map.put(<span class="string">"message"</span>, helloService.sayHello());</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-Spring-Data-JPA-测试"><a href="#5-Spring-Data-JPA-测试" class="headerlink" title="5. Spring Data JPA 测试"></a>5. Spring Data JPA 测试</h2><p>当你想对 Spring Data JPA 应用进行单元测试时，你可以使用<code>@DataJpaTest</code>注解。并且在进行 JPA 测试时，你可以选择使用内存数据库还是真实的数据库测试。</p>
<h3 id="5-1-内存数据库测试"><a href="#5-1-内存数据库测试" class="headerlink" title="5.1 内存数据库测试"></a>5.1 内存数据库测试</h3><p>默认情况下，<code>@DataJpaTest</code>使用的是内存数据库进行测试，你无需配置和启用真实的数据库。只需要在 pom.xml 配置文件中声明如下依赖即可：</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p><code>@DataJpaTest</code>注解它只扫描<code>@Entity</code>Bean 和装配 Spring Data JPA 存储库，其他常规的<code>@Component</code>（包括<code>@Service</code>、<code>@Repository</code>等）Bean 则不会被加载到 Spring 测试环境上下文。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryInMemoryTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(<span class="string">"fanlychie"</span>);</div><div class="line">        userRepository.save(user);</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">        System.out.println(userRepository.findAll());</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"User"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"uuidGenerator"</span>)</div><div class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"uuidGenerator"</span>, strategy = <span class="string">"uuid"</span>)</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-2-真实数据库测试"><a href="#5-2-真实数据库测试" class="headerlink" title="5.2 真实数据库测试"></a>5.2 真实数据库测试</h3><p>如果你希望使用真实的数据库做测试，你可以使用<code>@AutoConfigureTestDatabase(replace = Replace.NONE)</code>注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@AutoConfigureTestDatabase</span>(replace = Replace.NONE)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryMySQLTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(<span class="string">"fanlychie"</span>);</div><div class="line">        userRepository.save(user);</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">        System.out.println(userRepository.findAll());</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>replace = Replace.NONE</code>的作用是告知 Spring Boot 不要替换应用程序默认的数据源。</p>
<p></p><p class="code-title"># src/main.resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://127.0.0.1/test</span></div><div class="line"><span class="attr">      username:</span> <span class="string">root</span></div><div class="line"><span class="attr">      password:</span> <span class="string">root</span></div><div class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">      tomcat:</span></div><div class="line"><span class="attr">        default-auto-commit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  jpa:</span></div><div class="line"><span class="attr">    hibernate:</span></div><div class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></div></pre></td></tr></table></figure><p></p>
<h3 id="5-3-事务控制"><a href="#5-3-事务控制" class="headerlink" title="5.3 事务控制"></a>5.3 事务控制</h3><p>默认情况下，在每个 JPA 测试结束时，事务会发生回滚。这在一定程度上可以防止测试数据污染数据库。如果你不希望事务发生回滚，你可以使用<code>@Rollback(false)</code>注解，该注解可以标注在类级别做全局的控制，也可以标注在某个特定不需要执行事务回滚的方法级别上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@AutoConfigureTestDatabase</span>(replace = Replace.NONE)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryMySQLTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(<span class="string">"fanlychie"</span>);</div><div class="line">        userRepository.save(user);</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">        System.out.println(userRepository.findAll());</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，你也可以使用<code>@Transactional</code>注解对事务进行控制。该注解可以标注在类级别做全局的控制，也可以标注在某个特定的方法级别上。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@AutoConfigureTestDatabase</span>(replace = Replace.NONE)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryMySQLTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">        System.out.println(userRepository.findAll());</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-关闭-DEBUG-日志和输出-SQL-信息"><a href="#6-关闭-DEBUG-日志和输出-SQL-信息" class="headerlink" title="6. 关闭 DEBUG 日志和输出 SQL 信息"></a>6. 关闭 DEBUG 日志和输出 SQL 信息</h2><p>在 Spring Boot 环境中执行 Junit 单元测试的时候，会有很多<code>DEBUG</code>和<code>INFO</code>级别的日志信息输出。我们对这些信息其实并不是很感兴趣，而是更关心自己编写的测试代码部分输出的信息以及 SQL 语句信息。正确关闭这些日志信息的姿势是，在测试目录的资源文件夹中创建一个<code>logback-test.xml</code>文件：</p>
<p></p><p class="code-title"># src/test/resources/logback-test.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 日志级别设置为 ERROR --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 输出 SQL 语句信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 输出 SQL 语句参数信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicBinder"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-testing-sample" target="_blank" rel="external">spring-boot-testing-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-testing" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-testing</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 框架提供了一个专门的测试模块（&lt;code&gt;spring-test&lt;/code&gt;），用于应用程序的集成测试。 在 Spring Boot 中，你可以通过&lt;code&gt;spring-boot-starter-test&lt;/code&gt;启动器快速开启和使用它。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-title&quot;&gt;# pom.xml&lt;/p&gt;&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 使用 Servlet、Filter、Listener</title>
    <link href="http://yoursite.com/post/spring-boot-servlet-filter-listener-usage.html"/>
    <id>http://yoursite.com/post/spring-boot-servlet-filter-listener-usage.html</id>
    <published>2017-06-19T14:30:08.000Z</published>
    <updated>2017-07-06T17:23:12.189Z</updated>
    
    <content type="html"><![CDATA[<p>在普通的 WEB 应用中，Servlet、Filter、Listener 都是在 web.xml 配置文件中配置的。而在 Spring Boot 中，由于它省去 web.xml 配置文件，Servlet、Filter、Listener 的配置需要通过 Java 代码的方式来进行配置。</p>
<a id="more"></a>
<h2 id="1-通过-Bean-的方式配置"><a href="#1-通过-Bean-的方式配置" class="headerlink" title="1. 通过 Bean 的方式配置"></a>1. 通过 Bean 的方式配置</h2><p>Spring Boot 提供了 ServletRegistrationBean、FilterRegistrationBean、<br>ServletListenerRegistrationBean 三种类型来分别配置应用的 Servlet、Filter、Listener。</p>
<p></p><p class="code-title"># 在 Spring Boot 应用中配置使用 Servlet、Filter、Listener</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfigurer</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registerCustomFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        FilterRegistrationBean filterRegBean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> CustomFilter());</div><div class="line">        filterRegBean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</div><div class="line">        <span class="keyword">return</span> filterRegBean;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">registerCustomServlet</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServletRegistrationBean servletRegBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> CustomServlet());</div><div class="line">        servletRegBean.setUrlMappings(Arrays.asList(<span class="string">"/customServlet"</span>));</div><div class="line">        servletRegBean.setLoadOnStartup(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> servletRegBean;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="keyword">public</span> ServletListenerRegistrationBean&lt;?&gt; registerCustomListener() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> CustomListener());</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 自定义的 Filter</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomFilter ------"</span>);</div><div class="line">        chain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 自定义的 Listener</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent event)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomListener ------"</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent event)</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 自定义的 Servlet</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomServlet ------"</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h2 id="2-通过注解的方式配置"><a href="#2-通过注解的方式配置" class="headerlink" title="2. 通过注解的方式配置"></a>2. 通过注解的方式配置</h2><p>Spring Boot 提供了 @WebServlet、@WebFilter、@WebListener 三种类型的注解来分别配置应用的 Servlet、Filter、Listener。</p>
<p></p><p class="code-title"># Filter 注解</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomFilter Annotation ------"</span>);</div><div class="line">        chain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># Listener 注解</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebListener</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent event)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomListener Annotation ------"</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent event)</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># Servlet 注解</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/customServlet"</span>, loadOnStartup = <span class="number">1</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomServlet Annotation ------"</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>最后，需要在应用中使用<code>@ServletComponentScan</code>注解配置才有效。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@ServletComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-servlet-filter-listener-conf-sample" target="_blank" rel="external">conf-sample</a> <a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-servlet-filter-listener-scan-sample" target="_blank" rel="external">scan-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-embedded-container" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-embedded-container</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在普通的 WEB 应用中，Servlet、Filter、Listener 都是在 web.xml 配置文件中配置的。而在 Spring Boot 中，由于它省去 web.xml 配置文件，Servlet、Filter、Listener 的配置需要通过 Java 代码的方式来进行配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 异常处理</title>
    <link href="http://yoursite.com/post/spring-boot-exception-handler.html"/>
    <id>http://yoursite.com/post/spring-boot-exception-handler.html</id>
    <published>2017-06-18T08:18:54.000Z</published>
    <updated>2017-07-06T17:23:47.837Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 默认提供了程序出错的结果映射路径<code>/error</code>（见：<a href="http://fanlychie.github.io/post/spring-boot-error-page.html" target="_blank" rel="external">Spring Boot 错误页面</a>）。其内部是通过判断请求头中的<code>Accept</code>的内容是否为<code>text/html</code>来区分请求是来自客户端浏览器（浏览器通常默认自动发送请求头内容<code>Accept:text/html</code>）还是客户端接口的调用，以此来决定返回页面视图还是 JSON 消息内容。</p>
<a id="more"></a>
<h2 id="1-自定义异常处理"><a href="#1-自定义异常处理" class="headerlink" title="1. 自定义异常处理"></a>1. 自定义异常处理</h2><p>使用<code>@ControllerAdvice</code>注解可以对已知的<code>Controller</code>中抛出的异常进行捕获并处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);</div><div class="line">	</div><div class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)</div><div class="line">    <span class="meta">@ExceptionHandler</span>(BusinessHtmlException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleHtmlException</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">        logger.error(<span class="string">"「捕捉到异常」："</span>, e);</div><div class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"error/general"</span>);</div><div class="line">        modelAndView.addObject(<span class="string">"message"</span>, e.getMessage());</div><div class="line">        <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@ExceptionHandler</span>(&#123;</div><div class="line">            BusinessJsonException.class,</div><div class="line">            IllegalArgumentJsonException.class</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; handleJsonException(Exception e) &#123;</div><div class="line">        logger.error(<span class="string">"「捕捉到异常」："</span>, e);</div><div class="line">        HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> HttpResponseBody(status.value(), e.getMessage(), <span class="keyword">null</span>), status);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-1-ExceptionHandler"><a href="#1-1-ExceptionHandler" class="headerlink" title="1.1 @ExceptionHandler"></a>1.1 @ExceptionHandler</h3><p>该注解用于标注处理方法处理哪些特定的异常。被该注解标注的方法可以有以下任意顺序的参数类型：</p>
<ul>
<li>Throwable、Exception 等异常对象；</li>
<li>ServletRequest、HttpServletRequest、ServletResponse、HttpServletResponse；</li>
<li>HttpSession 等会话对象；</li>
<li>org.springframework.web.context.request.WebRequest；</li>
<li>java.util.Locale；</li>
<li>java.io.InputStream、java.io.Reader；</li>
<li>java.io.OutputStream、java.io.Writer；</li>
<li>org.springframework.ui.Model；</li>
</ul>
<p><div style="margin-top:18px"></div>并且被该注解标注的方法可以有以下的返回值类型可选：</p>
<ul>
<li>ModelAndView；</li>
<li>org.springframework.ui.Model；</li>
<li>java.util.Map；</li>
<li>org.springframework.web.servlet.View；</li>
<li>@ResponseBody 注解标注的任意对象；</li>
<li>HttpEntity&lt;?&gt; or ResponseEntity&lt;?&gt;；</li>
<li>void；</li>
</ul>
<p><div style="margin-top:18px"></div>以上罗列的不完全，更加详细的信息可参考：<a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="external">Spring ExceptionHandler</a>。</p>
<h3 id="1-2-ResponseStatus"><a href="#1-2-ResponseStatus" class="headerlink" title="1.2 @ResponseStatus"></a>1.2 @ResponseStatus</h3><p>@ExceptionHandler 注释可以与 @ResponseStatus 结合起来，以定义 HTTP 响应的状态码值。</p>
<p><strong> 以下为涉及本示例的其余代码： </strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpResponseBody</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> String errmsg;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Object data;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpResponseBody</span><span class="params">(<span class="keyword">int</span> code, String errmsg, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        <span class="keyword">this</span>.errmsg = errmsg;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessHtmlException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessHtmlException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessJsonException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessJsonException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IllegalArgumentJsonException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IllegalArgumentJsonException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-exception-handler-sample" target="_blank" rel="external">spring-boot-exception-handler-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-error-handling" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-error-handling</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 默认提供了程序出错的结果映射路径&lt;code&gt;/error&lt;/code&gt;（见：&lt;a href=&quot;http://fanlychie.github.io/post/spring-boot-error-page.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Boot 错误页面&lt;/a&gt;）。其内部是通过判断请求头中的&lt;code&gt;Accept&lt;/code&gt;的内容是否为&lt;code&gt;text/html&lt;/code&gt;来区分请求是来自客户端浏览器（浏览器通常默认自动发送请求头内容&lt;code&gt;Accept:text/html&lt;/code&gt;）还是客户端接口的调用，以此来决定返回页面视图还是 JSON 消息内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 错误页面</title>
    <link href="http://yoursite.com/post/spring-boot-error-page.html"/>
    <id>http://yoursite.com/post/spring-boot-error-page.html</id>
    <published>2017-06-17T03:26:48.000Z</published>
    <updated>2017-07-06T17:25:35.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-默认的错误页面"><a href="#1-默认的错误页面" class="headerlink" title="1. 默认的错误页面"></a>1. 默认的错误页面</h3><p>Spring Boot 默认提供了程序出错的结果映射路径<code>/error</code>：<br>spring-boot-autoconfigure.jar/org.springframework.boot.autoconfigure.web.BasicErrorController.java</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/BasicErrorController_code.png" alt=""></p>
<a id="more"></a>
<p>其中，<code>errorHtml</code>方法是用于处理浏览器端的请求，它返回一个简单的错误页面。而<code>error</code>方法是用于处理客户端的调用，它返回一个简单的 JSON 字串信息。</p>
<p>当请求发生错误，它会响应浏览器一个简单的页面来描述这些错误信息，如 404 错误页面：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-boot-404-page-default.png" alt=""></p>
<h3 id="2-自定义错误页面"><a href="#2-自定义错误页面" class="headerlink" title="2. 自定义错误页面"></a>2. 自定义错误页面</h3><p>Spring Boot 默认是到模板文件所在目录的<code>error</code>文件夹中查找错误码对应的视图模板文件：<br>spring-boot-autoconfigure-1.5.2.RELEASE.jar/org.springframework.boot.autoconfigure.web.DefaultErrorViewResolver.java</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/DefaultErrorViewResolver.png" alt=""></p>
<p>因此，自定义的错误模板文件放在 error 目录下即可。如：</p>
<p></p><p class="code-title"># src/main/resources/templates/error/404.html（Thymeleaf）</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404错误页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|timestamp：$&#123;#dates.format(timestamp, 'yyyy-MM-dd HH:mm:ss:SSS')&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|status：$&#123;status&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|error：$&#123;error&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|message：$&#123;message&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|path：$&#123;path&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p>最终的效果：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-boot-404-page.png" alt=""></p>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-error-page-sample" target="_blank" rel="external">spring-boot-error-page-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-error-handling-custom-error-pages" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-error-handling-custom-error-pages</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-默认的错误页面&quot;&gt;&lt;a href=&quot;#1-默认的错误页面&quot; class=&quot;headerlink&quot; title=&quot;1. 默认的错误页面&quot;&gt;&lt;/a&gt;1. 默认的错误页面&lt;/h3&gt;&lt;p&gt;Spring Boot 默认提供了程序出错的结果映射路径&lt;code&gt;/error&lt;/code&gt;：&lt;br&gt;spring-boot-autoconfigure.jar/org.springframework.boot.autoconfigure.web.BasicErrorController.java&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fanlychie/mdimg/master/BasicErrorController_code.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Tomcat 上下文路径</title>
    <link href="http://yoursite.com/post/spring-boot-tomcat-context-path.html"/>
    <id>http://yoursite.com/post/spring-boot-tomcat-context-path.html</id>
    <published>2017-05-12T16:17:40.000Z</published>
    <updated>2017-07-07T12:16:05.163Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 内置 Tomcat 上下文路径默认是<code>/</code>。修改上下文路径的方式有：</p>
<h3 id="1-application-yml"><a href="#1-application-yml" class="headerlink" title="1. application.yml"></a>1. <code>application.yml</code></h3><p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  contextPath:</span> <span class="string">/my-app</span></div></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<h3 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2. application.properties"></a>2. <code>application.properties</code></h3><p></p><p class="code-title">src/main/resources/application.properties</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.contextPath=/my-app</div></pre></td></tr></table></figure><p></p>
<h3 id="3-命令行"><a href="#3-命令行" class="headerlink" title="3. 命令行"></a>3. 命令行</h3><p></p><p class="code-title">terminal</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -Dserver.contextPath=/my-app -jar xxxx.jar</div></pre></td></tr></table></figure><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 内置 Tomcat 上下文路径默认是&lt;code&gt;/&lt;/code&gt;。修改上下文路径的方式有：&lt;/p&gt;
&lt;h3 id=&quot;1-application-yml&quot;&gt;&lt;a href=&quot;#1-application-yml&quot; class=&quot;headerlink&quot; title=&quot;1. application.yml&quot;&gt;&lt;/a&gt;1. &lt;code&gt;application.yml&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-title&quot;&gt;src/main/resources/application.yml&lt;/p&gt;&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  contextPath:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/my-app&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Tomcat 端口</title>
    <link href="http://yoursite.com/post/spring-boot-tomcat-port.html"/>
    <id>http://yoursite.com/post/spring-boot-tomcat-port.html</id>
    <published>2017-05-12T16:16:30.000Z</published>
    <updated>2017-07-07T12:16:10.024Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 内置 Tomcat 端口默认是<code>8080</code>。修改端口的方式有：</p>
<h3 id="1．application-yml"><a href="#1．application-yml" class="headerlink" title="1．application.yml"></a>1．<code>application.yml</code></h3><p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8888</span></div></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<h3 id="2．application-properties"><a href="#2．application-properties" class="headerlink" title="2．application.properties"></a>2．<code>application.properties</code></h3><p></p><p class="code-title">src/main/resources/application.properties</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.port=8888</div></pre></td></tr></table></figure><p></p>
<h3 id="3．命令行"><a href="#3．命令行" class="headerlink" title="3．命令行"></a>3．命令行</h3><p></p><p class="code-title">terminal</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -Dserver.port=<span class="number">8888</span> -jar xxxx.jar</div></pre></td></tr></table></figure><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 内置 Tomcat 端口默认是&lt;code&gt;8080&lt;/code&gt;。修改端口的方式有：&lt;/p&gt;
&lt;h3 id=&quot;1．application-yml&quot;&gt;&lt;a href=&quot;#1．application-yml&quot; class=&quot;headerlink&quot; title=&quot;1．application.yml&quot;&gt;&lt;/a&gt;1．&lt;code&gt;application.yml&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-title&quot;&gt;src/main/resources/application.yml&lt;/p&gt;&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Banner</title>
    <link href="http://yoursite.com/post/spring-boot-logo-banner.html"/>
    <id>http://yoursite.com/post/spring-boot-logo-banner.html</id>
    <published>2017-05-12T16:16:13.000Z</published>
    <updated>2017-07-06T17:28:50.379Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 启动时的 Logo Banner：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  .   ____          _            __ _ _</div><div class="line"> /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</div><div class="line">( ( )\___ | '_ | '_| | '_ \/ _`| \ \ \ \</div><div class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line"> =========|_|==============|___/=/_/_/_/</div><div class="line"> :: Spring Boot ::        (v1.5.2.RELEASE)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="1-更换-Banner"><a href="#1-更换-Banner" class="headerlink" title="1. 更换 Banner"></a>1. 更换 Banner</h3><p>在<code>src/main/resources</code>目录下创建<code>banner.txt</code>文件：</p>
<p></p><p class="code-title">src/main/resources/banner.txt</p><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">                   _ooOoo_</div><div class="line">                  o8888888o</div><div class="line">                  88" . "88</div><div class="line">                  (| -_- |)</div><div class="line">                   O\ = /O</div><div class="line">               ____/`---'\____</div><div class="line">             .   ' \\| |//`.</div><div class="line">              / \\||| : |||// \</div><div class="line">            / _||||| -:- |||||- \</div><div class="line">              | | \\\ - /// | |</div><div class="line">            | \_| ''\---/'' | |</div><div class="line">             \ .-\__`-`___/-. /</div><div class="line">          ___`. .' /--.--\`. . __</div><div class="line">       ."" '&lt;`.___\_&lt;|&gt;_/___.' &gt;'"".</div><div class="line">      | | :`- \`.;`\ _ /`;.`/ -`: | |</div><div class="line">        \ \`-. \_ __\ /__ _/ .-`/ /</div><div class="line">======`-.____`-.___\_____/___.-`____.-'======</div><div class="line">                  `=---='</div><div class="line"></div><div class="line">.............................................</div><div class="line">         佛祖镇楼                  BUG辟易</div></pre></td></tr></table></figure><p></p>
<h3 id="2-禁用-Banner"><a href="#2-禁用-Banner" class="headerlink" title="2. 禁用 Banner"></a>2. 禁用 Banner</h3><p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  main:</span></div><div class="line"><span class="attr">    banner-mode:</span> <span class="string">'off'</span></div></pre></td></tr></table></figure><p></p>
<p>或</p>
<p></p><p class="code-title">src/main/resources/application.properties</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.main.banner-mode='off'</div></pre></td></tr></table></figure><p></p>
<p>或</p>
<p></p><p class="code-title">terminal</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -Dspring.main.banner-mode=off -jar xxxx.jar</div></pre></td></tr></table></figure><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 启动时的 Logo Banner：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  .   ____          _            __ _ _&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _`| \ \ \ \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; \\/  ___)| |_)| | | | | || (_| |  ) ) ) )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &#39;  |____| .__|_| |_|_| |_\__, | / / / /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; =========|_|==============|___/=/_/_/_/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; :: Spring Boot ::        (v1.5.2.RELEASE)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>JPQL 语言语法</title>
    <link href="http://yoursite.com/post/jpql-usage.html"/>
    <id>http://yoursite.com/post/jpql-usage.html</id>
    <published>2017-05-06T06:42:27.000Z</published>
    <updated>2017-07-06T17:33:05.072Z</updated>
    
    <content type="html"><![CDATA[<p>JPQL（Java Persistence Query Language，Java 持久化查询语言）和 SQL 之间有很多相似之处，它们之间主要的区别在于前者处理 JPA 实体类，而后者则直接涉及关系数据。在 JPQL 中，可以使用<code>SELECT</code>、<code>UPDATE</code>和<code>DELETE</code>语法来定义查询。</p>
<a id="more"></a>
<h2 id="1-查询"><a href="#1-查询" class="headerlink" title="1. 查询"></a>1. 查询</h2><p>语法：<code>SELECT ... FROM ... [WHERE ...] [GROUP BY ... [HAVING ...]] [ORDER BY ...]</code></p>
<p><strong> FROM 子句 </strong><br>通过声明一个或多个标识符变量来定义查询的范围。在<code>SELECT</code>和<code>WHERE</code>子句中可以引用这些变量。</p>
<p><strong> WHERE 子句 </strong><br>用于限制查询到的对象或值的条件表达式。</p>
<p><strong> GROUP BY 子句 </strong><br>根据一组属性对查询结果进行分组。</p>
<p><strong> HAVING 子句 </strong><br>配合<code>GROUP BY</code>子句使用，以根据条件表达式进一步限制查询结果。</p>
<p><strong> ORDER BY 子句 </strong><br>对查询结果进行排序。</p>
<p></p><p class="code-title"># 部门实体</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"Department"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">    <span class="meta">@OneToMany</span>(cascade = CascadeType.ALL, orphanRemoval = <span class="keyword">true</span>)</div><div class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"department_id"</span>)</div><div class="line">    <span class="keyword">private</span> Set&lt;Employee&gt; employees;</div><div class="line">	</div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 雇员实体</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"Employee"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</div><div class="line">    <span class="keyword">private</span> Sex sex;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Boolean married;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Double salary;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Date hireDate;</div><div class="line">	</div><div class="line">    <span class="meta">@ManyToOne</span>(fetch = FetchType.LAZY)</div><div class="line">    <span class="keyword">private</span> Department department;</div><div class="line">	</div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 性别枚举</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.enums;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Sex &#123;</div><div class="line">	</div><div class="line">    MALE(<span class="string">"男"</span>),</div><div class="line">	</div><div class="line">    FEMALE(<span class="string">"女"</span>),</div><div class="line">	</div><div class="line">    ;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String displayText;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Sex</span><span class="params">(String displayText)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.displayText = displayText;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> displayText;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h3 id="1-1-基础查询"><a href="#1-1-基础查询" class="headerlink" title="1.1 基础查询"></a>1.1 基础查询</h3><p>语法：<code>SELECT 标识符变量 FROM 实体名称 [AS] 标识符变量</code></p>
<p>示例：查询所有的雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-2-查询参数"><a href="#1-2-查询参数" class="headerlink" title="1.2 查询参数"></a>1.2 查询参数</h3><p>JPQL 支持两种查询参数，它们分别是命名参数和位置参数。</p>
<h4 id="1-2-1-命名参数"><a href="#1-2-1-命名参数" class="headerlink" title="1.2.1 命名参数"></a>1.2.1 命名参数</h4><p>语法：<code>:自定义的参数名称</code></p>
<p>示例：按性别和薪资范围查找雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = :sex AND E.salary &gt; :salary"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByNamedParams</span><span class="params">(@Param(<span class="string">"sex"</span>)</span> Sex sex, @<span class="title">Param</span><span class="params">(<span class="string">"salary"</span>)</span> Double salary)</span>;</div></pre></td></tr></table></figure>
<p>在方法的参数列表中，需要使用<code>@Param</code>注解标注每个参数的名称，使之与查询语句参数名称匹配。</p>
<h4 id="1-2-2-位置参数"><a href="#1-2-2-位置参数" class="headerlink" title="1.2.2 位置参数"></a>1.2.2 位置参数</h4><p>语法：<code>?位置编号的数值</code></p>
<p>示例：按姓名和性别查找雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = ?1 AND E.salary &gt; ?2"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByPositionalParams</span><span class="params">(Sex sex, Double salary)</span></span>;</div></pre></td></tr></table></figure>
<p>在方法的参数列表中，参数的顺序需要与查询语句中参数标注的编号依次对应起来。</p>
<h3 id="1-3-关联查询"><a href="#1-3-关联查询" class="headerlink" title="1.3 关联查询"></a>1.3 关联查询</h3><p>通过使用关键字<code>[LEFT|INNER] JOIN</code>联接关系属性查询。</p>
<h4 id="1-3-1-单值关联查询"><a href="#1-3-1-单值关联查询" class="headerlink" title="1.3.1 单值关联查询"></a>1.3.1 单值关联查询</h4><p>语法：<code>SELECT 标识符变量 FROM 实体名称 [AS] 标识符变量 JOIN 实体名称.单值关联字段 [AS] 标识符变量2 ...</code></p>
<p>示例：按部门名称查找该部门所有的雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E JOIN E.department D WHERE D.name = ?1"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByDeptName</span><span class="params">(String deptName)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="1-3-2-多值关联查询"><a href="#1-3-2-多值关联查询" class="headerlink" title="1.3.2 多值关联查询"></a>1.3.2 多值关联查询</h4><p>语法1：<code>SELECT 标识符变量 FROM 实体名称 [AS] 标识符变量 JOIN 实体名称.多值关联字段 [AS] 标识符变量2 ...</code></p>
<p>示例：查询薪资大于10000的所有雇员所属的部门信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT D FROM Department D JOIN D.employees E WHERE E.salary &gt; 10000"</span>)</div><div class="line"><span class="function">List&lt;Department&gt; <span class="title">selectByMultRelatedField</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>语法2：<code>SELECT 标识符变量 FROM 实体名称 [AS] 标识符变量, IN(实体名称.多值关联字段) [AS] 标识符变量2 ...</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT D FROM Department D, IN(D.employees) E WHERE E.salary &gt; 10000"</span>)</div><div class="line"><span class="function">List&lt;Department&gt; <span class="title">selectByMultRelatedCollection</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-4-去重查询"><a href="#1-4-去重查询" class="headerlink" title="1.4 去重查询"></a>1.4 去重查询</h3><p>语法：<code>SELECT DISTINCT 标识符变量 FROM 实体名称 [AS] 标识符变量 ...</code></p>
<p>示例：查询薪资大于10000的所有雇员所属的部门信息，并消除查询结果中的重复的部门</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT DISTINCT D FROM Department D JOIN D.employees E WHERE E.salary &gt; 10000"</span>)</div><div class="line"><span class="function">List&lt;Department&gt; <span class="title">selectByMultRelatedFieldDistinct</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-5-字面值"><a href="#1-5-字面值" class="headerlink" title="1.5 字面值"></a>1.5 字面值</h3><p>JPQL 支持的字面值有以下的4种，它们分别是：字符串、数字、布尔、枚举。</p>
<h4 id="1-5-1-字符串"><a href="#1-5-1-字符串" class="headerlink" title="1.5.1 字符串"></a>1.5.1 字符串</h4><p>语法：<code>&#39;字符串&#39;</code></p>
<p>示例：查询给定名字的雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name = '张三'"</span>)</div><div class="line"><span class="function">Employee <span class="title">selectByLiteralString</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>如果字符串中含有单引号，则用两个单引号来表示。如：<code>Li&#39;Si</code> -&gt; <code>Li&#39;&#39;Si</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name = 'Li''Si'"</span>)</div><div class="line"><span class="function">Employee <span class="title">selectByLiteralStringWithQuote</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h4 id="1-5-2-数字"><a href="#1-5-2-数字" class="headerlink" title="1.5.2 数字"></a>1.5.2 数字</h4><p>整数类型：如<code>24</code>、<code>+24</code>、<code>-24</code>、<code>24L</code>，支持 Java Long 范围的数值。</p>
<p>浮点类型：如<code>24.</code>、<code>24.6</code>、<code>+24.6</code>、<code>-24.6</code>、<code>24.6F</code>、<code>24.6D</code>，支持 Java Double 范围的数值。</p>
<p>示例：查询薪资大于10000的所有雇员</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.salary &gt; 10000.0"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByLiteralNumber</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h4 id="1-5-3-布尔"><a href="#1-5-3-布尔" class="headerlink" title="1.5.3 布尔"></a>1.5.3 布尔</h4><p>布尔类型的可选值为：<code>TRUE</code>或<code>FALSE</code>，它们不区分大小写。</p>
<p>示例：查找已婚的所有雇员</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.married = TRUE"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByLiteralBool</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h4 id="1-5-4-枚举"><a href="#1-5-4-枚举" class="headerlink" title="1.5.4 枚举"></a>1.5.4 枚举</h4><p>枚举类名必须指定为完全限定类名。</p>
<p>示例：查询所有女性的雇员</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = org.fanlychie.enums.Sex.FEMALE"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByLiteralEnum</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-6-模糊查询"><a href="#1-6-模糊查询" class="headerlink" title="1.6 模糊查询"></a>1.6 模糊查询</h3><table>
<thead>
<tr>
<th>表达式</th>
<th style="text-align:center">匹配</th>
<th style="text-align:center">不匹配</th>
</tr>
</thead>
<tbody>
<tr>
<td>E.name LIKE ‘张%’</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">小张伟</td>
</tr>
<tr>
<td>E.name LIKE ‘张_’</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">张三丰</td>
</tr>
<tr>
<td>E.name LIKE ‘张\_%’</td>
<td style="text-align:center">张_三</td>
<td style="text-align:center">张三</td>
</tr>
</tbody>
</table>
<p>示例：查询张性的所有雇员</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name LIKE '张%'"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByLikeLiteralString</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-7-空集合查询"><a href="#1-7-空集合查询" class="headerlink" title="1.7 空集合查询"></a>1.7 空集合查询</h3><p>通过使用关键字<code>IS [NOT] EMPTY</code>来查找关联的属性集合的值为空的记录。</p>
<p>示例：查找尚无雇员的所有部门</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT D FROM Department D WHERE D.employees IS EMPTY"</span>)</div><div class="line"><span class="function">List&lt;Department&gt; <span class="title">selectByEmpty</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-8-构造器"><a href="#1-8-构造器" class="headerlink" title="1.8 构造器"></a>1.8 构造器</h3><p>查询结果的类型如果不是持久化的实体类，必须使用该类的完全限定名。</p>
<p>语法：<code>SELECT NEW 类的完全限定名(参数1, 参数2, ...) ...</code></p>
<p>示例：查询所有的雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT NEW org.fanlychie.model.SimpleEmployee(E.name, E.sex) FROM Employee E"</span>)</div><div class="line"><span class="function">List&lt;SimpleEmployee&gt; <span class="title">selectSimpleEmployees</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.model;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEmployee</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Sex sex;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleEmployee</span><span class="params">(String name, Sex sex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-更新"><a href="#2-更新" class="headerlink" title="2. 更新"></a>2. 更新</h2><p>示例：更新某个雇员的婚姻状态和薪资信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Modifying</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Query</span>(<span class="string">"UPDATE Employee SET married = ?2, salary = ?3 WHERE id = ?1"</span>)</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Long id, Boolean married, Double salary)</span></span>;</div></pre></td></tr></table></figure>
<p><code>@Query</code>无法进行 DML（Data Manipulation Language 数据操控语言，主要语句有 INSERT、DELETE、UPDATE）操作，如需更新数据库表的数据需要标注<code>@Modifying</code>注解，并且需要使用支持事务的<code>@Transactional</code>注解。</p>
<h2 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h2><p>示例：删除没有雇员的部门信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Modifying</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Query</span>(<span class="string">"DELETE FROM Department D WHERE D.employees IS EMPTY"</span>)</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-jpql-sample" target="_blank" rel="external">spring-boot-jpql-sample</a><br>参考文档文献链接：<a href="http://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm" target="_blank" rel="external">http://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm</a>、<a href="http://docs.oracle.com/html/E13946_04/ejb3_langref.html" target="_blank" rel="external">http://docs.oracle.com/html/E13946_04/ejb3_langref.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JPQL（Java Persistence Query Language，Java 持久化查询语言）和 SQL 之间有很多相似之处，它们之间主要的区别在于前者处理 JPA 实体类，而后者则直接涉及关系数据。在 JPQL 中，可以使用&lt;code&gt;SELECT&lt;/code&gt;、&lt;code&gt;UPDATE&lt;/code&gt;和&lt;code&gt;DELETE&lt;/code&gt;语法来定义查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Jpa</title>
    <link href="http://yoursite.com/post/spring-boot-jpa.html"/>
    <id>http://yoursite.com/post/spring-boot-jpa.html</id>
    <published>2017-04-30T13:04:47.000Z</published>
    <updated>2017-07-07T12:32:44.259Z</updated>
    
    <content type="html"><![CDATA[<p>JPA（Java Persistence API）是一套 Java 持久化规范，用于将应用程序中的对象映射到关系型数据库。<br>应用程序的数据访问层通常为域对象提供创建、读取、更新和删除（CRUD）操作，Spring Data JPA 提供了这方面的通用接口以及持久化存储特定的实现，它选择目前最流行之一的 Hibernate 作为 JPA 实现的提供者，旨在简化数据访问层。作为应用程序的开发人员，你只需要编写数据库的存取接口，由 Spring 运行时自动生成这些接口的适当实现，开发人员不需要编写任何具体的实现代码。在 Spring Boot 中，通过使用<code>spring-boot-starter-data-jpa</code>启动器，就能快速开启和使用 Spring Data JPA。</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<h2 id="1-编程接口"><a href="#1-编程接口" class="headerlink" title="1. 编程接口"></a>1. 编程接口</h2><p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/JpaRepository.png" alt=""></p>
<h3 id="1-1-Repository"><a href="#1-1-Repository" class="headerlink" title="1.1 Repository"></a>1.1 Repository</h3><p>这是 Spring Data Jpa 抽象的中心接口，它是一个标记接口。扩展此接口需要传递实体类型和实体的ID字段类型参数，你必须在接口里面声明你自己需要的方法，这些方法由 Spring 在运行时提供具体的实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function">Employee <span class="title">findOne</span><span class="params">(Long id)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-2-CrudRepository"><a href="#1-2-CrudRepository" class="headerlink" title="1.2 CrudRepository"></a>1.2 CrudRepository</h3><p>继承自 Repository 接口，它提供了一套 CRUD 操作的方法。扩展此接口需要传递实体类型和实体的ID字段类型参数，你可以不需要再定义基础的 CRUD 操作方法而直接可以使用它们。但在某些场景中你可能不希望接口对外暴露一套完整的增删查改的方法，比如你只希望提供查改的方法而不希望暴露增删的功能。基于这种情况，你可以使用 Repository 接口，并将需要的方法从 CrudRepository 拷贝到其中以选择性的公开 CRUD 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-1-save"><a href="#1-2-1-save" class="headerlink" title="1.2.1 save"></a>1.2.1 save</h4><p>当你需要修改数据库的数据时，你可以调用此方法。当此方法被调用时，它首先判断参数的实体对象是否是新的。如果是新的，则调用 persist 将对象数据 insert 到数据库。如果不是新的，则调用 merge 将对象数据 update/insert 到数据库。源码：<a href="https://github.com/spring-projects/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java#L482" target="_blank" rel="external">spring-data-jpa.jar!\org\springframework\data\jpa\repository\support\SimpleJpaRepository.java</a></p>
<p></p><p class="code-title"># SimpleJpaRepository 源码片段</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S entity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (entityInformation.isNew(entity)) &#123;</div><div class="line">        em.persist(entity);</div><div class="line">        <span class="keyword">return</span> entity;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> em.merge(entity);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>判断实体对象是否是新的，其依据是主键字段是否设置了有效的值。源码：<a href="https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/repository/core/support/AbstractEntityInformation.java#L41" target="_blank" rel="external">spring-data-commons.jar!\org\springframework\data\repository\core\support\AbstractEntityInformation.java</a></p>
<p></p><p class="code-title"># AbstractEntityInformation 源码片段</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNew</span><span class="params">(T entity)</span> </span>&#123;</div><div class="line">    ID id = getId(entity);</div><div class="line">    Class&lt;ID&gt; idType = getIdType();</div><div class="line">    <span class="keyword">if</span> (!idType.isPrimitive()) &#123;</div><div class="line">        <span class="keyword">return</span> id == <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (id <span class="keyword">instanceof</span> Number) &#123;</div><div class="line">        <span class="keyword">return</span> ((Number) id).longValue() == <span class="number">0L</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"Unsupported primitive id type %s!"</span>, idType));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>因此，<code>CrudRepository.save()</code>既有保存又有更新数据的能力。保存一条数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">    employee.setName(<span class="string">"张三丰"</span>);</div><div class="line">    employee.setAge(<span class="number">24</span>);</div><div class="line">    employeeRepository.save(employee);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更新数据时，应该先从数据库将记录查询出来，对数据修改完成之后再调用<code>save</code>更新回数据库：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = employeeRepository.findByName(<span class="string">"张三丰"</span>);</div><div class="line">    employee.setAge(<span class="number">25</span>);</div><div class="line">    employeeRepository.save(employee);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>切勿脑洞大开异想通过设置主键字段的值来直接更新数据库的记录，以下做法是不可取的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateById</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">    employee.setId(<span class="number">1L</span>);  <span class="comment">// 已知ID=1的记录是存在的</span></div><div class="line">    employee.setAge(<span class="number">26</span>); <span class="comment">// 期望根据ID更新年龄的值</span></div><div class="line">    employeeRepository.save(employee);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法执行完之后悲剧就发生了，除了主键和年龄之外，其余字段的值全部被清空了。观众朋友切勿模仿。</p>
<h4 id="1-2-2-delete"><a href="#1-2-2-delete" class="headerlink" title="1.2.2 delete"></a>1.2.2 delete</h4><p>根据主键删除时，主键字段不能为空，并且在数据库中必须得有与主键对应的行记录（通过<code>SELECT</code>查询判断），然后将查询出的行记录删除。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</div><div class="line">    employeeRepository.delete(<span class="number">1L</span>); <span class="comment">// 产生 SELECT 和 DELETE 语句</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据实体删除时，实体对象不能为空，依据实体的主键标识判断数据库中是否有与之对应的行记录，如果有，则将此行删除；如果没有，则调用<code>merge</code>产生 INSERT 语句，然后再删除。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">    employee.setId(<span class="number">2L</span>); <span class="comment">// 此 ID 在数据库中存在</span></div><div class="line">    employeeRepository.delete(employee); <span class="comment">// 产生 SELECT 和 DELETE</span></div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByNonExistentEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">    employee.setId(<span class="number">20L</span>); <span class="comment">// 此 ID 在数据库中不存在</span></div><div class="line">    employeeRepository.delete(employee); <span class="comment">// 产生 SELECT 和 INSERT 及 DELETE</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-3-PagingAndSortingRepository"><a href="#1-3-PagingAndSortingRepository" class="headerlink" title="1.3 PagingAndSortingRepository"></a>1.3 PagingAndSortingRepository</h3><p>继承自 CrudRepository 接口，它提供了一个分页和排序的操作方法。扩展此接口需要传递实体类型和实体的ID字段类型参数，但是通常我们会比较少选择扩展该接口，而更多的是在接口里声明含有 Pageable 或 Sort 类型参数的方法来完成分页或排序的功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-1-排序查询"><a href="#1-3-1-排序查询" class="headerlink" title="1.3.1 排序查询"></a>1.3.1 排序查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAndOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    orders.add(<span class="keyword">new</span> Order(Direction.DESC, <span class="string">"salary"</span>)); <span class="comment">// 薪资降序</span></div><div class="line">    orders.add(<span class="keyword">new</span> Order(<span class="string">"age"</span>)); <span class="comment">// 薪资相同则按年龄升序</span></div><div class="line">    orders.add(<span class="keyword">new</span> Order(<span class="string">"hireDate"</span>).with(Direction.ASC)); <span class="comment">// 薪资和年龄都相同则按入职时间升序</span></div><div class="line">    employeeRepository.findAll(<span class="keyword">new</span> Sort(orders))</div><div class="line">            .forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAndSort</span><span class="params">()</span> </span>&#123;</div><div class="line">    Sort sort = <span class="keyword">new</span> Sort(Direction.DESC, <span class="string">"salary"</span>) <span class="comment">// 薪资降序</span></div><div class="line">            .and(<span class="keyword">new</span> Sort(<span class="string">"age"</span>)) <span class="comment">// 薪资相同则按年龄升序</span></div><div class="line">            .and(<span class="keyword">new</span> Sort(Direction.DESC, <span class="string">"hireDate"</span>)); <span class="comment">// 薪资和年龄都相同则按入职时间升序</span></div><div class="line">    employeeRepository.findAll(sort)</div><div class="line">            .forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-2-分页查询"><a href="#1-3-2-分页查询" class="headerlink" title="1.3.2 分页查询"></a>1.3.2 分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPagination</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 分页索引从0开始, 表示第一页</span></div><div class="line">    Page&lt;Employee&gt; page = employeeRepository.findAll(<span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">2</span>));</div><div class="line">    <span class="keyword">long</span> totalElements = page.getTotalElements(); <span class="comment">// 查询结果总的记录条数</span></div><div class="line">    <span class="keyword">int</span> totalPages = page.getTotalPages(); <span class="comment">// 分页的总页数</span></div><div class="line">    List&lt;Employee&gt; content = page.getContent(); <span class="comment">// 当前页的数据内容</span></div><div class="line">    <span class="keyword">int</span> number = page.getNumber(); <span class="comment">// 当前页的页码, 从0开始, 表示第一页</span></div><div class="line">    <span class="keyword">int</span> numberOfElements = page.getNumberOfElements(); <span class="comment">// 每页的记录条数</span></div><div class="line">    <span class="keyword">int</span> size = page.getSize(); <span class="comment">// 每页的记录条数</span></div><div class="line">    Sort sort = page.getSort(); <span class="comment">// 分页查询的排序对象</span></div><div class="line">    <span class="keyword">boolean</span> isFirst = page.isFirst(); <span class="comment">// 是否是第一页</span></div><div class="line">    <span class="keyword">boolean</span> isLast = page.isLast(); <span class="comment">// 是否是最后一页</span></div><div class="line">    <span class="keyword">boolean</span> hasContent = page.hasContent(); <span class="comment">// 当前页是否有数据</span></div><div class="line">    <span class="keyword">boolean</span> hasNext = page.hasNext(); <span class="comment">// 是否有下一页</span></div><div class="line">    <span class="keyword">boolean</span> hasPrevious = page.hasPrevious(); <span class="comment">// 是否有上一页</span></div><div class="line">    Pageable nextPageable = page.nextPageable(); <span class="comment">// 下一页的分页对象</span></div><div class="line">    Pageable previousPageable = page.previousPageable(); <span class="comment">// 上一页的分页对象</span></div><div class="line">    page.forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-3-分页并排序"><a href="#1-3-3-分页并排序" class="headerlink" title="1.3.3 分页并排序"></a>1.3.3 分页并排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPaginationAndSort</span><span class="params">()</span> </span>&#123;</div><div class="line">    Sort sort = <span class="keyword">new</span> Sort(Direction.DESC, <span class="string">"salary"</span>) <span class="comment">// 薪资降序</span></div><div class="line">            .and(<span class="keyword">new</span> Sort(<span class="string">"age"</span>)); <span class="comment">// 薪资相同则按年龄升序</span></div><div class="line">    Page&lt;Employee&gt; page = employeeRepository.findAll(<span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">2</span>, sort));</div><div class="line">    page.forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-4-JpaRepository"><a href="#1-4-JpaRepository" class="headerlink" title="1.4 JpaRepository"></a>1.4 JpaRepository</h3><p>继承自 PagingAndSortingRepository 接口，它提供了一组实用的操作方法，如批量操作等。扩展此接口需要传递实体类型和实体的ID字段类型参数，该接口的一部分方法返回 List 类型的实体，与之不同的是，CrudRepository 返回的是 Iterable 类型的实体。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-定义查询方法"><a href="#2-定义查询方法" class="headerlink" title="2. 定义查询方法"></a>2. 定义查询方法</h2><p>Spring Data JPA 在运行时会为接口创建代理对象并为接口声明的方法提供具体的实现。代理提供了两种方式来从方法名中提取查询，一种是从方法名中直接提取查询，另外一种是从方法中提取手工定义的查询语句。代理如何创建查询是由具体的策略来决定的。</p>
<table>
<thead>
<tr>
<th style="text-align:center">策略</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CREATE</td>
<td>根据方法名构造出一个特定的查询。<br>具体的做法是从方法名中移除一组已知的前缀，然后解析剩余的部分。</td>
</tr>
<tr>
<td style="text-align:center">USE_DECLARED_QUERY</td>
<td>使用查询注解定义的查询语句。如：<br>@Query、@NamedQuery、@NamedNativeQuery</td>
</tr>
<tr>
<td style="text-align:center">CREATE_IF_NOT_FOUND</td>
<td>默认使用的策略。<br>它组合了 CREATE 和 USE_DECLARED_QUERY 两个策略。它首先使用 USE_DECLARED_QUERY 策略查找，如果找不到再使用 CREATE 策略。</td>
</tr>
</tbody>
</table>
<h3 id="2-1-创建查询"><a href="#2-1-创建查询" class="headerlink" title="2.1 创建查询"></a>2.1 创建查询</h3><p>JPA 提供了一种可以根据方法名称直接构造出查询语句的方式，这种方式称为创建查询。在存储库接口中定义的方法，其名称只需按照约定命名，需满足以下的规则：</p>
<ul>
<li>方法名必须以：<code>findBy</code> <code>find...By</code> <code>readBy</code> <code>read...By</code> <code>queryBy</code> <code>query...By</code><br><code>countBy</code> <code>count...By</code> <code>getBy</code> <code>get...By</code>前缀之一开始命名；</li>
<li>在第一个<code>By</code>之后可以添加查询方法的检索条件，可以使用实体的属性名和支持的关键字来组合；</li>
<li>在第一个<code>By</code>之前可以添加<code>First</code>或<code>Top</code>关键字，表示返回查询结果的第一条数据。除此之外，关键字<code>First</code>或<code>Top</code>的后面也可以携带数字表示返回前多少条的数据，如<code>Top10</code>；</li>
<li>在第一个<code>By</code>之前可以添加<code>Distinct</code>关键字，去掉查询结果中重复的数据；</li>
<li>查询方法如果设定了X个检索条件，那么，查询方法的参数个数也必须是X个，并且参数必须按与检索条件相同的顺序给出；</li>
<li>查询方法同时还可以使用特殊的<code>Pageable</code>或<code>Sort</code>参数，用于分页或排序，该参数不算在X之内；</li>
</ul>
<h4 id="2-1-1-查询方法支持的关键字表"><a href="#2-1-1-查询方法支持的关键字表" class="headerlink" title="2.1.1 查询方法支持的关键字表"></a>2.1.1 查询方法支持的关键字表</h4><table>
<thead>
<tr>
<th>关键字</th>
<th>示例</th>
<th>JPQL 片段</th>
</tr>
</thead>
<tbody>
<tr>
<td>And</td>
<td>findByLastnameAndFirstname</td>
<td><code>… where x.lastname = ?1 and x.firstname = ?2</code></td>
</tr>
<tr>
<td>Or</td>
<td>findByLastnameOrFirstname</td>
<td><code>… where x.lastname = ?1 or x.firstname = ?2</code></td>
</tr>
<tr>
<td>Is<br>Equals</td>
<td>findByFirstname<br>findByFirstnameIs<br>findByFirstnameEquals</td>
<td><code>… where x.firstname = ?1</code></td>
</tr>
<tr>
<td>Between</td>
<td>findByStartDateBetween</td>
<td><code>… where x.startDate between ?1 and ?2</code></td>
</tr>
<tr>
<td>LessThan</td>
<td>findByAgeLessThan</td>
<td><code>… where x.age &lt; ?1</code></td>
</tr>
<tr>
<td>LessThanEqual</td>
<td>findByAgeLessThanEqual</td>
<td><code>… where x.age &lt;= ?1</code></td>
</tr>
<tr>
<td>GreaterThan</td>
<td>findByAgeGreaterThan</td>
<td><code>… where x.age &gt; ?1</code></td>
</tr>
<tr>
<td>GreaterThanEqual</td>
<td>findByAgeGreaterThanEqual</td>
<td><code>… where x.age &gt;= ?1</code></td>
</tr>
<tr>
<td>After</td>
<td>findByStartDateAfter</td>
<td><code>… where x.startDate &gt; ?1</code></td>
</tr>
<tr>
<td>Before</td>
<td>findByStartDateBefore</td>
<td><code>… where x.startDate &lt; ?1</code></td>
</tr>
<tr>
<td>IsNull</td>
<td>findByAgeIsNull</td>
<td><code>… where x.age is null</code></td>
</tr>
<tr>
<td>IsNotNull<br>NotNull</td>
<td>findByAgeNotNull<br>findByAgeIsNotNull</td>
<td><code>… where x.age not null</code></td>
</tr>
<tr>
<td>Like</td>
<td>findByFirstnameLike</td>
<td><code>… where x.firstname like ?1</code></td>
</tr>
<tr>
<td>NotLike</td>
<td>findByFirstnameNotLike</td>
<td><code>… where x.firstname not like ?1</code></td>
</tr>
<tr>
<td>StartingWith</td>
<td>findByFirstnameStartingWith</td>
<td><code>… where x.firstname like ?1 (parameter bound with appended %)</code></td>
</tr>
<tr>
<td>EndingWith</td>
<td>findByFirstnameEndingWith</td>
<td><code>… where x.firstname like ?1 (parameter bound with prepended %)</code></td>
</tr>
<tr>
<td>Containing</td>
<td>findByFirstnameContaining</td>
<td><code>… where x.firstname like ?1 (parameter bound wrapped in %)</code></td>
</tr>
<tr>
<td>OrderBy</td>
<td>findByAgeOrderByLastnameDesc</td>
<td><code>… where x.age = ?1 order by x.lastname desc</code></td>
</tr>
<tr>
<td>Not</td>
<td>findByLastnameNot</td>
<td><code>… where x.lastname &lt;&gt; ?1</code></td>
</tr>
<tr>
<td>In</td>
<td>findByAgeIn(Collection&lt;Age&gt; ages)</td>
<td><code>… where x.age in ?1</code></td>
</tr>
<tr>
<td>NotIn</td>
<td>findByAgeNotIn(Collection&lt;Age&gt; age)</td>
<td><code>… where x.age not in ?1</code></td>
</tr>
<tr>
<td>True</td>
<td>findByActiveTrue()</td>
<td><code>… where x.active = true</code></td>
</tr>
<tr>
<td>False</td>
<td>findByActiveFalse()</td>
<td><code>… where x.active = false</code></td>
</tr>
<tr>
<td>IgnoreCase</td>
<td>findByFirstnameIgnoreCase</td>
<td><code>… where UPPER(x.firstame) = UPPER(?1)</code></td>
</tr>
</tbody>
</table>
<h4 id="2-1-2-查询方法支持的返回值表"><a href="#2-1-2-查询方法支持的返回值表" class="headerlink" title="2.1.2 查询方法支持的返回值表"></a>2.1.2 查询方法支持的返回值表</h4><table>
<thead>
<tr>
<th>类型</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td>不需要返回值</td>
</tr>
<tr>
<td>Primitives</td>
<td>Java 基本数据类型</td>
</tr>
<tr>
<td>Wrapper</td>
<td>Java 基本数据类型对应的包装类型</td>
</tr>
<tr>
<td>T</td>
<td>期望返回的实体类型，查询方法至多只能返回一条数据结果，多于一条数据的结果将抛出异常，没有查询到数据结果，则返回 null</td>
</tr>
<tr>
<td>Iterator&lt;T&gt;</td>
<td>迭代器类型</td>
</tr>
<tr>
<td>Collection&lt;T&gt;</td>
<td>集合类型</td>
</tr>
<tr>
<td>List&lt;T&gt;</td>
<td>List 集合类型</td>
</tr>
<tr>
<td>Optional&lt;T&gt;</td>
<td>Java8 Optional 类型</td>
</tr>
<tr>
<td>Stream&lt;T&gt;</td>
<td>Java8 Stream 类型</td>
</tr>
<tr>
<td>Future&lt;T&gt;</td>
<td>Java8 Future 类型，使用<code>@Async</code>注解标注查询方法，并且需要启用 Spring 异步方法执行的功能</td>
</tr>
<tr>
<td>CompletableFuture&lt;T&gt;</td>
<td>Java8 CompletableFuture 类型，使用<code>@Async</code>注解标注查询方法，并且需要启用 Spring 异步方法执行的功能</td>
</tr>
<tr>
<td>ListenableFuture</td>
<td>Spring ListenableFuture 类型，使用<code>@Async</code>注解标注查询方法，并且需要启用 Spring 异步方法执行的功能</td>
</tr>
<tr>
<td>Slice</td>
<td>分页相关</td>
</tr>
<tr>
<td>Page&lt;T&gt;</td>
<td>分页相关</td>
</tr>
</tbody>
</table>
<p>在存储库接口中定义的方法，只需要按照约定命名，就能快速实现查询的功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据姓名查询</span></div><div class="line">    <span class="function">Employee <span class="title">findByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据姓名查询, 返回第一条记录</span></div><div class="line">    <span class="function">Employee <span class="title">findFirstByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据姓名和性别查询</span></div><div class="line">    <span class="function">Employee <span class="title">findByNameAndSex</span><span class="params">(String name, Sex sex)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据性别查询, 返回前3条记录</span></div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">findTop3BySex</span><span class="params">(Sex sex)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据性别分页查询</span></div><div class="line">    <span class="function">Page&lt;Employee&gt; <span class="title">findBySex</span><span class="params">(Sex sex, Pageable pageable)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据给定的年龄查找小于且未婚的记录并按年龄升序排序</span></div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">findByAgeLessThanAndMarriedIsFalseOrderByAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建查询的优点是，不用编写查询语句，处理检索条件简单的查询非常方便，而且方法的可读性很高。但是对于检索条件过多的查询方法，很容易导致方法名称过长，可读性降低。</p>
<h3 id="2-2-命名查询"><a href="#2-2-命名查询" class="headerlink" title="2.2 命名查询"></a>2.2 命名查询</h3><p>JPA 提供了一种可以将查询语句从存储库接口中独立出来的方式，这种方式称为命名查询。它允许我们通过使用<code>@NamedQuery</code>或<code>@NamedNativeQuery</code>注解将预定义好的静态查询语句直接绑定到目标方法。<br>命名查询的优点是，查询语句集中，便于维护，查询方法的名称不受约束，编写复杂的查询只要合理命名也不会导致产生过长的方法名称。但是由于命名查询的注解都是标注在实体类中，因此它不适合用于大量定义查询语句，这样会使得实体类变得过于臃肿。</p>
<h4 id="2-2-1-NamedQuery"><a href="#2-2-1-NamedQuery" class="headerlink" title="2.2.1 @NamedQuery"></a>2.2.1 @NamedQuery</h4><table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td>用于定义查询的方法名称，该方法名称是全局范围的，为避免不同的实体定义了相同的方法名称而导致的查询冲突，JPA 明确规定自定义的方法名称的命名需要满足约定：<br>实体类的简单类名 + <strong>“.”</strong> + 自定义的查询方法名称</td>
</tr>
<tr>
<td style="text-align:center">query</td>
<td>用于定义 <a href="http://fanlychie.github.io/post/jpql-usage.html" target="_blank" rel="external">JPQL 查询语句</a>（附：<a href="http://fanlychie.github.io/post/jpql-usage.html#2-2-查询参数" target="_blank" rel="external">查询参数语法</a>）</td>
</tr>
</tbody>
</table>
<p>使用<code>@NamedQuery</code>注解需要在实体类中标注使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"Employee"</span>)</div><div class="line"><span class="meta">@NamedQueries</span>(&#123;</div><div class="line">    <span class="meta">@NamedQuery</span>(</div><div class="line">        name = <span class="string">"Employee.selectBySex"</span>,</div><div class="line">        query = <span class="string">"SELECT E FROM Employee E WHERE E.sex = ?1"</span></div><div class="line">    ),</div><div class="line">    <span class="meta">@NamedQuery</span>(</div><div class="line">        name = <span class="string">"Employee.selectByName"</span>,</div><div class="line">        query = <span class="string">"SELECT E FROM Employee E WHERE E.name = ?1"</span></div><div class="line">    )</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在存储库接口中声明与这些名称相同的方法即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function">Employee <span class="title">selectByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">selectBySex</span><span class="params">(Sex sex)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-2-NamedNativeQuery"><a href="#2-2-2-NamedNativeQuery" class="headerlink" title="2.2.2 @NamedNativeQuery"></a>2.2.2 @NamedNativeQuery</h4><p>注解<code>@NamedNativeQuery</code>与<code>@NamedQuery</code>的用法和作用相类似。不同的是，<code>@NamedQuery</code>使用的是 JPQL 查询语言，可以做到跨数据库平台。而<code>@NamedNativeQuery</code>使用的是 SQL 查询语言，与特定的数据库平台紧密相关。<code>@NamedNativeQuery</code>注解也是需要在实体类中标注使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"Employee"</span>)</div><div class="line"><span class="meta">@NamedNativeQueries</span>(&#123;</div><div class="line">    <span class="meta">@NamedNativeQuery</span>(</div><div class="line">        name = <span class="string">"Employee.searchBySex"</span>,</div><div class="line">        query = <span class="string">"SELECT * FROM EMPLOYEE WHERE SEX = ?1"</span>,</div><div class="line">        resultClass = Employee.class</div><div class="line">    ),</div><div class="line">    <span class="meta">@NamedNativeQuery</span>(</div><div class="line">        name = <span class="string">"Employee.searchByName"</span>,</div><div class="line">        query = <span class="string">"SELECT * FROM EMPLOYEE WHERE NAME = ?1"</span>,</div><div class="line">        resultClass = Employee.class</div><div class="line">    )</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相比较<code>@NamedQuery</code>注解而言，多了一个<code>resultClass</code>参数，它用于定义查询结果的返回值类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function">Employee <span class="title">searchByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">searchBySex</span><span class="params">(String sex)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-3-Query-查询"><a href="#2-3-Query-查询" class="headerlink" title="2.3 @Query 查询"></a>2.3 @Query 查询</h3><p>使用<code>@Query</code>注解可以直接将查询语句绑定到存储库接口的方法上，它同时支持 JPQL 和 SQL 查询语言。另外，它对方法名称的命名没有约束，并且查询语句就编写在方法的上方，方便追踪查询方法的具体作用。</p>
<h4 id="2-3-1-JPQL-查询"><a href="#2-3-1-JPQL-查询" class="headerlink" title="2.3.1 JPQL 查询"></a>2.3.1 JPQL 查询</h4><p>注解<code>@Query</code>默认使用的就是 JPQL 查询语言：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name = ?1"</span>)</div><div class="line">    <span class="function">Employee <span class="title">queryOneByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-2-SQL-查询"><a href="#2-3-2-SQL-查询" class="headerlink" title="2.3.2 SQL 查询"></a>2.3.2 SQL 查询</h4><p>在<code>@Query</code>注解中，如果要使用 SQL 查询语言，<code>nativeQuery</code>参数需要标记为 <code>true</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(value = <span class="string">"SELECT * FROM EMPLOYEE WHERE NAME = ?1"</span>, nativeQuery = <span class="keyword">true</span>)</div><div class="line">    <span class="function">Employee <span class="title">queryOneByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-3-LIKE-查询"><a href="#2-3-3-LIKE-查询" class="headerlink" title="2.3.3 LIKE 查询"></a>2.3.3 LIKE 查询</h4><p>在<code>@Query</code>注解中，可以使用高级的<code>LIKE</code>表达式查询（命名查询不支持）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name LIKE %?1"</span>)</div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">queryNameLike</span><span class="params">(String suffixName)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-4-分页查询"><a href="#2-3-4-分页查询" class="headerlink" title="2.3.4 分页查询"></a>2.3.4 分页查询</h4><p>如果你使用的是<code>@Query</code>的 JPQL 查询语言，只需在查询方法中添加<code>Pageable</code>参数就能实现分页查询：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = ?1"</span>)</div><div class="line">    <span class="function">Page&lt;Employee&gt; <span class="title">queryBySexPagination</span><span class="params">(Sex sex, Pageable pageable)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你使用的不是 JPQL 而是 SQL 查询语言，则还需提供<code>countQuery</code>参数用于查询结果的总条数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(value = <span class="string">"SELECT * FROM EMPLOYEE WHERE SEX = ?1"</span>,</div><div class="line">      countQuery = <span class="string">"SELECT COUNT(*) FROM EMPLOYEE WHERE SEX = ?1 "</span>,</div><div class="line">      nativeQuery = <span class="keyword">true</span>)</div><div class="line">    <span class="function">Page&lt;Employee&gt; <span class="title">queryBySexPagination</span><span class="params">(String sex, Pageable pageable)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Spring Data JPA 官方文档给出了<code>@Query</code>注解使用本地查询分页的基础示例（<a href="http://docs.spring.io/spring-data/jpa/docs/1.11.1.RELEASE/reference/html/#_native_queries" target="_blank" rel="external">Example 51</a>），但是按照该示例编写出的代码运行时报错。</p>
<h4 id="2-3-5-排序查询"><a href="#2-3-5-排序查询" class="headerlink" title="2.3.5 排序查询"></a>2.3.5 排序查询</h4><p>如果你使用的是<code>@Query</code>的 JPQL 查询语言，只需在查询方法中添加<code>Sort</code>参数就能实现排序功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = ?1"</span>)</div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">queryBySexAndSort</span><span class="params">(Sex sex, Sort sort)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：<code>@Query</code>的本地查询（SQL 查询）不支持这种动态排序的功能。</p>
<p>如果是分页查询需要排序支持，可以通过向<code>PageRequest</code>构造器传入<code>Sort</code>对象来完成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBySexPagination</span><span class="params">()</span> </span>&#123;</div><div class="line">    Page&lt;Employee&gt; page = employeeRepository.queryBySexPagination(Sex.FEMALE, </div><div class="line">        <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">2</span>, <span class="keyword">new</span> Sort(<span class="string">"age"</span>)));</div><div class="line">    page.forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-6-SpEL-表达式"><a href="#2-3-6-SpEL-表达式" class="headerlink" title="2.3.6 SpEL 表达式"></a>2.3.6 SpEL 表达式</h4><p>Spring Data JPA 1.4 版本开始引入 SpEL 表达式，目前支持的 SpEL 表达式非常有限（目前仅有一个）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">entityName</td>
<td>存储库接口关联的实体类的实体名称。如果实体类@Entity注解设置了name属性，那么将使用它。否则将使用实体类的简单类名。</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM #&#123;#entityName&#125; E WHERE E.name = ?1"</span>)</div><div class="line">    <span class="function">Employee <span class="title">queryByNameSpEL</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-7-更新查询"><a href="#2-3-7-更新查询" class="headerlink" title="2.3.7 更新查询"></a>2.3.7 更新查询</h4><p><code>@Query</code>注解除了可以用来定义查询语句还可以用来定义更新语句（UPDATE/DELETE），在<code>@Query</code>标注的方法上只需要使用<code>@Modifying</code>注解就能实现更新的行为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Modifying</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"UPDATE Employee E SET E.salary = ?2 WHERE E.name = ?1"</span>)</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateSalaryForName</span><span class="params">(String name, Double salary)</span></span>;</div><div class="line">    </div><div class="line">    <span class="meta">@Modifying</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"DELETE FROM Employee E WHERE E.name = ?1"</span>)</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-jpa-sample" target="_blank" rel="external">spring-boot-jpa-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-data/jpa/docs/1.11.1.RELEASE/reference/html" target="_blank" rel="external">http://docs.spring.io/spring-data/jpa/docs/1.11.1.RELEASE/reference/html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JPA（Java Persistence API）是一套 Java 持久化规范，用于将应用程序中的对象映射到关系型数据库。&lt;br&gt;应用程序的数据访问层通常为域对象提供创建、读取、更新和删除（CRUD）操作，Spring Data JPA 提供了这方面的通用接口以及持久化存储特定的实现，它选择目前最流行之一的 Hibernate 作为 JPA 实现的提供者，旨在简化数据访问层。作为应用程序的开发人员，你只需要编写数据库的存取接口，由 Spring 运行时自动生成这些接口的适当实现，开发人员不需要编写任何具体的实现代码。在 Spring Boot 中，通过使用&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;启动器，就能快速开启和使用 Spring Data JPA。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-title&quot;&gt;# pom.xml&lt;/p&gt;&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Tomcat &amp; HikariCP &amp; DBCP 连接池</title>
    <link href="http://yoursite.com/post/spring-boot-tomcat-pool-hikaricp-dbcp-dbcp2.html"/>
    <id>http://yoursite.com/post/spring-boot-tomcat-pool-hikaricp-dbcp-dbcp2.html</id>
    <published>2017-04-29T15:12:15.000Z</published>
    <updated>2017-07-07T12:14:35.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tomcat-JDBC-连接池"><a href="#Tomcat-JDBC-连接池" class="headerlink" title="Tomcat JDBC 连接池"></a>Tomcat JDBC 连接池</h3><p>Spring Boot 默认选择 Tomcat JDBC Pool 作为数据库连接池。Tomcat（8） 连接池常用的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>defaultAutoCommit</td>
<td>连接池中创建的连接默认是否自动提交事务</td>
<td>驱动的缺省值</td>
</tr>
<tr>
<td>defaultReadOnly</td>
<td>连接池中创建的连接默认是否为只读状态</td>
<td>-</td>
</tr>
<tr>
<td>defaultCatalog</td>
<td>连接池中创建的连接默认的 catalog</td>
<td>-</td>
</tr>
<tr>
<td>driverClassName</td>
<td>驱动类的名称</td>
<td>-</td>
</tr>
<tr>
<td>username</td>
<td>数据库账户</td>
<td>-</td>
</tr>
<tr>
<td>password</td>
<td>数据库密码</td>
<td>-</td>
</tr>
<tr>
<td>maxActive</td>
<td>连接池同一时间可分配的最大活跃连接数</td>
<td>100</td>
</tr>
<tr>
<td>maxIdle</td>
<td>始终保留在池中的最大连接数，如果启用，将定期检查限制连接，超出此属性设定的值且空闲时间超过minEvictableIdleTimeMillis的连接则释放</td>
<td>与maxActive设定的值相同</td>
</tr>
<tr>
<td>minIdle</td>
<td>始终保留在池中的最小连接数，池中的连接数量若低于此值则创建新的连接，如果连接验证失败将缩小至此值</td>
<td>与initialSize设定的值相同</td>
</tr>
<tr>
<td>initialSize</td>
<td>连接池启动时创建的初始连接数量</td>
<td>10</td>
</tr>
<tr>
<td>maxWait</td>
<td>最大等待时间（毫秒），如果在没有连接可用的情况下等待超过此时间，则抛出异常</td>
<td>30000（30秒）</td>
</tr>
<tr>
<td>testOnBorrow</td>
<td>当从连接池中取出一个连接时是否进行验证，若验证失败则从池中删除该连接并尝试取出另一个连接</td>
<td>false</td>
</tr>
<tr>
<td>testOnConnect</td>
<td>当一个连接首次被创建时是否进行验证，若验证失败则抛出 SQLException 异常</td>
<td>false</td>
</tr>
<tr>
<td>testOnReturn</td>
<td>当一个连接使用完归还到连接池时是否进行验证</td>
<td>false</td>
</tr>
<tr>
<td>testWhileIdle</td>
<td>对池中空闲的连接是否进行验证，验证失败则回收此连接</td>
<td>false</td>
</tr>
<tr>
<td>validationQuery</td>
<td>在连接池返回连接给调用者前用来对连接进行验证的查询 SQL</td>
<td>null</td>
</tr>
<tr>
<td>validationQueryTimeout</td>
<td>SQL 查询验证超时时间（秒），小于或等于 0 的数值表示禁用</td>
<td>-1</td>
</tr>
<tr>
<td>timeBetweenEvictionRunsMillis</td>
<td>在空闲连接回收器线程运行期间休眠时间（毫秒）， 该值不应该小于 1 秒，它决定线程多久验证空闲连接或丢弃连接的频率</td>
<td>5000（5秒）</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td>连接在池中保持空闲而不被回收的最小时间（毫秒）</td>
<td>60000（60秒）</td>
</tr>
<tr>
<td>removeAbandoned</td>
<td>标记是否删除泄露的连接，如果连接超出removeAbandonedTimeout的限制，且该属性设置为 true，则连接被认为是被泄露并且可以被删除</td>
<td>false</td>
</tr>
<tr>
<td>removeAbandonedTimeout</td>
<td>泄露的连接可以被删除的超时时间（秒），该值应设置为应用程序查询可能执行的最长时间</td>
<td>60</td>
</tr>
</tbody>
</table>
<p></p><p class="code-title"># src/main/resources/application.properties</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1/spring_boot_testing_storage</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.tomcat.<span class="keyword">default</span>-auto-commit=<span class="keyword">true</span></div><div class="line">spring.datasource.tomcat.initial-size=<span class="number">3</span></div><div class="line">spring.datasource.tomcat.max-active=<span class="number">120</span></div><div class="line">spring.datasource.tomcat.max-wait=<span class="number">10000</span></div><div class="line">spring.datasource.tomcat.test-on-borrow=<span class="keyword">true</span></div><div class="line">spring.datasource.tomcat.test-<span class="keyword">while</span>-idle=<span class="keyword">true</span></div><div class="line">spring.datasource.tomcat.validation-query=SELECT <span class="number">1</span></div><div class="line">spring.datasource.tomcat.validation-query-timeout=<span class="number">3</span></div><div class="line">spring.datasource.tomcat.time-between-eviction-runs-millis=<span class="number">10000</span></div><div class="line">spring.datasource.tomcat.min-evictable-idle-time-millis=<span class="number">120000</span></div><div class="line">spring.datasource.tomcat.remove-abandoned=<span class="keyword">true</span></div><div class="line">spring.datasource.tomcat.remove-abandoned-timeout=<span class="number">120</span></div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1/spring_boot_testing_storage</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">    tomcat:</span></div><div class="line"><span class="attr">      default-auto-commit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      initial-size:</span> <span class="number">30</span></div><div class="line"><span class="attr">      max-active:</span> <span class="number">120</span></div><div class="line"><span class="attr">      max-wait:</span> <span class="number">10000</span></div><div class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      test-while-idle:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      validation-query:</span> <span class="string">'SELECT 1'</span></div><div class="line"><span class="attr">      validation-query-timeout:</span> <span class="number">3</span></div><div class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">10000</span></div><div class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">120000</span></div><div class="line"><span class="attr">      remove-abandoned:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      remove-abandoned-timeout:</span> <span class="number">120</span></div></pre></td></tr></table></figure><p></p>
<p>Spring Boot Data Jpa 依赖声明：</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<h3 id="HikariCP-连接池"><a href="#HikariCP-连接池" class="headerlink" title="HikariCP 连接池"></a>HikariCP 连接池</h3><p>Spring Boot 如果发现 Tomcat 连接池不可用，则尝试选择 HikariCP 作为默认连接池。HikariCP 连接池常用的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>dataSourceClassName</td>
<td>JDBC 驱动程序提供的 DataSource 类的名称，如果使用了jdbcUrl则不需要此属性</td>
<td>-</td>
</tr>
<tr>
<td>jdbcUrl</td>
<td>数据库连接地址</td>
<td>-</td>
</tr>
<tr>
<td>username</td>
<td>数据库账户，如果使用了jdbcUrl则需要此属性</td>
<td>-</td>
</tr>
<tr>
<td>password</td>
<td>数据库密码，如果使用了jdbcUrl则需要此属性</td>
<td>-</td>
</tr>
<tr>
<td>autoCommit</td>
<td>是否自动提交事务</td>
<td>true</td>
</tr>
<tr>
<td>connectionTimeout</td>
<td>连接超时时间（毫秒），如果在没有连接可用的情况下等待超过此时间，则抛出 SQLException</td>
<td>30000（30秒）</td>
</tr>
<tr>
<td>idleTimeout</td>
<td>空闲超时时间（毫秒），只有在minimumIdle&lt;maximumPoolSize时生效，超时的连接可能被回收，数值 0 表示空闲连接永不从池中删除</td>
<td>600000（10分钟）</td>
</tr>
<tr>
<td>maxLifetime</td>
<td>连接池中的连接的最长生命周期（毫秒）。数值 0 表示不限制</td>
<td>1800000（30分钟）</td>
</tr>
<tr>
<td>connectionTestQuery</td>
<td>连接池每分配一条连接前执行的查询语句（如：SELECT 1），以验证该连接是否是有效的。如果你的驱动程序支持 JDBC4，HikariCP 强烈建议我们不要设置此属性</td>
<td>-</td>
</tr>
<tr>
<td>minimumIdle</td>
<td>最小空闲连接数，HikariCP 建议我们不要设置此值，而是充当固定大小的连接池</td>
<td>与maximumPoolSize数值相同</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>连接池中可同时连接的最大连接数，当池中没有空闲连接可用时，就会阻塞直到超出connectionTimeout设定的数值</td>
<td>10</td>
</tr>
<tr>
<td>poolName</td>
<td>连接池名称，主要用于显示在日志记录和 JMX 管理控制台中</td>
<td>auto-generated</td>
</tr>
</tbody>
</table>
<p></p><p class="code-title"># src/main/resources/application.properties</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1/spring_boot_testing_storage</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.hikari.auto-commit=<span class="keyword">true</span></div><div class="line">spring.datasource.hikari.connection-test-query=SELECT <span class="number">1</span></div><div class="line">spring.datasource.hikari.maximum-pool-size=<span class="number">150</span></div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://127.0.0.1/spring_boot_testing_storage</span></div><div class="line"><span class="attr">      username:</span> <span class="string">root</span></div><div class="line"><span class="attr">      password:</span> <span class="string">root</span></div><div class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">      hikari:</span></div><div class="line"><span class="attr">        auto-commit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        connection-test-query:</span> <span class="string">'SELECT 1'</span></div><div class="line"><span class="attr">        maximum-pool-size:</span> <span class="number">150</span></div></pre></td></tr></table></figure><p></p>
<p>Spring Boot Data Jpa 依赖声明：</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<h3 id="DBCP-连接池"><a href="#DBCP-连接池" class="headerlink" title="DBCP 连接池"></a>DBCP 连接池</h3><p>Spring Boot 如果发现 HikariCP 连接池不可用，则尝试选择 DBCP 作为默认连接池。DBCP（2） 连接池常用的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>数据库连接地址</td>
<td>-</td>
</tr>
<tr>
<td>username</td>
<td>数据库账户</td>
<td>-</td>
</tr>
<tr>
<td>password</td>
<td>数据库密码</td>
<td>-</td>
</tr>
<tr>
<td>driverClassName</td>
<td>驱动类的名称</td>
<td>-</td>
</tr>
<tr>
<td>defaultAutoCommit</td>
<td>连接池中创建的连接默认是否自动提交事务</td>
<td>驱动的缺省值</td>
</tr>
<tr>
<td>defaultReadOnly</td>
<td>连接池中创建的连接默认是否为只读状态</td>
<td>驱动的缺省值</td>
</tr>
<tr>
<td>defaultCatalog</td>
<td>连接池中创建的连接默认的 catalog</td>
<td>-</td>
</tr>
<tr>
<td>initialSize</td>
<td>连接池启动时创建的初始连接数量</td>
<td>0</td>
</tr>
<tr>
<td>maxTotal</td>
<td>连接池同一时间可分配的最大活跃连接数；负数表示不限制</td>
<td>8</td>
</tr>
<tr>
<td>maxIdle</td>
<td>可以在池中保持空闲的最大连接数，超出此值的空闲连接被释放，负数表示不限制</td>
<td>8</td>
</tr>
<tr>
<td>minIdle</td>
<td>可以在池中保持空闲的最小连接数，低于此值将创建空闲连接，若设置为 0，则不创建</td>
<td>0</td>
</tr>
<tr>
<td>maxWaitMillis</td>
<td>最大等待时间（毫秒），如果在没有连接可用的情况下等待超过此时间，则抛出异常；-1 表示无限期等待，直到获取到连接为止</td>
<td>-</td>
</tr>
<tr>
<td>validationQuery</td>
<td>在连接池返回连接给调用者前用来对连接进行验证的查询 SQL</td>
<td>-</td>
</tr>
<tr>
<td>validationQueryTimeout</td>
<td>SQL 查询验证超时时间（秒）</td>
<td>-</td>
</tr>
<tr>
<td>testOnCreate</td>
<td>连接在创建之后是否进行验证</td>
<td>false</td>
</tr>
<tr>
<td>testOnBorrow</td>
<td>当从连接池中取出一个连接时是否进行验证，若验证失败则从池中删除该连接并尝试取出另一个连接</td>
<td>true</td>
</tr>
<tr>
<td>testOnReturn</td>
<td>当一个连接使用完归还到连接池时是否进行验证</td>
<td>false</td>
</tr>
<tr>
<td>testWhileIdle</td>
<td>对池中空闲的连接是否进行验证，验证失败则释放此连接</td>
<td>false</td>
</tr>
<tr>
<td>timeBetweenEvictionRunsMillis</td>
<td>在空闲连接回收器线程运行期间休眠时间（毫秒），如果设置为非正数，则不运行此线程</td>
<td>-1</td>
</tr>
<tr>
<td>numTestsPerEvictionRun</td>
<td>空闲连接回收器线程运行期间检查连接的个数</td>
<td>3</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td>连接在池中保持空闲而不被回收的最小时间（毫秒）</td>
<td>1800000（30分钟）</td>
</tr>
<tr>
<td>removeAbandonedOnBorrow</td>
<td>标记是否删除泄露的连接，如果连接超出removeAbandonedTimeout的限制，且该属性设置为 true，则连接被认为是被泄露并且可以被删除</td>
<td>false</td>
</tr>
<tr>
<td>removeAbandonedTimeout</td>
<td>泄露的连接可以被删除的超时时间（秒），该值应设置为应用程序查询可能执行的最长时间</td>
<td>300（5分钟）</td>
</tr>
<tr>
<td>poolPreparedStatements</td>
<td>设置该连接池的预处理语句池是否生效</td>
<td>false</td>
</tr>
</tbody>
</table>
<p></p><p class="code-title"># src/main/resources/application.properties</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">spring.jmx.enabled=<span class="keyword">false</span></div><div class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1/spring_boot_testing_storage</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.dbcp2.<span class="keyword">default</span>-auto-commit=<span class="keyword">true</span></div><div class="line">spring.datasource.dbcp2.initial-size=<span class="number">30</span></div><div class="line">spring.datasource.dbcp2.max-total=<span class="number">120</span></div><div class="line">spring.datasource.dbcp2.max-idle=<span class="number">120</span></div><div class="line">spring.datasource.dbcp2.min-idle=<span class="number">30</span></div><div class="line">spring.datasource.dbcp2.max-wait-millis=<span class="number">10000</span></div><div class="line">spring.datasource.dbcp2.validation-query=SELECT <span class="number">1</span></div><div class="line">spring.datasource.dbcp2.validation-query-timeout=<span class="number">3</span></div><div class="line">spring.datasource.dbcp2.test-on-borrow=<span class="keyword">true</span></div><div class="line">spring.datasource.dbcp2.test-<span class="keyword">while</span>-idle=<span class="keyword">true</span></div><div class="line">spring.datasource.dbcp2.time-between-eviction-runs-millis=<span class="number">10000</span></div><div class="line">spring.datasource.dbcp2.num-tests-per-eviction-run=<span class="number">10</span></div><div class="line">spring.datasource.dbcp2.min-evictable-idle-time-millis=<span class="number">120000</span></div><div class="line">spring.datasource.dbcp2.remove-abandoned-on-borrow=<span class="keyword">true</span></div><div class="line">spring.datasource.dbcp2.remove-abandoned-timeout=<span class="number">120</span></div><div class="line">spring.datasource.dbcp2.pool-prepared-statements=<span class="keyword">true</span></div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  jmx:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1/spring_boot_testing_storage</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">    dbcp2:</span></div><div class="line"><span class="attr">      default-auto-commit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      initial-size:</span> <span class="number">30</span></div><div class="line"><span class="attr">      max-total:</span> <span class="number">120</span></div><div class="line"><span class="attr">      max-idle:</span> <span class="number">120</span></div><div class="line"><span class="attr">      min-idle:</span> <span class="number">30</span></div><div class="line"><span class="attr">      max-wait-millis:</span> <span class="number">10000</span></div><div class="line"><span class="attr">      validation-query:</span> <span class="string">'SELECT 1'</span></div><div class="line"><span class="attr">      validation-query-timeout:</span> <span class="number">3</span></div><div class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      test-while-idle:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">10000</span></div><div class="line"><span class="attr">      num-tests-per-eviction-run:</span> <span class="number">10</span></div><div class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">120000</span></div><div class="line"><span class="attr">      remove-abandoned-on-borrow:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      remove-abandoned-timeout:</span> <span class="number">120</span></div><div class="line"><span class="attr">      pool-prepared-statements:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p></p>
<p>Spring Boot Data Jpa 依赖声明：</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>参考文档文献链接：<a href="http://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html#Common_Attributes" target="_blank" rel="external">tomcat-8-jdbc-pool-doc</a>、<a href="https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby" target="_blank" rel="external">HikariCP-doc</a>、<a href="http://commons.apache.org/proper/commons-dbcp/configuration.html" target="_blank" rel="external">commons-dbcp-doc</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Tomcat-JDBC-连接池&quot;&gt;&lt;a href=&quot;#Tomcat-JDBC-连接池&quot; class=&quot;headerlink&quot; title=&quot;Tomcat JDBC 连接池&quot;&gt;&lt;/a&gt;Tomcat JDBC 连接池&lt;/h3&gt;&lt;p&gt;Spring Boot 默认选择 T
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot JDBC</title>
    <link href="http://yoursite.com/post/spring-boot-jdbc-example.html"/>
    <id>http://yoursite.com/post/spring-boot-jdbc-example.html</id>
    <published>2017-04-28T12:18:25.000Z</published>
    <updated>2017-07-08T08:36:01.196Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 对 JDBC API 操作数据库进行了良好的封装，通过使用 JdbcTemplate，你不必关心数据库连接创建和打开、处理异常、连接关闭等问题。这些细节都由 JdbcTemplate 底层来完成，你只需要专注于业务 SQL 语句的编写以及执行结果的处理。<br>在 Spring Boot 中，你可以通过<code>spring-boot-starter-jdbc</code>启动器快速开启和使用它。</p>
<a id="more"></a>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="1-环境配置"><a href="#1-环境配置" class="headerlink" title="1. 环境配置"></a>1. 环境配置</h3><p>在 MySQL 测试数据库创建表：</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`employee`</span> (</div><div class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'主键'</span>,</div><div class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">128</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</div><div class="line">  <span class="string">`age`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">DEFAULT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">'年龄'</span>,</div><div class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</div><div class="line">) <span class="keyword">ENGINE</span>=<span class="keyword">InnoDB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=gbk <span class="keyword">COMMENT</span>=<span class="string">'员工表'</span>;</div></pre></td></tr></table></figure>
<p>编写对应的实体类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>项目配置文件信息：</p>
<p></p><p class="code-title"># src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  main:</span></div><div class="line"><span class="attr">    banner-mode:</span> <span class="string">'off'</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1/test</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">    tomcat:</span></div><div class="line"><span class="attr">      default-auto-commit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  level:</span></div><div class="line"><span class="attr">    root:</span> <span class="string">warn</span></div><div class="line">    <span class="string">org.springframework.jdbc.core.JdbcTemplate:</span> <span class="string">debug</span></div></pre></td></tr></table></figure><p></p>
<h3 id="2-保存操作"><a href="#2-保存操作" class="headerlink" title="2. 保存操作"></a>2. 保存操作</h3><p>向数据库插入一条记录：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">save</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"INSERT INTO EMPLOYEE(NAME, AGE) VALUE (?, ?)"</span>,</div><div class="line">            employee.getName(), employee.getAge());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果表的主键字段是自动递增的，可以使用<code>GeneratedKeyHolder</code>来接收 SQL 执行完成之后插入数据库的记录的主键的值：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">save</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">    KeyHolder keyHolder = <span class="keyword">new</span> GeneratedKeyHolder();</div><div class="line">    jdbcTemplate.update(con -&gt; &#123;</div><div class="line">        PreparedStatement ps = con.prepareStatement(<span class="string">"INSERT INTO EMPLOYEE(NAME, AGE) VALUE (?, ?)"</span>,</div><div class="line">                Statement.RETURN_GENERATED_KEYS);</div><div class="line">        ps.setString(<span class="number">1</span>, employee.getName());</div><div class="line">        ps.setInt(<span class="number">2</span>, employee.getAge());</div><div class="line">        <span class="keyword">return</span> ps;</div><div class="line">    &#125;, keyHolder);</div><div class="line">    employee.setId(keyHolder.getKey().longValue());</div><div class="line">    <span class="keyword">return</span> employee;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-查询操作"><a href="#3-查询操作" class="headerlink" title="3. 查询操作"></a>3. 查询操作</h3><p>查询某个字段信息：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">findNameById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"SELECT NAME FROM EMPLOYEE WHERE ID = ?"</span>,</div><div class="line">            <span class="keyword">new</span> Object[]&#123;id&#125;, String.class);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查询一条完整的记录：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> Employee <span class="title">findById</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> jdbcTemplate.queryForObject(<span class="string">"SELECT * FROM EMPLOYEE WHERE ID = ?"</span>,</div><div class="line">            <span class="keyword">new</span> Object[]&#123;id&#125;, (rs, rowNum) -&gt; &#123;</div><div class="line">                Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">                employee.setId(rs.getLong(<span class="string">"id"</span>));</div><div class="line">                employee.setAge(rs.getInt(<span class="string">"age"</span>));</div><div class="line">                employee.setName(rs.getString(<span class="string">"name"</span>));</div><div class="line">                <span class="keyword">return</span> employee;</div><div class="line">            &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>查询所有的记录：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">findAll</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> jdbcTemplate.query(<span class="string">"SELECT * FROM EMPLOYEE"</span>,</div><div class="line">            (rs, rowNum) -&gt; &#123;</div><div class="line">                Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">                employee.setId(rs.getLong(<span class="string">"id"</span>));</div><div class="line">                employee.setAge(rs.getInt(<span class="string">"age"</span>));</div><div class="line">                employee.setName(rs.getString(<span class="string">"name"</span>));</div><div class="line">                <span class="keyword">return</span> employee;</div><div class="line">            &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-更新操作"><a href="#4-更新操作" class="headerlink" title="4. 更新操作"></a>4. 更新操作</h3><p>更新数据库中的一条记录：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">update</span><span class="params">(Employee employee)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"UPDATE EMPLOYEE SET NAME = ?, AGE = ? WHERE ID = ?"</span>,</div><div class="line">            employee.getName(), employee.getAge(), employee.getId());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>批量更新记录：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] batchUpdate(List&lt;Employee&gt; employees) &#123;</div><div class="line">    <span class="keyword">return</span> jdbcTemplate.batchUpdate(<span class="string">"UPDATE EMPLOYEE SET NAME = ?, AGE = ? WHERE ID = ?"</span>,</div><div class="line">            <span class="keyword">new</span> BatchPreparedStatementSetter() &#123;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setValues</span><span class="params">(PreparedStatement ps, <span class="keyword">int</span> i)</span> <span class="keyword">throws</span> SQLException </span>&#123;</div><div class="line">                    Employee employee = employees.get(i);</div><div class="line">                    ps.setString(<span class="number">1</span>, employee.getName());</div><div class="line">                    ps.setInt(<span class="number">2</span>, employee.getAge());</div><div class="line">                    ps.setLong(<span class="number">3</span>, employee.getId());</div><div class="line">                &#125;</div><div class="line">                <span class="meta">@Override</span></div><div class="line">                <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getBatchSize</span><span class="params">()</span> </span>&#123;</div><div class="line">                    <span class="keyword">return</span> employees.size();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-删除操作"><a href="#5-删除操作" class="headerlink" title="5. 删除操作"></a>5. 删除操作</h3><p>删除一条记录：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">delete</span><span class="params">(Long id)</span> </span>&#123;</div><div class="line">    <span class="keyword">return</span> jdbcTemplate.update(<span class="string">"DELETE FROM EMPLOYEE WHERE ID = ?"</span>, id);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-jdbc-sample" target="_blank" rel="external">spring-boot-jdbc-sample</a><br>参考文档文献链接：<a href="https://spring.io/guides/gs/relational-data-access/" target="_blank" rel="external">relational-data-access</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 对 JDBC API 操作数据库进行了良好的封装，通过使用 JdbcTemplate，你不必关心数据库连接创建和打开、处理异常、连接关闭等问题。这些细节都由 JdbcTemplate 底层来完成，你只需要专注于业务 SQL 语句的编写以及执行结果的处理。&lt;br&gt;在 Spring Boot 中，你可以通过&lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt;启动器快速开启和使用它。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 启动器介绍</title>
    <link href="http://yoursite.com/post/spring-boot-starters-list.html"/>
    <id>http://yoursite.com/post/spring-boot-starters-list.html</id>
    <published>2017-04-26T12:18:25.000Z</published>
    <updated>2017-07-07T12:28:18.128Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 提供的启动器（<code>Starters</code>）是一组非常方便的依赖关系描述符，你可以通过启动器获得所有和 Spring 技术相关的一站式服务。所有官方的启动器都是以<code>spring-boot-starter-*</code>模式命名，其中<code>*</code>是表示某种特定类型的应用。这种命名结构能够帮助我们快速的找到所需的启动器。例如，如果想使用 Spring 和 JDBC 技术，你只需要在项目中使用<code>spring-boot-starter-jdbc</code>依赖即可。</p>
<a id="more"></a>
<table>
<thead>
<tr>
<th>名称</th>
<th>描述</th>
<th style="text-align:center">pom</th>
</tr>
</thead>
<tbody>
<tr>
<td>spring-boot-starter-thymeleaf</td>
<td>Thymeleaf 作为视图的 Spring MVC Web 应用</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-thymeleaf/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-data-couchbase</td>
<td>Couchbase 数据库</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-data-couchbase/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-artemis</td>
<td>Apache Artemis 提供的 JMS 消息服务</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-artemis/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-web-services</td>
<td>Spring Web Services</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-web-services/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-mail</td>
<td>Java Mail 和 Spring 支持的电子邮件发送</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-mail/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-data-redis</td>
<td>Jedis 作为客户端的 Redis 缓存</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-data-redis/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-web</td>
<td>Spring MVC 的 RESTful 应用，Tomcat 作为内嵌容器</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-web/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-data-gemfire</td>
<td>GemFire 分布式数据存储</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-data-gemfire/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-activemq</td>
<td>Apache ActiveMQ 提供的 JMS 消息服务</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-activemq/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-data-elasticsearch</td>
<td>Elasticsearch 搜索引擎</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-data-elasticsearch/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-test</td>
<td>单元测试</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-test/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-jdbc</td>
<td>内置 Tomcat JDBC 连接池的 Spring JDBC 应用</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-jdbc/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-mobile</td>
<td>Spring Mobile 构建的 Web 应用</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-mobile/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-validation</td>
<td>Hibernate Validator 验证器</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-validation/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-websocket</td>
<td>Websocket 应用</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-websocket/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-aop</td>
<td>Spring AOP 和 AspectJ 面向方面的编程</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-aop/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-amqp</td>
<td>Rabbit MQ 提供的 JMS 消息服务</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-amqp/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-data-cassandra</td>
<td>Cassandra 分布式数据库</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-data-cassandra/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-social-facebook</td>
<td>Spring Social Facebook</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-social-facebook/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-jta-atomikos</td>
<td>Atomikos JTA 事务</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-jta-atomikos/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-security</td>
<td>Spring Security 安全框架</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-security/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-data-jpa</td>
<td>Spring Data JPA</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-data-jpa/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter</td>
<td>核心启动器，包括自动配置支持，日志记录和YAML</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-groovy-templates</td>
<td>Groovy 作为视图的 Spring MVC Web 应用</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-groovy-templates/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-freemarker</td>
<td>Freemarker 作为视图的 Spring MVC Web 应用</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-freemarker/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-batch</td>
<td>Spring Batch</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-batch/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-cache</td>
<td>Spring 框架缓存</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-cache/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-data-solr</td>
<td>Solr 搜索引擎</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-data-solr/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-data-mongodb</td>
<td>Mongo 数据库</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-data-mongodb/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
<tr>
<td>spring-boot-starter-jooq</td>
<td>jOOQ 访问数据库</td>
<td style="text-align:center"><a href="https://github.com/spring-projects/spring-boot/tree/v1.5.2.RELEASE/spring-boot-starters/spring-boot-starter-jooq/pom.xml" target="_blank" rel="external">pom</a></td>
</tr>
</tbody>
</table>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 提供的启动器（&lt;code&gt;Starters&lt;/code&gt;）是一组非常方便的依赖关系描述符，你可以通过启动器获得所有和 Spring 技术相关的一站式服务。所有官方的启动器都是以&lt;code&gt;spring-boot-starter-*&lt;/code&gt;模式命名，其中&lt;code&gt;*&lt;/code&gt;是表示某种特定类型的应用。这种命名结构能够帮助我们快速的找到所需的启动器。例如，如果想使用 Spring 和 JDBC 技术，你只需要在项目中使用&lt;code&gt;spring-boot-starter-jdbc&lt;/code&gt;依赖即可。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 日志</title>
    <link href="http://yoursite.com/post/spring-boot-logging.html"/>
    <id>http://yoursite.com/post/spring-boot-logging.html</id>
    <published>2017-04-25T15:21:15.000Z</published>
    <updated>2017-07-10T05:07:21.757Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 内部所有的日志记录都是通过使用 Commons Logging 实现，同时默认配置也提供了 Java Util Logging、Log4J、Log4J2、Logback 的支持。每种日志都预配置可以使用控制台输出和文件输出。<br>Spring Boot 日志由启动器<code>spring-boot-starter-logging</code>来解决：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-logging<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>你不必显式的声明此依赖。默认情况下，Spring Boot 使用 Logback 进行日志记录。</p>
<a id="more"></a>
<h3 id="1-日志级别"><a href="#1-日志级别" class="headerlink" title="1. 日志级别"></a>1. 日志级别</h3><p>在 Spring Boot 中，通过<code>logging.level.*=TRACE/DEBUG/INFO/WARN/ERROR/FATAL/OFF</code>来设置日志的级别。<code>*</code>可以是根级别（<code>root</code>）也可以是包级别。</p>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">logging.level.root = WARN</div><div class="line">logging.level.org.springframework = INFO</div><div class="line">logging.level.org.hibernate.SQL = DEBUG</div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  level:</span></div><div class="line"><span class="attr">    root:</span> <span class="string">WARN</span></div><div class="line">    <span class="string">org.springframework:</span> <span class="string">INFO</span></div><div class="line">    <span class="string">org.hibernate.SQL:</span> <span class="string">DEBUG</span></div></pre></td></tr></table></figure>
<h3 id="2-文件输出"><a href="#2-文件输出" class="headerlink" title="2. 文件输出"></a>2. 文件输出</h3><p>默认情况下，Spring Boot 只将日志信息显示到控制台。如果你想要将日志信息输出到外部文件，你可以使用<code>logging.file</code>或<code>logging.path</code>属性来配置。日志文件大小达到 10M 时，将产生一个新的文件。</p>
<ul>
<li>使用<code>logging.file</code>可以设置日志输出的文件<ul>
<li>文件相对路径（相对项目的根目录）：<code>logfile.log</code>或<code>logs/logfile.log</code></li>
<li>文件绝对路径：<code>/pathname/logfile.log</code></li>
</ul>
</li>
</ul>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logging.file = logs/logfile.log</div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  file:</span> <span class="string">logs/logfile.log</span></div></pre></td></tr></table></figure>
<ul>
<li>使用<code>logging.path</code>可以设置日志输出的目录，<code>spring.log</code>日志文件将输出到该目录<ul>
<li>目录相对路径（相对项目的根目录）：<code>logs</code>或<code>pathname/logs</code></li>
<li>目录绝对路径：<code>/pathname/logs</code></li>
</ul>
</li>
</ul>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logging.path = logs</div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  path:</span> <span class="string">logs</span></div></pre></td></tr></table></figure>
<h3 id="3-日志格式"><a href="#3-日志格式" class="headerlink" title="3. 日志格式"></a>3. 日志格式</h3><p>Spring Boot 默认输出的日志信息格式：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">2017</span>-<span class="number">07</span>-<span class="number">09</span> <span class="number">11</span>:<span class="number">47</span>:<span class="number">06.599</span>  INFO <span class="number">10252</span> --- [main] o.s.j.e.a.AnnotationMBeanExporter        : Registering beans <span class="keyword">for</span> JMX exposure on startup</div><div class="line"><span class="number">2017</span>-<span class="number">07</span>-<span class="number">09</span> <span class="number">11</span>:<span class="number">47</span>:<span class="number">06.632</span>  INFO <span class="number">10252</span> --- [main] s.b.c.e.t.TomcatEmbeddedServletContainer : <span class="function">Tomcat started on <span class="title">port</span><span class="params">(s)</span>: 8080 <span class="params">(http)</span></span></div></pre></td></tr></table></figure>
<p>它由以下几个部分组成：</p>
<ul>
<li>精确到毫秒的日期和时间</li>
<li>日志级别（<code>TRACE&lt;br&gt;DEBUG&lt;br&gt;INFO&lt;br&gt;WARN&lt;br&gt;ERROR</code>）</li>
<li>进程 ID</li>
<li>分隔符<code>---</code></li>
<li>线程名称，包裹在<code>[]</code>中</li>
<li>日志名称，通常是类的完全限定路径的简写</li>
<li>分隔符<code>:</code></li>
<li>日志消息</li>
</ul>
<p>使用<code>logging.pattern.console</code>（只支持<code>logback</code>）可以自定义控制台日志输出格式。</p>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logging.pattern.console=<span class="string">"%date&#123;yyyy-MM-dd HH:mm:ss&#125; -%5level [%15.15thread] %-40.40logger&#123;39&#125; : %msg%n"</span></div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  pattern:</span></div><div class="line"><span class="attr">    console:</span> <span class="string">"%date&#123;yyyy-MM-dd HH:mm:ss&#125; -%5level [%15.15thread] %-40.40logger&#123;39&#125; : %msg%n"</span></div></pre></td></tr></table></figure>
<p>使用<code>logging.pattern.file</code>（只支持<code>logback</code>）可以自定义文件的日志输出格式。</p>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logging.pattern.file=<span class="string">"%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; -%5level [%15.15thread] %-40.40logger&#123;39&#125; : %msg%n"</span></div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  pattern:</span></div><div class="line"><span class="attr">    file:</span> <span class="string">"%date&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; -%5level [%15.15thread] %-40.40logger&#123;39&#125; : %msg%n"</span></div></pre></td></tr></table></figure>
<p>常用的日志信息格式化参数：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%c{length}<br>%logger{length}</td>
<td>输出所属的类目，通常就是所在类的全名</td>
</tr>
<tr>
<td>%d{pattern}<br>%date{pattern}</td>
<td>输出日志的日期或时间</td>
</tr>
<tr>
<td>%F<br>%file</td>
<td>输出发出日志记录请求的Java源文件的文件名</td>
</tr>
<tr>
<td>%L<br>%line</td>
<td>输出日志事件的发生行号信息</td>
</tr>
<tr>
<td>%m<br>%msg<br>%message</td>
<td>输出程序代码中指定的消息</td>
</tr>
<tr>
<td>%p<br>%le<br>%level</td>
<td>输出日志级别信息</td>
</tr>
<tr>
<td>%t<br>%thread</td>
<td>输出产生该日志事件的线程名</td>
</tr>
<tr>
<td>%n</td>
<td>输出一个平台的回车换行符</td>
</tr>
</tbody>
</table>
<p>其中 <code>%logger{length}</code>，如果信息长度大于给定的 length 的值，保留最右边的单词，左边的每个单词只保留第一个字符。</p>
<table>
<thead>
<tr>
<th>示例</th>
<th style="text-align:center">信息</th>
<th>结果</th>
</tr>
</thead>
<tbody>
<tr>
<td>%logger</td>
<td style="text-align:center">org.fanlychie.DemoService</td>
<td>org.fanlychie.DemoService</td>
</tr>
<tr>
<td>%logger{0}</td>
<td style="text-align:center">org.fanlychie.DemoService</td>
<td>DemoService</td>
</tr>
<tr>
<td>%logger{10}</td>
<td style="text-align:center">org.fanlychie.DemoService</td>
<td>o.f.DemoService</td>
</tr>
<tr>
<td>%logger{24}</td>
<td style="text-align:center">org.fanlychie.DemoService</td>
<td>o.fanlychie.DemoService</td>
</tr>
<tr>
<td>%logger{100}</td>
<td style="text-align:center">org.fanlychie.DemoService</td>
<td>org.fanlychie.DemoService</td>
</tr>
</tbody>
</table>
<p>日志信息宽度和对齐方式控制，以<code>%logger</code>为例：</p>
<table>
<thead>
<tr>
<th>示例</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>%50logger</td>
<td>右对齐，最小的宽度是50，长度不足50则左补空格，长度超出50则原样输出</td>
</tr>
<tr>
<td>%-50logger</td>
<td><span style="font-family:Arial">‘-‘</span>表示向左对齐，最小的宽度是50，长度不足50则右补空格，长度超出50则原样输出</td>
</tr>
<tr>
<td>%.20logger</td>
<td>左对齐，最大的宽度是20，如果长度超出20，将左边多出的字符直接丢掉</td>
</tr>
<tr>
<td>%30.50logger</td>
<td>最小宽度是30，如果长度不足30则左补空格右对齐；如果长度超出30且不足50则左对齐；如果长度超出50则将左边多出的字符直接丢掉</td>
</tr>
</tbody>
</table>
<h3 id="4-扩展-logback"><a href="#4-扩展-logback" class="headerlink" title="4. 扩展 logback"></a>4. 扩展 logback</h3><p>Spring Boot 允许我们通过扩展 Logback 进行更高级的配置。在类路径下创建<code>logback-sprng.xml</code>：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引用 Spring Boot 的 base.xml 的配置 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- spring-boot.jar!\org\springframework\boot\logging\logback\base.xml --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 自定义日志级别 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> /&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="4-1-配置文件的加载"><a href="#4-1-配置文件的加载" class="headerlink" title="4.1 配置文件的加载"></a>4.1 配置文件的加载</h4><p>Spring Boot 默认从系统类路径加载的日志配置文件：</p>
<ul>
<li><code>logback-spring.xml</code></li>
<li><code>logback-spring.groovy</code></li>
<li><code>logback.xml</code></li>
<li><code>logback.groovy</code></li>
</ul>
<p>单元测试的 DEBUG 日志可以在<code>src/test/resources/logback-test.xml</code>中配置控制。</p>
<h3 id="5-多环境日志配置"><a href="#5-多环境日志配置" class="headerlink" title="5. 多环境日志配置"></a>5. 多环境日志配置</h3><p>使用<code>&lt;springProfile&gt;</code>标签可以定义不同 profile 环境的配置：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 引用 Spring Boot 的 defaults.xml 的配置 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/defaults.xml"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 定义 LOG_FILE 变量 --&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 日志文件优先使用 logging.file 的值，如果没有则使用 logging.path 的值，如果还没有则放入临时目录 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"LOG_FILE"</span> <span class="attr">value</span>=<span class="string">"$&#123;LOG_FILE:-$&#123;LOG_PATH:-$&#123;LOG_TEMP:-$&#123;java.io.tmpdir:-/tmp&#125;&#125;/&#125;spring.log&#125;"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 自定义日志级别 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.springframework.web"</span> <span class="attr">level</span>=<span class="string">"INFO"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.fanlychie"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 开发环境日志 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"dev"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 引用 Spring Boot 的 console-appender.xml 的配置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- root 日志级别 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"WARN"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 生产环境日志 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">springProfile</span> <span class="attr">name</span>=<span class="string">"prod"</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 引用 Spring Boot 的 console-appender.xml 的配置 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/console-appender.xml"</span>/&gt;</span></div><div class="line">        <span class="comment">&lt;!-- 自定义文件日志 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">"FILE"</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.RollingFileAppender"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">encoder</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 使用默认的日志格式 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 日志文件 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">file</span>&gt;</span>$&#123;LOG_FILE&#125;<span class="tag">&lt;/<span class="name">file</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.FixedWindowRollingPolicy"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 如果日志文件超出大小限制, 则以 $&#123;LOG_FILE&#125;.1, $&#123;LOG_FILE&#125;.2... 备份 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">fileNamePattern</span>&gt;</span>$&#123;LOG_FILE&#125;.%i<span class="tag">&lt;/<span class="name">fileNamePattern</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">triggeringPolicy</span> <span class="attr">class</span>=<span class="string">"ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy"</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- 超出大小限制开启一个新的文件 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">MaxFileSize</span>&gt;</span>10MB<span class="tag">&lt;/<span class="name">MaxFileSize</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">triggeringPolicy</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></div><div class="line">        <span class="comment">&lt;!-- root 日志级别 --&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"WARN"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"FILE"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">"CONSOLE"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">root</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">springProfile</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">spring.profiles.active = dev</div><div class="line">logging.file = logs/logfile.log</div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">dev</span></div><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  file:</span> <span class="string">logs/logfile.log</span></div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-logging-sample" target="_blank" rel="external">spring-boot-logging-sample</a><br>参考文档文献链接：<a href="https://logback.qos.ch/manual/layouts.html" target="_blank" rel="external">logback-doc</a>、<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-logging" target="_blank" rel="external">spring-boot-logging</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 内部所有的日志记录都是通过使用 Commons Logging 实现，同时默认配置也提供了 Java Util Logging、Log4J、Log4J2、Logback 的支持。每种日志都预配置可以使用控制台输出和文件输出。&lt;br&gt;Spring Boot 日志由启动器&lt;code&gt;spring-boot-starter-logging&lt;/code&gt;来解决：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-logging&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;你不必显式的声明此依赖。默认情况下，Spring Boot 使用 Logback 进行日志记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Profiles 配置</title>
    <link href="http://yoursite.com/post/spring-boot-profiles.html"/>
    <id>http://yoursite.com/post/spring-boot-profiles.html</id>
    <published>2017-04-23T15:21:15.000Z</published>
    <updated>2017-07-10T15:00:09.041Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Profiles 提供了一套隔离应用配置的方式，它允许我们通过定义不同的 profiles 来提供不同组合的配置。在不同的环境中，启动应用时可以通过选择激活某组特定的 profiles 来适应运行时环境，以达到在不同的环境可以使用相同的一套程序代码。</p>
<a id="more"></a>
<h3 id="1-使用-Profiles-创建-profiles"><a href="#1-使用-Profiles-创建-profiles" class="headerlink" title="1. 使用 @Profiles 创建 profiles"></a>1. 使用 @Profiles 创建 profiles</h3><p>Spring 提供了<code>@Profiles</code>注解，用于创建 profiles 配置。<br>你可以在<code>@Component</code>(<code>@Service</code>、<code>@Repository</code>) 或<code>@Configuration</code>注解标注的类中使用它。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AuthorityService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String role)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"dev"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevAuthorityServiceImpl</span> <span class="keyword">implements</span> <span class="title">AuthorityService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String role)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Profile</span>(<span class="string">"prod"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProdAuthorityServiceImpl</span> <span class="keyword">implements</span> <span class="title">AuthorityService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String role)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> role == <span class="string">"admin"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-1-设置默认的-profiles"><a href="#1-1-设置默认的-profiles" class="headerlink" title="1.1 设置默认的 profiles"></a>1.1 设置默认的 profiles</h4><p>在<code>@Profile</code>注解中，可以通过使用关键字<code>default</code>将当前的配置设置为默认的 profiles。Spring Boot 在启动时默认就会来加载此 profiles 配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="meta">@Profile</span>(&#123;<span class="string">"dev"</span>, <span class="string">"default"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DevAuthorityServiceImpl</span> <span class="keyword">implements</span> <span class="title">AuthorityService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasRole</span><span class="params">(String role)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-使用属性配置文件创建-profiles"><a href="#2-使用属性配置文件创建-profiles" class="headerlink" title="2. 使用属性配置文件创建 profiles"></a>2. 使用属性配置文件创建 profiles</h3><p>我们可以按照约定，将项目的配置文件以<code>application-{profile}.{properties|yml}</code>的方式命名来创建 profiles 配置。</p>
<p>application-test.properties 配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">custom.env = test-env</div></pre></td></tr></table></figure>
<p>application-prod.properties 配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">custom.env = prod-env</div></pre></td></tr></table></figure>
<p>而在<code>*.yml</code>配置文件中，我们可以通过使用<code>---</code>分隔符在同一个文件创建多个 profile 配置：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">test</span></div><div class="line"><span class="attr">custom:</span></div><div class="line"><span class="attr">  env:</span> <span class="string">test-env</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></div><div class="line"><span class="attr">custom:</span></div><div class="line"><span class="attr">  env:</span> <span class="string">prod-env</span></div></pre></td></tr></table></figure>
<h3 id="3-激活-profiles"><a href="#3-激活-profiles" class="headerlink" title="3. 激活 profiles"></a>3. 激活 profiles</h3><p>当我们配置了多组不同的 profiles 后，我们可以非常灵活的有选择性的激活它们，而那些未被激活的 profiles 配置，则不会被加载。</p>
<h4 id="3-1-通过配置文件激活"><a href="#3-1-通过配置文件激活" class="headerlink" title="3.1 通过配置文件激活"></a>3.1 通过配置文件激活</h4><p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.profiles.active = dev, test</div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">dev</span></div><div class="line"><span class="bullet">      -</span> <span class="string">test</span></div></pre></td></tr></table></figure>
<h4 id="3-2-通过命令行激活"><a href="#3-2-通过命令行激活" class="headerlink" title="3.2 通过命令行激活"></a>3.2 通过命令行激活</h4><p>终端在启动 Spring Boot 应用的时候可以使用<code>-Dspring.profiles.active</code>参数激活 profiles 配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar -Dspring.profiles.active=<span class="string">"dev, test"</span> xxxx.jar</div></pre></td></tr></table></figure>
<h4 id="3-3-通过-ActiveProfiles-注解激活"><a href="#3-3-通过-ActiveProfiles-注解激活" class="headerlink" title="3.3 通过 @ActiveProfiles 注解激活"></a>3.3 通过 @ActiveProfiles 注解激活</h4><p>这种方式仅适用于单元测试，<code>@ActiveProfiles</code>是由<code>spring-test</code>提供的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="meta">@ActiveProfiles</span>(&#123;<span class="string">"dev"</span>, <span class="string">"test"</span>&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testProfiles</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-4-通过-setAdditionalProfiles-激活"><a href="#3-4-通过-setAdditionalProfiles-激活" class="headerlink" title="3.4 通过 setAdditionalProfiles 激活"></a>3.4 通过 setAdditionalProfiles 激活</h4><p>在 Spring Boot 启动类中，可以通过调用<code>SpringApplication.setAdditionalProfiles(...)</code>来激活一组 profiles 配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication application = <span class="keyword">new</span> SpringApplication(Application.class);</div><div class="line">        application.setAdditionalProfiles(<span class="string">"dev"</span>, <span class="string">"test"</span>);</div><div class="line">        application.run(args);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="3-5-通过-setActiveProfiles-激活"><a href="#3-5-通过-setActiveProfiles-激活" class="headerlink" title="3.5 通过 setActiveProfiles 激活"></a>3.5 通过 setActiveProfiles 激活</h4><p>在 Spring Boot 启动类中，可以通过调用<code>ConfigurableEnvironment.setActiveProfiles(...)</code>来激活一组 profiles 配置。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication application = <span class="keyword">new</span> SpringApplication(Application.class);</div><div class="line">        ConfigurableEnvironment environment = <span class="keyword">new</span> StandardEnvironment();</div><div class="line">        environment.setActiveProfiles(<span class="string">"dev"</span>, <span class="string">"test"</span>);</div><div class="line">        application.setEnvironment(environment);</div><div class="line">        application.run(args);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="4-组合-profiles-配置"><a href="#4-组合-profiles-配置" class="headerlink" title="4. 组合 profiles 配置"></a>4. 组合 profiles 配置</h3><p>使用<code>spring.profiles.include</code>属性可以将多个不同的 profiles 有效的组合到一起：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">dev-test</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">test</span></div><div class="line"><span class="attr">custom:</span></div><div class="line"><span class="attr">  env:</span> <span class="string">test-env</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">prod</span></div><div class="line"><span class="attr">custom:</span></div><div class="line"><span class="attr">  env:</span> <span class="string">prod-env</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="string">spring.profiles:</span> <span class="string">dev-test</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    include:</span></div><div class="line"><span class="bullet">      -</span> <span class="string">dev</span></div><div class="line"><span class="bullet">      -</span> <span class="string">test</span></div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-profiles-sample" target="_blank" rel="external">spring-boot-profiles-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-profiles" target="_blank" rel="external">spring-boot-features-profiles</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Profiles 提供了一套隔离应用配置的方式，它允许我们通过定义不同的 profiles 来提供不同组合的配置。在不同的环境中，启动应用时可以通过选择激活某组特定的 profiles 来适应运行时环境，以达到在不同的环境可以使用相同的一套程序代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 属性文件配置</title>
    <link href="http://yoursite.com/post/spring-boot-properties.html"/>
    <id>http://yoursite.com/post/spring-boot-properties.html</id>
    <published>2017-04-16T05:24:40.000Z</published>
    <updated>2017-07-10T16:13:25.628Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 允许我们通过<code>*.properties</code>文件、<code>*.yml</code>文件、环境变量、命令行参数等来外部化应用程序的配置，以便我们在不同的环境可以使用同一套程序代码。</p>
<a id="more"></a>
<h3 id="1-配置加载优先级"><a href="#1-配置加载优先级" class="headerlink" title="1. 配置加载优先级"></a>1. 配置加载优先级</h3><p>Spring Boot 加载配置文件的优先级从高到低的搜索顺序为：</p>
<ul>
<li>注解<code>@TestPropertySource</code>设置的属性文件</li>
<li>注解<code>@SpringBootTest#properties</code>设置的属性文件</li>
<li>命令行参数</li>
<li>ServletConfig 初始化参数</li>
<li>ServletContext 初始化参数</li>
<li>来自<code>java:comp/env</code>的 JNDI 属性</li>
<li>Java 系统属性（通过<code>System.getProperties()</code>能获取到的）</li>
<li>操作系统环境变量</li>
<li>含有<code>random.*</code>值的属性</li>
<li>Jar 包外部的<code>application-{profile}.{properties|yml}</code></li>
<li>Jar 包内部的<code>application-{profile}.{properties|yml}</code></li>
<li>Jar 包外部的<code>application.{properties|yml}</code></li>
<li>Jar 包内部的<code>application.{properties|yml}</code></li>
<li>注解<code>@PropertySource</code>设置的属性文件</li>
<li>启动类<code>SpringApplication.setDefaultProperties</code>设置的默认属性</li>
</ul>
<p>Spring Boot 搜索 Jar 包外部的<code>application.{properties|yml}</code>文件时，它优先搜索类路径下的<code>/config</code>目录，如果没有，再到类路径的根目录下搜索。</p>
<p>你可以参考源码：</p>
<ul>
<li><a href="https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json#L143" target="_blank" rel="external">spring-configuration-metadata.json#spring.config.location</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot/src/main/resources/META-INF/additional-spring-configuration-metadata.json#L136" target="_blank" rel="external">spring-configuration-metadata.json#spring.config.name</a></li>
<li><a href="https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot/src/main/java/org/springframework/boot/context/config/ConfigFileApplicationListener.java" target="_blank" rel="external">org.springframework.boot.context.config.ConfigFileApplicationListener</a></li>
</ul>
<h3 id="2-配置文件配置"><a href="#2-配置文件配置" class="headerlink" title="2. 配置文件配置"></a>2. 配置文件配置</h3><p>Spring Boot 允许我们通过<code>*.properties</code>文件、<code>*.yml</code>文件来外部化应用程序的配置，我们只需要在类路径下创建<code>application.{properties|yml}</code>文件。</p>
<h4 id="2-1-properties-配置文件"><a href="#2-1-properties-配置文件" class="headerlink" title="2.1 properties 配置文件"></a>2.1 properties 配置文件</h4><p>相信大家对<code>*.properties</code>文件都并不陌生，这里就不多说了，看下面的示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">email-name = fanlychie</div><div class="line">email-from = fanlychie<span class="meta">@yeah</span>.net</div></pre></td></tr></table></figure>
<h4 id="2-2-yaml-配置文件"><a href="#2-2-yaml-配置文件" class="headerlink" title="2.2 yaml 配置文件"></a>2.2 yaml 配置文件</h4><p>YAML 是一种专门用来编写配置文件（<code>*.yml</code>）的语言，它的语法简洁，也方便人们阅读。在部分 IDE 开发工具（如 IntelliJ IDEA）中还有代码提示，让人爱不释手。</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 自定义属性</span></div><div class="line"><span class="attr">data-structure:</span></div><div class="line">  <span class="comment"># 简单键值对</span></div><div class="line"><span class="attr">  key-value:</span> <span class="string">YAML</span> <span class="string">Sample</span></div><div class="line">  <span class="comment"># 数组</span></div><div class="line"><span class="attr">  array:</span> <span class="string">value1,</span> <span class="string">value2,</span> <span class="string">value3</span></div><div class="line">  <span class="comment"># List 集合</span></div><div class="line"><span class="attr">  list:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">value1</span></div><div class="line"><span class="bullet">    -</span> <span class="string">value2</span></div><div class="line"><span class="bullet">    -</span> <span class="string">value3</span></div><div class="line">  <span class="comment"># Map 散列表</span></div><div class="line"><span class="attr">  map:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">fanlychie</span></div><div class="line"><span class="attr">    email:</span> <span class="string">fanlychie@yeah.net</span></div></pre></td></tr></table></figure>
<h3 id="3-属性占位符"><a href="#3-属性占位符" class="headerlink" title="3. 属性占位符"></a>3. 属性占位符</h3><p>在配置文件中，我们可以使用<code>${var}</code>语法引用已经定义的属性的值。</p>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.name = Spring Boot Properties Sample</div><div class="line">app.description = $&#123;app.name&#125; For My Github<span class="string">'s Blog</span></div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">app:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">Spring</span> <span class="string">Boot</span> <span class="string">Properties</span> <span class="string">Sample</span></div><div class="line"><span class="attr">  description:</span> <span class="string">$&#123;app.name&#125;</span> <span class="string">For</span> <span class="string">My</span> <span class="string">Github's</span> <span class="string">Blog</span></div></pre></td></tr></table></figure>
<p>我们还可以使用<code>${var :defalutValue}</code>语法来设置默认的值，如果<code>var</code>不存在, 则使用默认的值。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">app.name = Spring Boot Properties Sample</div><div class="line">app.description = $&#123;app.name :YourName&#125; For My Github<span class="string">'s Blog</span></div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">app:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">Spring</span> <span class="string">Boot</span> <span class="string">Properties</span> <span class="string">Sample</span></div><div class="line"><span class="attr">  description:</span> <span class="string">$&#123;app.name</span> <span class="string">:YourName&#125;</span> <span class="string">For</span> <span class="string">My</span> <span class="string">Github's</span> <span class="string">Blog</span></div></pre></td></tr></table></figure>
<h3 id="4-绑定属性"><a href="#4-绑定属性" class="headerlink" title="4. 绑定属性"></a>4. 绑定属性</h3><p>Spring Boot 对<code>*.properties</code>和<code>*.yml</code>配置文件中配置的属性名称提供了松绑定，它不要求配置的属性名称完全与 Bean 中的属性名称一致。它支持以下几种规格的命名方式：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>firstName</td>
<td>标准的驼峰式命名</td>
</tr>
<tr>
<td>first-name</td>
<td>单词之间通过<span style="font-family:Arial;padding:0 2px;">‘-‘</span>分隔，Spring Boot 推荐这种</td>
</tr>
<tr>
<td>first_name</td>
<td>单词之间通过<span style="font-family:Arial;padding:0 2px;">‘_’</span>分隔</td>
</tr>
<tr>
<td>FIRST_NAME</td>
<td>单词全部大写并通过<span style="font-family:Arial;padding:0 2px;">‘_’</span>分隔，在使用系统环境变量时，推荐这种</td>
</tr>
</tbody>
</table>
<h4 id="4-1-通过-Value-注解绑定"><a href="#4-1-通过-Value-注解绑定" class="headerlink" title="4.1 通过 @Value 注解绑定"></a>4.1 通过 @Value 注解绑定</h4><p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">email-name:</span> <span class="string">fanlychie</span></div><div class="line"><span class="attr">email-from:</span> <span class="string">fanlychie@yeah.net</span></div></pre></td></tr></table></figure>
<p>通过使用<code>@Value(&quot;${属性名称}&quot;)</code>注解可以将属性的值注入到 Bean 对象的属性中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailValueConfig</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;email-name&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String emailName;</div><div class="line">    </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;email-from&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String emailFrom;</div><div class="line">    </div><div class="line">    <span class="comment">// getters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-2-通过-ConfigurationProperties-注解绑定"><a href="#4-2-通过-ConfigurationProperties-注解绑定" class="headerlink" title="4.2 通过 @ConfigurationProperties 注解绑定"></a>4.2 通过 @ConfigurationProperties 注解绑定</h4><p>通过使用<code>@ConfigurationProperties</code>注解可以将属性值绑定到结构化的对象中：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmailConfig</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String emailName;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String emailFrom;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>@ConfigurationProperties(&quot;前缀限定名&quot;)</code>可以将<code>*.*</code>的属性绑定到 Bean 中。</p>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">app:</span></div><div class="line"><span class="attr">  name:</span> <span class="string">Spring</span> <span class="string">Boot</span> <span class="string">Properties</span> <span class="string">Sample</span></div><div class="line"><span class="attr">  description:</span> <span class="string">$&#123;app.name&#125;</span> <span class="string">For</span> <span class="string">My</span> <span class="string">Github's</span> <span class="string">Blog</span></div></pre></td></tr></table></figure>
<p>通过<code>@ConfigurationProperties(&quot;app&quot;)</code>绑定<code>app.*</code>属性：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"app"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppConfig</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-3-复杂的属性绑定"><a href="#4-3-复杂的属性绑定" class="headerlink" title="4.3 复杂的属性绑定"></a>4.3 复杂的属性绑定</h4><p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">layout.desc = 布局配置</div><div class="line">layout.moudles[<span class="number">0</span>].desc = 顶部模块</div><div class="line">layout.moudles[<span class="number">0</span>].width = <span class="number">100</span>%</div><div class="line">layout.moudles[<span class="number">0</span>].height = <span class="number">200</span>px</div><div class="line">layout.moudles[<span class="number">1</span>].desc = 主区域模块</div><div class="line">layout.moudles[<span class="number">1</span>].width = <span class="number">80</span>%</div><div class="line">layout.moudles[<span class="number">1</span>].height = auto</div><div class="line">layout.moudles[<span class="number">2</span>].desc = 脚部模块</div><div class="line">layout.moudles[<span class="number">2</span>].width = <span class="number">100</span>%</div><div class="line">layout.moudles[<span class="number">2</span>].height = <span class="number">300</span>px</div><div class="line">layout.background-rgb = <span class="number">97</span>, <span class="number">96</span>, <span class="number">96</span>, <span class="number">1</span></div><div class="line">layout.tag-cloud-random-colors[<span class="number">0</span>] = red</div><div class="line">layout.tag-cloud-random-colors[<span class="number">1</span>] = blue</div><div class="line">layout.tag-cloud-random-colors[<span class="number">2</span>] = green</div><div class="line">layout.tag-cloud-random-colors[<span class="number">3</span>] = yellow</div><div class="line">layout.moudle-color-mapping.top = white</div><div class="line">layout.moudle-color-mapping.main = gray</div><div class="line">layout.moudle-color-mapping.bottom = pink</div><div class="line">layout.author.name = fanlychie</div><div class="line">layout.author.mail = fanlychie<span class="meta">@yeah</span>.net</div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="attr">layout:</span></div><div class="line"><span class="attr">  desc:</span> <span class="string">布局配置</span></div><div class="line"><span class="attr">  moudles:</span></div><div class="line"><span class="attr">    - desc:</span> <span class="string">顶部模块</span></div><div class="line"><span class="attr">      width:</span> <span class="number">100</span><span class="string">%</span></div><div class="line"><span class="attr">      height:</span> <span class="number">200</span><span class="string">px</span></div><div class="line"><span class="attr">    - desc:</span> <span class="string">主区域模块</span></div><div class="line"><span class="attr">      width:</span> <span class="number">80</span><span class="string">%</span></div><div class="line"><span class="attr">      height:</span> <span class="string">auto</span></div><div class="line"><span class="attr">    - desc:</span> <span class="string">脚部模块</span></div><div class="line"><span class="attr">      width:</span> <span class="number">100</span><span class="string">%</span></div><div class="line"><span class="attr">      height:</span> <span class="number">300</span><span class="string">px</span></div><div class="line"><span class="attr">  background-rgb:</span> <span class="number">97</span><span class="string">,</span> <span class="number">96</span><span class="string">,</span> <span class="number">96</span><span class="string">,</span> <span class="number">1</span></div><div class="line"><span class="attr">  tag-cloud-random-colors:</span></div><div class="line"><span class="bullet">    -</span> <span class="string">red</span></div><div class="line"><span class="bullet">    -</span> <span class="string">blue</span></div><div class="line"><span class="bullet">    -</span> <span class="string">green</span></div><div class="line"><span class="bullet">    -</span> <span class="string">yellow</span></div><div class="line"><span class="attr">  moudle-color-mapping:</span></div><div class="line"><span class="attr">    top:</span> <span class="string">white</span></div><div class="line"><span class="attr">    main:</span> <span class="string">gray</span></div><div class="line"><span class="attr">    bottom:</span> <span class="string">pink</span></div><div class="line"><span class="attr">  author:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">fanlychie</span></div><div class="line"><span class="attr">    mail:</span> <span class="string">fanlychie@yeah.net</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"layout"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LayoutConfig</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String desc;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> List&lt;Moudle&gt; moudles;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span>[] backgroundRgb;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> List&lt;String&gt; tagCloudRandomColors;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Map&lt;String, String&gt; moudleColorMapping;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> Author author;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Moudle</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">private</span> String width;</div><div class="line">        </div><div class="line">        <span class="keyword">private</span> String height;</div><div class="line">        </div><div class="line">        <span class="keyword">private</span> String desc;</div><div class="line">        </div><div class="line">        <span class="comment">// getters and setters</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Author</span> </span>&#123;</div><div class="line">        </div><div class="line">        <span class="keyword">private</span> String name;</div><div class="line">        </div><div class="line">        <span class="keyword">private</span> String mail;</div><div class="line">        </div><div class="line">        <span class="comment">// getters and setters</span></div><div class="line">        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="4-4-对绑定的属性进行验证"><a href="#4-4-对绑定的属性进行验证" class="headerlink" title="4.4 对绑定的属性进行验证"></a>4.4 对绑定的属性进行验证</h4><p>在<code>@ConfigurationProperties</code>注解标注的类中，你可以直接使用<code>JSR-303</code>相关的约束注解对绑定的属性值进行验证：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.Length;</div><div class="line"><span class="keyword">import</span> org.hibernate.validator.constraints.NotBlank;</div><div class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</div><div class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</div><div class="line"><span class="keyword">import</span> javax.validation.constraints.NotNull;</div><div class="line">    </div><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"app"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AppWithJSR303Config</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@NotNull</span></div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    </div><div class="line">    <span class="meta">@NotBlank</span></div><div class="line">    <span class="meta">@Length</span>(min = <span class="number">1</span>, max = <span class="number">100</span>)</div><div class="line">    <span class="keyword">private</span> String description;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-配置随机值"><a href="#5-配置随机值" class="headerlink" title="5. 配置随机值"></a>5. 配置随机值</h3><p>Spring Boot 内部提供了一个<code>random.*</code>属性，专门用于生成随机种子。</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>random.int</td>
<td>随机产生正负的整数</td>
</tr>
<tr>
<td>random.int(max)</td>
<td>随机产生 [0, max) 区间的整数</td>
</tr>
<tr>
<td>random.int(min,max)</td>
<td>随机产生 [min, max) 区间的整数</td>
</tr>
<tr>
<td>random.long</td>
<td>随机产生正负的长整数</td>
</tr>
<tr>
<td>random.long(max)</td>
<td>随机产生 [0, max) 区间的长整数</td>
</tr>
<tr>
<td>random.long(min,max)</td>
<td>随机产生 [min, max) 区间的长整数</td>
</tr>
<tr>
<td>random.uuid</td>
<td>产生 UUID 字符串（含<span style="font-family:Arial;padding:0 2px;">‘-‘</span>字符）</td>
</tr>
<tr>
<td>random.*</td>
<td><span style="font-family:Arial;padding:0 2px;">‘*’</span>表示除上面列举之外的其他字符，用于随机产生 32 位字符串</td>
</tr>
</tbody>
</table>
<p>你可以翻阅源代码：<a href="https://github.com/spring-projects/spring-boot/blob/1.5.x/spring-boot/src/main/java/org/springframework/boot/context/config/RandomValuePropertySource.java" target="_blank" rel="external">org.springframework.boot.context.config.RandomValuePropertySource</a></p>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">random-seed.random-<span class="keyword">int</span>-value=$&#123;random.<span class="keyword">int</span>&#125;</div><div class="line">random-seed.random-<span class="keyword">int</span>-range-value=$&#123;random.<span class="keyword">int</span>(<span class="number">2</span>)&#125;</div><div class="line">random-seed.random-<span class="keyword">long</span>-value=$&#123;random.<span class="keyword">long</span>&#125;</div><div class="line">random-seed.random-<span class="keyword">long</span>-range-value=$&#123;random.<span class="keyword">long</span>(<span class="number">1</span>,<span class="number">3</span>)&#125;</div><div class="line">random-seed.random-uuid-value=$&#123;random.uuid&#125;</div><div class="line">random-seed.random-str-value=$&#123;random.whatever&#125;</div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="attr">random-seed:</span></div><div class="line"><span class="attr">  random-int-value:</span> <span class="string">$&#123;random.int&#125;</span></div><div class="line"><span class="attr">  random-int-range-value:</span> <span class="string">$&#123;random.int(2)&#125;</span></div><div class="line"><span class="attr">  random-long-value:</span> <span class="string">$&#123;random.long&#125;</span></div><div class="line"><span class="attr">  random-long-range-value:</span> <span class="string">$&#123;random.long(1,3)&#125;</span></div><div class="line"><span class="attr">  random-uuid-value:</span> <span class="string">$&#123;random.uuid&#125;</span></div><div class="line"><span class="attr">  random-str-value:</span> <span class="string">$&#123;random.whatever&#125;</span></div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"random-seed"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomSeedConfig</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> randomIntValue;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> randomIntRangeValue;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> randomLongValue;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> <span class="keyword">long</span> randomLongRangeValue;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String randomUuidValue;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String randomStrValue;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="6-PropertySource"><a href="#6-PropertySource" class="headerlink" title="6. @PropertySource"></a>6. @PropertySource</h3><p>使用<code>@PropertySource</code>注解可以声明当前所使用的具体属性文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="meta">@PropertySource</span>(<span class="string">"jdbc.properties"</span>)</div><div class="line"><span class="meta">@ConfigurationProperties</span>(<span class="string">"jdbc"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JdbcConfig</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String username;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String password;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>src/main/resources/jdbc.properties</code>配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">jdbc.username = root</div><div class="line">jdbc.password = root@<span class="number">123321</span></div></pre></td></tr></table></figure>
<h3 id="7-命令行参数"><a href="#7-命令行参数" class="headerlink" title="7. 命令行参数"></a>7. 命令行参数</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Component</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommandLineConfig</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;command-line-arg&#125;"</span>)</div><div class="line">    <span class="keyword">private</span> String commandLineArg;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在命令行中，通过<code>-D参数名称=参数的值</code>进行配置：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar -Dcommand-line-arg=<span class="string">"今天天气不错"</span> spring-boot-properties-sample-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-properties-sample" target="_blank" rel="external">spring-boot-properties-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-external-config" target="_blank" rel="external">spring-boot-features-profiles</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 允许我们通过&lt;code&gt;*.properties&lt;/code&gt;文件、&lt;code&gt;*.yml&lt;/code&gt;文件、环境变量、命令行参数等来外部化应用程序的配置，以便我们在不同的环境可以使用同一套程序代码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Thymeleaf 教程</title>
    <link href="http://yoursite.com/post/thymeleaf.html"/>
    <id>http://yoursite.com/post/thymeleaf.html</id>
    <published>2017-04-03T18:32:29.000Z</published>
    <updated>2017-07-16T04:58:55.124Z</updated>
    
    <content type="html"><![CDATA[<p>Thymeleaf 是一个服务器端 Java 模板引擎，能够处理 HTML、XML、CSS、JAVASCRIPT 等模板文件。Thymeleaf 模板可以直接当作静态原型来使用，它主要目标是为开发者的开发工作流程带来优雅的自然模板，也是 Java 服务器端 HTML5 开发的理想选择。</p>
<a id="more"></a>
<h2 id="1-创建模板文件"><a href="#1-创建模板文件" class="headerlink" title="1. 创建模板文件"></a>1. 创建模板文件</h2><p>创建一个 HTML 模板文件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span>Welcome to BeiJing!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>通过<code>&lt;html xmlns:th=&quot;http://www.thymeleaf.org&quot;&gt;</code>引入 Thymeleaf 命名空间。<code>th:text</code>用于处理<code>p</code>标签体的文本内容。该模板文件直接在任何浏览器中正确显示，浏览器会自动忽略它们不能理解的属性<code>th:text</code>。但这不是一个真正有效的 HTML5 文档，因为 HTML5 规范是不允许使用<code>th:*</code>这些非标准属性的。我们可以切换到 Thymeleaf 的<code>data-th-*</code>语法，以此来替换<code>th:*</code>语法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Index Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">data-th-text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span>Welcome to BeiJing!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>HTML5 规范是允许<code>data-*</code>这样自定义的属性的。<code>th:*</code>和<code>data-th-*</code>这两个符号是完全等效且可以互换的。但为了简单直观和代码的紧凑性，本文采用<code>th:*</code>的表示形式。</p>
<h2 id="2-标准表达式语法"><a href="#2-标准表达式语法" class="headerlink" title="2. 标准表达式语法"></a>2. 标准表达式语法</h2><p>Thymeleaf 提供了非常丰富的标准表达式语法，总共有 8 大类：</p>
<ul>
<li>简单表达式</li>
<li>字面值</li>
<li>文本操作</li>
<li>算术运算</li>
<li>布尔运算</li>
<li>比较和相等</li>
<li>条件运算</li>
<li>无操作符</li>
</ul>
<h3 id="2-1-简单表达式"><a href="#2-1-简单表达式" class="headerlink" title="2.1 简单表达式"></a>2.1 简单表达式</h3><table>
<thead>
<tr>
<th style="text-align:center">语法</th>
<th>名称</th>
<th>描述</th>
<th>作用</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">${…}</td>
<td>Variable Expressions</td>
<td>变量表达式</td>
<td>取出上下文变量的值</td>
</tr>
<tr>
<td style="text-align:center">*{…}</td>
<td>Selection Variable Expressions</td>
<td>选择变量表达式</td>
<td>取出选择的对象的属性值</td>
</tr>
<tr>
<td style="text-align:center">#{…}</td>
<td>Message Expressions</td>
<td>消息表达式</td>
<td>使文字消息国际化，I18N</td>
</tr>
<tr>
<td style="text-align:center">@{…}</td>
<td>Link URL Expressions</td>
<td>链接表达式</td>
<td>用于表示各种超链接地址</td>
</tr>
<tr>
<td style="text-align:center">~{…}</td>
<td>Fragment Expressions</td>
<td>片段表达式</td>
<td>引用一段公共的代码片段</td>
</tr>
</tbody>
</table>
<h4 id="2-1-1-…"><a href="#2-1-1-…" class="headerlink" title="2.1.1 ${…}"></a>2.1.1 ${…}</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@GetMapping</span>(<span class="string">"/standard-expression-syntax/variables"</span>)</div><div class="line"><span class="function"><span class="keyword">public</span> String <span class="title">variables</span><span class="params">(ModelMap model, HttpSession session)</span> </span>&#123;</div><div class="line">    model.put(<span class="string">"now"</span>, <span class="keyword">new</span> Date());</div><div class="line">    model.put(<span class="string">"message"</span>, <span class="string">"Welcome to BeiJing!"</span>);</div><div class="line">    session.setAttribute(<span class="string">"user"</span>, <span class="keyword">new</span> User(<span class="string">"fanlychie"</span>, <span class="string">"男"</span>, <span class="number">24</span>));</div><div class="line">    ... ...</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过变量表达式<code>${}</code>取出上下文环境中的<code>message</code>变量：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它相当于：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ctx.getVariable(<span class="string">"message"</span>);</div></pre></td></tr></table></figure>
<h4 id="2-1-2-…"><a href="#2-1-2-…" class="headerlink" title="2.1.2 *{…}"></a>2.1.2 *{…}</h4><p>变量表达式<code>${}</code>是面向整个上下文的，而选择变量表达式<code>*{}</code>的上下文是父标签（<code>th:object</code>）所选择的对象：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:object</span>=<span class="string">"$&#123;session.user&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"*&#123;name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"*&#123;sex&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"*&#123;age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它相当于：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.sex&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.age&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>如果对象没有被选择，那么，<code>*{}</code>和<code>${}</code>表达式所达到的效果是完全相同的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"*&#123;session.user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-1-3-…"><a href="#2-1-3-…" class="headerlink" title="2.1.3 #{…}"></a>2.1.3 #{…}</h4><p>消息表达式可用于国际化文字信息。首先我们来了解一下 i18n 资源文件的命名规则：</p>
<ul>
<li>basename.properties</li>
<li>basename_language.properties</li>
<li>basename_language_country.properties</li>
</ul>
<p><code>basename</code>是自定义的资源文件名称，<code>language</code>和<code>country</code>必须是 Java 支持的语言和国家。<code>basename.properties</code>是缺省加载的资源文件，当客户端根据本地语言查找不到相关的资源文件时，则使用该配置文件。</p>
<p>创建文件<code>src/main/resources/messages.properties</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">welcome.message = 北京欢迎你！</div></pre></td></tr></table></figure>
<p>创建文件<code>src/main/resources/messages_en_US.properties</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">welcome.message = Welcome to BeiJing!</div></pre></td></tr></table></figure>
<p>在 IntelliJ IDEA 编辑视图：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/i18n-messages.png" alt=""></p>
<p><code>messages</code>是 Spring Boot 加载资源文件默认采用的名称（<code>basename</code>），如果你所使用的资源文件名称不是以<code>messages</code>命名或所使用的资源文件不是在<code>src/main/resources</code>根目录，你可以通过<code>spring.messages.basename</code>属性来做具体的配置。如，资源文件<code>messages.properties</code>和<code>messages_en_US.properties</code>假设它们所在的目录位置是<code>src/main/resources/i18n</code>。</p>
<p>application.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.messages.basename:i18n/messages</div></pre></td></tr></table></figure>
<p>application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="string">spring</span></div><div class="line">  <span class="string">messages</span></div><div class="line"><span class="attr">    basename:</span> <span class="string">i18n/messages</span></div></pre></td></tr></table></figure>
<p>静态文本消息示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 北京欢迎你！ --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"#&#123;welcom.message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>消息表达式<code>#{}</code>是不允许直接处理非静态的文本消息的，但是你可以在资源文件中通过使用占位符<code>{}</code>来处理非静态的文本消息：</p>
<p>messages.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">welcome.user.message = &#123;<span class="number">0</span>&#125;, 北京欢迎你！</div></pre></td></tr></table></figure>
<p>messages_en_US.properties 配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">welcome.user.message = &#123;<span class="number">0</span>&#125;, Welcome to BeiJing!</div></pre></td></tr></table></figure>
<p>非静态文本消息，以参数的形式传递变量的值：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- fanlychie, 北京欢迎你！ --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"#&#123;welcome.user.message($&#123;session.user.name&#125;)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-1-4-…"><a href="#2-1-4-…" class="headerlink" title="2.1.4 @{…}"></a>2.1.4 @{…}</h4><p>链接表达式<code>@{}</code>是专门用来处理 URL 链接地址的。</p>
<p>绝对地址示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- http://fanlychie.github.io --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"@&#123;http://fanlychie.github.io&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>页面相对地址示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- commons/base.html --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"@&#123;commons/base.html&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>上下文相对地址（相对于当前的服务）示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- /css/mian.css --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"@&#123;/css/mian.css&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>服务器相对地址（相对于部署在同一个服务器中的不同服务）示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- /image/upload --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"@&#123;~/image/upload&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>参数使用示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- /css/mian.css?v=1.0 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"@&#123;/css/mian.css(v=1.0)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /user/order?username=fanlychie --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"@&#123;/user/order(username=$&#123;session.user.name&#125;)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /user/order?username=fanlychie&amp;status=PAIED --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"@&#123;/user/order(username=$&#123;session.user.name&#125;,status='PAIED')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /user/fanlychie/info --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"@&#123;/user/&#123;username&#125;/info(username=$&#123;session.user.name&#125;)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-1-5-…"><a href="#2-1-5-…" class="headerlink" title="2.1.5 ~{…}"></a>2.1.5 ~{…}</h4><p>片段表达式<code>~{}</code>可以用来引用一段公共的 HTML 代码片段。</p>
<table>
<thead>
<tr>
<th>语法</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>~{templatename}</td>
<td>引用整个模板文件的代码片段</td>
</tr>
<tr>
<td>~{templatename :: selector}</td>
<td>selector 可以是 th:fragment 指定的名称或其他选择器。<br>如类选择器、ID选择器等</td>
</tr>
<tr>
<td>~{::selector}</td>
<td>相当于 ~{this :: selector}，表示引用当前模板定义的代码片段</td>
</tr>
</tbody>
</table>
<p>在 Thymeleaf 模板文件中，你可以使用<code>th:fragment</code>属性来定义一段公共的代码片段，然后你可以通过使用<code>th:insert</code>、<code>th:replace</code>、<code>th:include</code>（Thymeleaf 3.0 开始不再推荐使用，本文也将不再介绍它）属性来将这些公共的代码片段引入到模板文件中来。</p>
<p>src/main/resources/templates/base.html，通过<code>th:fragment</code>属性定义一段公共的代码片段：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"footer"</span> <span class="attr">th:fragment</span>=<span class="string">"footerFragment"</span>&gt;</span>&amp;copy; 2017 fanlychie<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>src/main/resources/templates/index.html，通过<code>th:insert</code>属性引用一段公共的代码片段：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;base :: footerFragment&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中，<code>~{}</code>是可选的，我们可以去掉这层的包裹：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"base :: footerFragment"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>若 index.html 与 base.html 不在同级目录，如 templates/commons/base.html：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;commons/base :: footerFragment&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用<code>th:fragment</code>属性定义代码片段时，你还可以声明一组参数：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:fragment</span>=<span class="string">"crumbs(parent, child)"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">i</span> <span class="attr">th:text</span>=<span class="string">"$&#123;parent&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span> <span class="tag">&lt;<span class="name">i</span> <span class="attr">th:text</span>=<span class="string">"$&#123;child&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;i&gt;用户中心&lt;/i&gt;</div><div class="line">&lt;i&gt;我的订单&lt;/i&gt;</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"::crumbs('用户中心', '我的订单')"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>此外，我们还可以通过类选择器、ID选择器等来引用公共的代码片段：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;base :: #footer&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>除了<code>th:insert</code>属性<code>th:replace</code>也可以用来引用公共的代码片段。不同的是，<code>th:insert</code>是直接将代码片段插入到标签体内，而<code>th:replace</code>则是用代码片段直接替换标签体内容。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;div&gt;</div><div class="line">    &lt;div id="footer"&gt;© 2017 fanlychie&lt;/div&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:insert</span>=<span class="string">"~&#123;base :: footerFragment&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;div id="footer"&gt;© 2017 fanlychie&lt;/div&gt;</div><div class="line">--&gt;</div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:replace</span>=<span class="string">"~&#123;base :: footerFragment&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-1-6-内置对象"><a href="#2-1-6-内置对象" class="headerlink" title="2.1.6 内置对象"></a>2.1.6 内置对象</h4><table>
<thead>
<tr>
<th>对象</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/context/IContext.java" target="_blank" rel="external">#ctx</a></td>
<td>上下文对象</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/context/IContext.java" target="_blank" rel="external">#vars</a></td>
<td>同 #ctx，表示上下文变量</td>
</tr>
<tr>
<td>#locale</td>
<td>上下文本地化（特定的地理区域）变量，可参考 java.util.Locale</td>
</tr>
<tr>
<td>#request</td>
<td>HttpServletRequest 对象，可参考 javax.servlet.http.HttpServletRequest</td>
</tr>
<tr>
<td>#response</td>
<td>HttpServletResponse 对象，可参考 javax.servlet.http.HttpServletResponse</td>
</tr>
<tr>
<td>#session</td>
<td>HttpSession 对象，可参考 javax.servlet.http.HttpSession</td>
</tr>
<tr>
<td>#servletContext</td>
<td>ServletContext 对象，可参考 javax.servlet.ServletContext</td>
</tr>
</tbody>
</table>
<p><code>#ctx</code>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- zh_CN --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#ctx.getLocale()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#ctx.getVariable('message')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- true --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#ctx.containsVariable('message')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>#vars</code>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- zh_CN --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#vars.getLocale()&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#vars.getVariable('message')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- true --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#vars.containsVariable('message')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>#locale</code>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- zh_CN --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- CN --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale.country&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 中国 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale.displayCountry&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- zh --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale.language&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 中文 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale.displayLanguage&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 中文 (中国) --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#locale.displayName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>#request</code>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- HTTP/1.1 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.protocol&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- http --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.scheme&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- localhost --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.serverName&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 8080 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.serverPort&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- GET --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.method&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /standard-expression-syntax/variables --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.requestURI&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- http://localhost:8080/standard-expression-syntax/variables --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.requestURL&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- /standard-expression-syntax/variables --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.servletPath&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- java.util.Collections$3@203646fe --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.parameterNames&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- &#123;q=[Ljava.lang.String;@3308c69f&#125; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.parameterMap&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- q=expression --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#request.queryString&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意，请求地址的 URL 参数直接通过<code>#request.x</code>是取不出来的，需要使用<code>param.x</code>语法来取出。如，URL：<code>/standard-expression-syntax/variables?q=expression</code>，取出 q 参数的正确姿势：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;param.q&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>#response</code>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 200 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#response.status&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 8192 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#response.bufferSize&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- UTF-8 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#response.characterEncoding&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- text/html;charset=UTF-8 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#response.contentType&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>#session</code>示例：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 2BCB2A0EACFF2D9D249D9799431B5127 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#session.id&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 1499786693244 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#session.lastAccessedTime&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- fanlychie --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#session.getAttribute('user').name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注意，放到会话里面的对象直接通过<code>#session.x</code>是取不出来的，需要使用<code>session.x</code>语法来取出。如，取出会话里面的 user 对象的正确姿势：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;session.user.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-1-7-工具类"><a href="#2-1-7-工具类" class="headerlink" title="2.1.7 工具类"></a>2.1.7 工具类</h4><table>
<thead>
<tr>
<th>对象</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Messages.java" target="_blank" rel="external">#messages</a></td>
<td>消息工具类，与 ＃{…} 作用相同</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Uris.java" target="_blank" rel="external">#uris</a></td>
<td>地址相关的工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Conversions.java" target="_blank" rel="external">#conversions</a></td>
<td>对象转换工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Dates.java" target="_blank" rel="external">#dates</a></td>
<td>日期时间工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Calendars.java" target="_blank" rel="external">#calendars</a></td>
<td>日历工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Numbers.java" target="_blank" rel="external">#numbers</a></td>
<td>数字工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Strings.java" target="_blank" rel="external">#strings</a></td>
<td>字符串工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Objects.java" target="_blank" rel="external">#objects</a></td>
<td>对象工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Bools.java" target="_blank" rel="external">#bools</a></td>
<td>布尔工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Arrays.java" target="_blank" rel="external">#arrays</a></td>
<td>数组工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Lists.java" target="_blank" rel="external">#lists</a></td>
<td>List 工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Sets.java" target="_blank" rel="external">#sets</a></td>
<td>Set 工具类</td>
</tr>
<tr>
<td><a href="https://github.com/thymeleaf/thymeleaf/blob/thymeleaf-3.0.5.RELEASE/src/main/java/org/thymeleaf/expression/Maps.java" target="_blank" rel="external">#maps</a></td>
<td>Map 工具类</td>
</tr>
</tbody>
</table>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- false --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#strings.isEmpty(message)&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 2017-07-12 00:37:25 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;#dates.format(now, 'yyyy-MM-dd HH:mm:ss')&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-2-字面值"><a href="#2-2-字面值" class="headerlink" title="2.2 字面值"></a>2.2 字面值</h3><p>所谓字面值，首先它不是一个变量，它是一个具体的确切的值，通常这些值是比较简单的，例如：<code>18</code>、<code>&#39;welcome&#39;</code>等，它们没有名称，以至于我们只能用值来称呼它们，因此我们称其为字面值。</p>
<h4 id="2-2-1-文字字面值"><a href="#2-2-1-文字字面值" class="headerlink" title="2.2.1 文字字面值"></a>2.2.1 文字字面值</h4><p>文字字面值是用单引号引起来的任何字符内容，如果字符内容里面含有单引号，则需要进行转义：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to BeiJing!'"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 'Welcome to BeiJing!' --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'\'Welcome to BeiJing!\''"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-2-2-数字字面值"><a href="#2-2-2-数字字面值" class="headerlink" title="2.2.2 数字字面值"></a>2.2.2 数字字面值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 2017 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"2017"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 2018 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"2017 + 1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-2-3-布尔字面值"><a href="#2-2-3-布尔字面值" class="headerlink" title="2.2.3 布尔字面值"></a>2.2.3 布尔字面值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- false --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"1 &gt; 2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 否 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"1 &gt; 2 ? '是' : '否'"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-2-4-空字面值"><a href="#2-2-4-空字面值" class="headerlink" title="2.2.4 空字面值"></a>2.2.4 空字面值</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- false --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user == null&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-2-5-字面令牌"><a href="#2-2-5-字面令牌" class="headerlink" title="2.2.5 字面令牌"></a>2.2.5 字面令牌</h4><p>字面令牌（Literal Tokens）的内容只能含有（不能含有空格、特殊符号等）：</p>
<ul>
<li>大写或小写的字母、中文等不含空格和特殊符号的文本</li>
<li>0 到 9 的数字</li>
<li>中括号</li>
<li>下划线</li>
<li>连字符（-）</li>
<li>点符号（.）</li>
</ul>
<p>实际上，数字、布尔和空字面值都是字面令牌的特殊情况。字面令牌能够用来对标准表达式语法进行简化，我们可以将包裹它的内容的单引号去掉：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"Welcome to BeiJing!"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它等效于：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to BeiJing!'"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-3-文本操作"><a href="#2-3-文本操作" class="headerlink" title="2.3 文本操作"></a>2.3 文本操作</h3><p>我们可以对文本内容进行两种常用的操作，它们分别为字符串连接和字符串替换。</p>
<h4 id="2-3-1-字符串连接"><a href="#2-3-1-字符串连接" class="headerlink" title="2.3.1 字符串连接"></a>2.3.1 字符串连接</h4><p>不管是字面值还是表达式的结果，我们都可以使用<code>+</code>符号将它们连接起来：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"'Welcome to ' + $&#123;location&#125; + '!'"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="2-3-2-字面值替换"><a href="#2-3-2-字面值替换" class="headerlink" title="2.3.2 字面值替换"></a>2.3.2 字面值替换</h4><p>符号<code>||</code>可以用来将字面值和表达式包裹起来，这样就能方便的替换变量的值，而不需要使用<code>+</code>连接符：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- Welcome to BeiJing! --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|Welcome to $&#123;location&#125;!|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-4-算术运算"><a href="#2-4-算术运算" class="headerlink" title="2.4 算术运算"></a>2.4 算术运算</h3><p>支持<code>+</code>（加）、<code>-</code>（减）、<code>*</code>（乘）、<code>/</code>（除）、<code>%</code>（模）运算：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 6 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"4 + 2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 2 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"4 - 2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 8 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"4 * 2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 2 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"4 / 2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 0 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"4 % 2"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 2 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;pagination.page + 1&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- 2 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;pagination.page&#125; + 1"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-5-布尔运算"><a href="#2-5-布尔运算" class="headerlink" title="2.5 布尔运算"></a>2.5 布尔运算</h3><p>支持<code>and</code>（且）、<code>or</code>（或）、<code>!</code>（非）、<code>not</code>（非）运算：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.online and user.vip&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.online or user.vip&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;!user.online&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;not user.online&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-6-比较和相等"><a href="#2-6-比较和相等" class="headerlink" title="2.6 比较和相等"></a>2.6 比较和相等</h3><p>支持<code>&lt;</code>（<code>lt</code>）、<code>&gt;</code>（<code>gt</code>）、<code>&lt;=</code>（<code>le</code>）、<code>&gt;=</code>（<code>ge</code>）、<code>==</code>（<code>eq</code>）、<code>！=</code>（<code>ne</code>）：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age &lt; 60&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age &lt;= 60&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age &gt; 18&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age &gt;= 18&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age == 18&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.age != 18&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-7-条件运算"><a href="#2-7-条件运算" class="headerlink" title="2.7 条件运算"></a>2.7 条件运算</h3><p>三元运算符：<code>(if) ? (then) : (else)</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.online ? '在线' : '离线'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.online ? (user.vip ? 'VIP用户在线' : '普通用户在线') : '离线'&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>二元运算符：<code>(value) ?: (defaultValue)</code>。</p>
<p>其中，<code>value</code>非空（null）即真，条件为真时输出<code>value</code>，否则输出<code>defaultValue</code>。假设<code>token = null</code>，<code>user.email = fanlychie@gmail.com</code></p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 你还没有登录，请先登录 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;token&#125; ?: '你还没有登录，请先登录'"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- fanlychie@gmail.com --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;user.email&#125; ?: '你还没有绑定邮箱'"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-8-无操作符"><a href="#2-8-无操作符" class="headerlink" title="2.8 无操作符"></a>2.8 无操作符</h3><p>当模板运行在服务器端时，Thymeleaf 会解析<code>th:*</code>属性的具体值替换标签体的内容。无操作符（<code>_</code>）则允许你使用原型标签体的内容作为默认值：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 你还没有登录，请先登录 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;token&#125; ?: _"</span>&gt;</span>你还没有登录，请先登录<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="3-使用文本"><a href="#3-使用文本" class="headerlink" title="3. 使用文本"></a>3. 使用文本</h2><p>首先介绍两个最基础的<code>th:*</code>属<code>th:text</code>和<code>th:utext</code>，它们都是用于处理文本消息内容。</p>
<h3 id="3-1-th-text"><a href="#3-1-th-text" class="headerlink" title="3.1 th:text"></a>3.1 th:text</h3><p>在标签体中展示表达式评估结果的文本内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>使用外部化的文本内容：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span>Welcome to BeiJing!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>当它作为静态文件直接运行时，浏览器会自动忽略它不能识别的<code>th:text</code>属性，而显示<code>&lt;p&gt;</code>标签体的文本内容<code>Welcome to BeiJing!</code></p>
<p>当它作为模板文件运行在服务器端时，<code>th:text</code>属性的具体值将会替换<code>&lt;p&gt;</code>标签体的文本内容。</p>
<h3 id="3-2-th-utext"><a href="#3-2-th-utext" class="headerlink" title="3.2 th:utext"></a>3.2 th:utext</h3><p>属性<code>th:utext</code>与<code>th:text</code>的区别在于：</p>
<ul>
<li><code>th:text</code>默认会对含有 HTML 标签的内容进行字符转义；</li>
<li><code>th:utext</code>（Unescaped Text）则不会对含有 HTML 标签的内容进行字符转义；</li>
</ul>
<p>假设：<code>message = &quot;&lt;b&gt;Welcome to BeiJing!&lt;/b&gt;&quot;</code>。</p>
<p>使用<code>th:text</code>属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>th:text</code>效果：&lt;b&gt;Welcome to BeiJing!&lt;/b&gt;</p>
<p>使用<code>th:utext</code>属性：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:utext</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p><code>th:utext</code>效果：<b>Welcome to BeiJing!</b></p>
<h2 id="4-设置属性值"><a href="#4-设置属性值" class="headerlink" title="4. 设置属性值"></a>4. 设置属性值</h2><p>在 Thymeleaf 模板文件中，你可以使用<code>th:*</code>（或者使用<code>th:attr</code>属性）来设置任意的 HTML5 标签属性的值。不仅如此，你还可以<code>th:*-*</code>来同时为多个不同的标签属性设置相同的一个值，甚至你可以使用<code>th:attrappend</code>和<code>th:attrprepend</code>来追加新的值到现有的标签属性值中。</p>
<h3 id="4-1-th-attr"><a href="#4-1-th-attr" class="headerlink" title="4.1 th:attr"></a>4.1 th:attr</h3><p>这种方式是不被推荐的，了解一下就行。下面是用<code>th:attr=&quot;href=...&quot;</code>来设置标签<code>href</code>属性的值：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:attr</span>=<span class="string">"href=@&#123;https://www.google.com.hk&#125;"</span>&gt;</span>谷歌一下你就知道<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-2-th"><a href="#4-2-th" class="headerlink" title="4.2 th:*"></a>4.2 th:*</h3><p>显然<code>th:attr=&quot;href=@{http://www.baidu.com}&quot;</code>不够简洁，我们更推荐下面的这种语法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;https://www.google.com.hk&#125;"</span>&gt;</span>谷歌一下你就知道<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>其中<code>th:*</code>中的<code>*</code>可以是 HTML5 支持的任意属性名称，甚至这些属性名称可以是自定义的：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;div item-id="1001"&gt;Welcome to BeiJing!&lt;/div&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:item-id</span>=<span class="string">"$&#123;user.id&#125;"</span>&gt;</span>Welcome to BeiJing!<span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-3-th"><a href="#4-3-th" class="headerlink" title="4.3 th:*-*"></a>4.3 th:*-*</h3><p>如果想要同时为标签的多个不同属性设置相同的一个值，可以使用<code>th:*-*</code>的语法：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"logo.png"</span> <span class="attr">th:alt-title</span>=<span class="string">"LOGO图片"</span>&gt;</span></div></pre></td></tr></table></figure>
<p>它相当于：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"logo.png"</span> <span class="attr">th:alt</span>=<span class="string">"LOGO图片"</span> <span class="attr">th:title</span>=<span class="string">"LOGO图片"</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-4-th-attrappend-amp-th-attrprepend"><a href="#4-4-th-attrappend-amp-th-attrprepend" class="headerlink" title="4.4 th:attrappend &amp; th:attrprepend"></a>4.4 th:attrappend &amp; th:attrprepend</h3><p><code>th:attrappend</code>和<code>th:attrprepend</code>可以将表达式的结果分别追加到指定的属性值之后和之前。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;button class="btn enable"&gt;购买&lt;/button&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">th:attrappend</span>=<span class="string">"class=$&#123;outOfStock&#125; ? ' enable' : ' disable'"</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div><div class="line"><span class="comment">&lt;!-- &lt;button class="enable btn"&gt;购买&lt;/button&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">th:attrprepend</span>=<span class="string">"class=$&#123;outOfStock&#125; ? 'enable ' : 'disable '"</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<p>另外，还有两个常用的具体附加属性<code>th:classappend=&quot;...&quot;</code>和<code>th:styleappend=&quot;&quot;</code>。</p>
<p>它们分别用来代替<code>th:attrappend=&quot;class=...&quot;</code>和<code>th:attrappend=&quot;style=...&quot;</code>。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;button class="btn enable"&gt;购买&lt;/button&gt; --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">th:classappend</span>=<span class="string">"$&#123;outOfStock&#125; ? ' enable' : ' disable'"</span>&gt;</span>购买<span class="tag">&lt;/<span class="name">button</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="4-5-布尔属性"><a href="#4-5-布尔属性" class="headerlink" title="4.5 布尔属性"></a>4.5 布尔属性</h3><p>在 HTML 中有些属性是布尔属性，布尔属性是指没有值的属性，如<code>readonly</code>、<code>checked</code>、<code>selected</code>等。它们若存在那就意味着值为 true。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"rememberme"</span> <span class="attr">checked</span> /&gt;</span> 记住我</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"male"</span> <span class="attr">checked</span>&gt;</span> 男</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"female"</span>&gt;</span> 女</div><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"appId"</span> <span class="attr">value</span>=<span class="string">"J123654"</span> <span class="attr">readonly</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">select</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span> <span class="attr">selected</span>&gt;</span>北京<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>上海<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>广州<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>深圳<span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Thymeleaf 也允许我们通过<code>th:*</code>（这里的<code>*</code>表示任意的布尔属性） 来选择是否使用这些布尔属性。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">name</span>=<span class="string">"rememberme"</span> <span class="attr">ch:checked</span>=<span class="string">"$&#123;rememberme&#125;"</span> /&gt;</span> 记住我</div></pre></td></tr></table></figure>
<p>正如你所见，如果表达式的结果为<code>true</code>，则自动勾选复选框，若为<code>false</code>，则不会自动勾选。</p>
<h2 id="5-遍历"><a href="#5-遍历" class="headerlink" title="5. 遍历"></a>5. 遍历</h2><p>遍历（迭代）的语法<code>th:each=&quot;自定义的元素变量名称 : ${集合变量名称}&quot;</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">spn</span>&gt;</span>你所在城市：<span class="tag">&lt;/<span class="name">spn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"mycity"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"city : $&#123;cities&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;city.name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>属性<code>th:each</code>提供了一个用于跟踪迭代的状态变量，它包含以下几个属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>类型</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>index</td>
<td>int</td>
<td>当前迭代的索引，从 0 开始</td>
</tr>
<tr>
<td>count</td>
<td>int</td>
<td>当前迭代的计数，从 1 开始</td>
</tr>
<tr>
<td>size</td>
<td>int</td>
<td>集合中元素的总个数</td>
</tr>
<tr>
<td>current</td>
<td>int</td>
<td>当前的元素对象</td>
</tr>
<tr>
<td>even</td>
<td>boolean</td>
<td>当前迭代的计数是否是偶数</td>
</tr>
<tr>
<td>odd</td>
<td>boolean</td>
<td>当前迭代的计数是否是奇数</td>
</tr>
<tr>
<td>first</td>
<td>boolean</td>
<td>当前元素是否是集合的第一个元素</td>
</tr>
<tr>
<td>last</td>
<td>boolean</td>
<td>当前元素是否是集合的最后一个元素</td>
</tr>
</tbody>
</table>
<p>状态变量的使用语法：<code>th:each=&quot;自定义的元素变量名称, 自定义的状态变量名称 : ${集合变量名称}&quot;</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">spn</span>&gt;</span>所在城市：<span class="tag">&lt;/<span class="name">spn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"mycity"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"city, status : $&#123;cities&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;city.name&#125;"</span> <span class="attr">th:item-index</span>=<span class="string">"$&#123;status.count&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<p>不管什么时候，Thymeleaf 始终会为每个<code>th:each</code>创建一个状态变量，默认的状态变量名称就是自定义的元素变量名称后面加<code>Stat</code>字符串组成：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">spn</span>&gt;</span>所在城市：<span class="tag">&lt;/<span class="name">spn</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"mycity"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">th:each</span>=<span class="string">"city : $&#123;cities&#125;"</span> <span class="attr">th:text</span>=<span class="string">"$&#123;city.name&#125;"</span> <span class="attr">th:item-index</span>=<span class="string">"$&#123;cityStat.count&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">option</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="6-条件判断"><a href="#6-条件判断" class="headerlink" title="6. 条件判断"></a>6. 条件判断</h2><p>条件判断语句有三种，分别是：<code>th:if</code>、<code>th:unless</code>、<code>th:swith</code>。</p>
<h3 id="6-1-th-if"><a href="#6-1-th-if" class="headerlink" title="6.1 th:if"></a>6.1 th:if</h3><p>当表达式的评估结果为真时则显示内容，否则不显示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/order(uid=$&#123;user.id&#125;)&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user != null&#125;"</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>真假评估的依据：</p>
<ul>
<li>当表达式的值不为空（null）时<ul>
<li>如果表达式的值是一个布尔类型，且值为<code>true</code>评估为真，否则为假</li>
<li>如果表达式的值是一个数字类型，且值为非<code>0</code>评估为真，否则为假</li>
<li>如果表达式的值是一个字符类型，且值为非<code>0</code>评估为真，否则为假</li>
<li>如果表达式的值是一个字符串类型，且值为非<code>&quot;false&quot;</code>、<code>&quot;off&quot;</code>、<code>&quot;no&quot;</code>评估为真，否则为假</li>
<li>如果表达式的值不是一个<code>布尔</code>、<code>数字</code>、<code>字符</code>或<code>字符串</code>评估为真</li>
</ul>
</li>
<li>当表达式的值为空（null）时，评估结果为假</li>
</ul>
<p>因此，上面代码我们也可以简写成：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/order(uid=$&#123;user.id&#125;)&#125;"</span> <span class="attr">th:if</span>=<span class="string">"$&#123;user&#125;"</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<p>但是，为了代码的可读性，我们并不建议这样使用。</p>
<h3 id="6-2-th-unless"><a href="#6-2-th-unless" class="headerlink" title="6.2 th:unless"></a>6.2 th:unless</h3><p><code>th:unless</code>与<code>th:if</code>判断恰好相反，当表达式的评估结果为假时则显示内容，否则不显示：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/user/order(uid=$&#123;user.id&#125;)&#125;"</span> <span class="attr">th:unless</span>=<span class="string">"$&#123;user == null&#125;"</span>&gt;</span>我的订单<span class="tag">&lt;/<span class="name">a</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="6-3-th-swith"><a href="#6-3-th-swith" class="headerlink" title="6.3 th:swith"></a>6.3 th:swith</h3><p>多路选择语句，它需要搭配<code>th:case</code>来使用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"admin"</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"user"</span>&gt;</span>普通用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="7-定义局部变量"><a href="#7-定义局部变量" class="headerlink" title="7. 定义局部变量"></a>7. 定义局部变量</h2><p>使用<code>th:with</code>属性可以定义局部变量：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:with</span>=<span class="string">"name='fanlychie'"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">th:text</span>=<span class="string">"$&#123;name&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<p>同时定义多个局部变量时，用英文<code>,</code>号分隔开：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:with</span>=<span class="string">"name=$&#123;user.name&#125;,age=&#123;user.age&#125;"</span>&gt;</span></div><div class="line">    ......</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h2 id="8-注释"><a href="#8-注释" class="headerlink" title="8. 注释"></a>8. 注释</h2><p>下面介绍常见的两种注释：</p>
<h3 id="8-1-标准注释"><a href="#8-1-标准注释" class="headerlink" title="8.1 标准注释"></a>8.1 标准注释</h3><p>语法：<code>&lt;!-- ... ---&gt;</code>，注释的代码块会在文件源代码中显示出来。</p>
<h4 id="8-1-1-单行注释"><a href="#8-1-1-单行注释" class="headerlink" title="8.1.1 单行注释"></a>8.1.1 单行注释</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- &lt;span&gt;$&#123;message&#125;&lt;/span&gt; ---&gt;</span></div></pre></td></tr></table></figure>
<h4 id="8-1-2-多行注释"><a href="#8-1-2-多行注释" class="headerlink" title="8.1.2 多行注释"></a>8.1.2 多行注释</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--</span></div><div class="line">&lt;div th:switch="$&#123;user.role&#125;"&gt;</div><div class="line">    &lt;p th:case="admin"&gt;管理员&lt;/p&gt;</div><div class="line">    &lt;p th:case="user"&gt;普通用户&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div><div class="line">---&gt;</div></pre></td></tr></table></figure>
<h3 id="8-2-解析器级注释"><a href="#8-2-解析器级注释" class="headerlink" title="8.2 解析器级注释"></a>8.2 解析器级注释</h3><p>语法：<code>&lt;!--/* ... */--&gt;</code>，注释的代码块会在引擎解析的时候抹去。</p>
<h4 id="8-2-1-单行注释："><a href="#8-2-1-单行注释：" class="headerlink" title="8.2.1 单行注释："></a>8.2.1 单行注释：</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--/* &lt;span&gt;$&#123;message&#125;&lt;/span&gt; */--&gt;</span></div></pre></td></tr></table></figure>
<h4 id="8-2-2-多行注释"><a href="#8-2-2-多行注释" class="headerlink" title="8.2.2 多行注释"></a>8.2.2 多行注释</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!--/*--&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:switch</span>=<span class="string">"$&#123;user.role&#125;"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"admin"</span>&gt;</span>管理员<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">th:case</span>=<span class="string">"user"</span>&gt;</span>普通用户<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="comment">&lt;!--*/--&gt;</span></div></pre></td></tr></table></figure>
<h2 id="9-内联表达式"><a href="#9-内联表达式" class="headerlink" title="9. 内联表达式"></a>9. 内联表达式</h2><p>内联表达式允许我们直接在 HTML 文本中使用标准表达式，而不需要使用<code>th:*</code>标签属性。</p>
<h3 id="9-1-…"><a href="#9-1-…" class="headerlink" title="9.1 [[…]]"></a>9.1 [[…]]</h3><p><code>[[]]</code>相当于<code>th:text</code>，对含有 HTML 标签的内容自动进行字符转义。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is : [[$&#123;htmlContent&#125;]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="9-2-…"><a href="#9-2-…" class="headerlink" title="9.2 [(…)]"></a>9.2 [(…)]</h3><p><code>[()]</code>相当于<code>th:utext</code>，对含有 HTML 标签的内容不进行字符转义。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>The message is : [($&#123;htmlContent&#125;)]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h3 id="9-3-th-inline"><a href="#9-3-th-inline" class="headerlink" title="9.3 th:inline"></a>9.3 th:inline</h3><p>我们已经了解到，使用<code>[[]]</code>和<code>[()]</code>语法可以直接在 HTML 文本中使用标准表达式，如果想要使用更多高级的功能，需要使用<code>th:inline</code>属性来激活，它的取值如下：</p>
<table>
<thead>
<tr>
<th>值</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>none</td>
<td>禁止内联表达式，可以原样输出 [[]] 和 [()] 字符串</td>
</tr>
<tr>
<td>text</td>
<td>文本内联，可以使用 th:each 等高级语法</td>
</tr>
<tr>
<td>css</td>
<td>样式内联，如：<code>&lt;style th:inline=&quot;css&quot;&gt;</code></td>
</tr>
<tr>
<td>javascript</td>
<td>脚本内联，如：<code>&lt;style th:inline=&quot;javascript&quot;&gt;</code></td>
</tr>
</tbody>
</table>
<h4 id="9-3-1-none"><a href="#9-3-1-none" class="headerlink" title="9.3.1 none"></a>9.3.1 none</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- [[1, 2], [3, 4]] --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">"none"</span>&gt;</span>[[1, 2], [3, 4]]<span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="9-3-2-text"><a href="#9-3-2-text" class="headerlink" title="9.3.2 text"></a>9.3.2 text</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 北京 上海 广州 深圳 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:inline</span>=<span class="string">"text"</span>&gt;</span></div><div class="line">    [# th:each="city : $&#123;cities&#125;"]</div><div class="line">        [($&#123;city.name&#125;)]</div><div class="line">    [/]</div><div class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="9-3-3-css"><a href="#9-3-3-css" class="headerlink" title="9.3.3 css"></a>9.3.3 css</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">th:inline</span>=<span class="string">"css"</span>&gt;</span><span class="css"></span></div><div class="line">    <span class="selector-tag">body</span> &#123;</div><div class="line">        <span class="attribute">background-color</span>:[[$&#123;bgColor&#125;]];</div><div class="line">    &#125;</div><div class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="9-3-4-javascript"><a href="#9-3-4-javascript" class="headerlink" title="9.3.4 javascript"></a>9.3.4 javascript</h4><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">th:inline</span>=<span class="string">"javascript"</span>&gt;</span><span class="undefined"></span></div><div class="line">    var user = [[$&#123;user&#125;]];</div><div class="line">    alert("用户名：" + user.name);</div><div class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>参考文档文献链接：<a href="http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="external">http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Thymeleaf 是一个服务器端 Java 模板引擎，能够处理 HTML、XML、CSS、JAVASCRIPT 等模板文件。Thymeleaf 模板可以直接当作静态原型来使用，它主要目标是为开发者的开发工作流程带来优雅的自然模板，也是 Java 服务器端 HTML5 开发的理想选择。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Thymeleaf" scheme="http://yoursite.com/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 添加 Thymeleaf 支持</title>
    <link href="http://yoursite.com/post/spring-boot-with-thymeleaf.html"/>
    <id>http://yoursite.com/post/spring-boot-with-thymeleaf.html</id>
    <published>2017-04-03T06:44:53.000Z</published>
    <updated>2017-07-16T12:54:10.215Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 对 Thymeleaf 模板引擎提供了自配置的良好支持。Spring Boot 1.5.2.RELEASE 版本默认使用的是 Thymeleaf 2.0+，本文使用 Thymeleaf 3.0+ 版本，在 pom.xml 中添加以下声明：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">thymeleaf.version</span>&gt;</span>3.0.5.RELEASE<span class="tag">&lt;/<span class="name">thymeleaf.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span>2.2.1<span class="tag">&lt;/<span class="name">thymeleaf-layout-dialect.version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div></pre></td></tr></table></figure>
<p>然后添加 Thymeleaf 依赖声明：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="1-控制器"><a href="#1-控制器" class="headerlink" title="1. 控制器"></a>1. 控制器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WelcomeController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">welcome</span><span class="params">(ModelMap model)</span> </span>&#123;</div><div class="line">        model.put(<span class="string">"message"</span>, <span class="string">"Hello Thymeleaf!"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-模板文件"><a href="#2-模板文件" class="headerlink" title="2. 模板文件"></a>2. 模板文件</h3><p>Spring Boot 对 Thymeleaf 模板引擎提供了自动配置的支持，详见 <a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/thymeleaf/ThymeleafProperties.java#L37" target="_blank" rel="external">ThymeleafProperties</a>。我们只需遵循约定，在<code>/src/main/resources/templates/</code>目录创建相应的页面模板文件（<code>*.html</code>）即可。</p>
<p></p><p class="code-title"># src/main/resources/templates/index.html</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>首页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">th:href</span>=<span class="string">"@&#123;/css/main.css&#125;"</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">th:text</span>=<span class="string">"$&#123;message&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<h3 id="3-静态文件"><a href="#3-静态文件" class="headerlink" title="3. 静态文件"></a>3. 静态文件</h3><p>Spring Boot 默认将静态资源文件映射到类路径下的目录包括（详见 <a href="https://github.com/spring-projects/spring-boot/blob/v1.5.2.RELEASE/spring-boot-autoconfigure/src/main/java/org/springframework/boot/autoconfigure/web/ResourceProperties.java#L44" target="_blank" rel="external">ResourcesProperties</a>）：</p>
<ul>
<li>/META-INF/resources/</li>
<li>/resources/</li>
<li>/static/</li>
<li>/public/</li>
</ul>
<p>因此我们可以将 css、js、images 等静态资源文件放在<code>/src/main/resources/static/</code>目录下。</p>
<p></p><p class="code-title"># src/main/resources/static/css/main.css</p><br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">body</span> &#123;</div><div class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</div><div class="line">    <span class="attribute">color</span>: <span class="number">#444</span>;</div><div class="line">    <span class="attribute">width</span>: <span class="number">280px</span>;</div><div class="line">    <span class="attribute">margin</span>: <span class="number">100px</span> auto;</div><div class="line">    <span class="attribute">font-family</span>: SimSun;</div><div class="line">    <span class="attribute">background-color</span>: <span class="number">#FBFBFB</span>;</div><div class="line">    <span class="attribute">text-shadow</span>: <span class="built_in">rgba</span>(50,50,50,0.3) <span class="number">2px</span> <span class="number">2px</span> <span class="number">3px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h3 id="4-主应用程序类"><a href="#4-主应用程序类" class="headerlink" title="4. 主应用程序类"></a>4. 主应用程序类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-模板文件和静态资源文件的缓存问题"><a href="#5-模板文件和静态资源文件的缓存问题" class="headerlink" title="5. 模板文件和静态资源文件的缓存问题"></a>5. 模板文件和静态资源文件的缓存问题</h3><p>当修改 css、js 等静态资源文件的内容或模板文件的内容时，刷新客户端浏览器，发现内容还是老的，说明 Spring Boot 内置的 Servelt 容器并没有实时重新加载修改过的文件内容。你只能在每次修改静态资源文件时，虽然不需要重启服务，但是你要重新编译一次，IntelliJ IDEA 中按一次 Ctrl + F9 即可。<br>实现热加载（live reload）可参考：<a href="http://fanlychie.github.io/post/resolve-intellij-idea-spring-boot-template-reload-is-not-working.html" target="_blank" rel="external">解决 IntelliJ IDEA 无法热加载 Spring Boot 模板文件和静态资源文件</a></p>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-thymeleaf-sample" target="_blank" rel="external">spring-boot-thymeleaf-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#howto-use-thymeleaf-3" target="_blank" rel="external">howto-use-thymeleaf-3</a>、<a href="http://www.thymeleaf.org/doc/tutorials/3.0/usingthymeleaf.html" target="_blank" rel="external">usingthymeleaf</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 对 Thymeleaf 模板引擎提供了自配置的良好支持。Spring Boot 1.5.2.RELEASE 版本默认使用的是 Thymeleaf 2.0+，本文使用 Thymeleaf 3.0+ 版本，在 pom.xml 中添加以下声明：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;thymeleaf.version&lt;/span&gt;&amp;gt;&lt;/span&gt;3.0.5.RELEASE&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;thymeleaf.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;thymeleaf-layout-dialect.version&lt;/span&gt;&amp;gt;&lt;/span&gt;2.2.1&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;thymeleaf-layout-dialect.version&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;properties&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后添加 Thymeleaf 依赖声明：&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-thymeleaf&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>解决 IntelliJ IDEA 无法热加载 Spring Boot 模板文件和静态资源文件</title>
    <link href="http://yoursite.com/post/resolve-intellij-idea-spring-boot-template-reload-is-not-working.html"/>
    <id>http://yoursite.com/post/resolve-intellij-idea-spring-boot-template-reload-is-not-working.html</id>
    <published>2017-04-02T20:24:50.000Z</published>
    <updated>2017-07-16T13:04:24.357Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-IntelliJ-IDEA-配置"><a href="#1-IntelliJ-IDEA-配置" class="headerlink" title="1. IntelliJ IDEA 配置"></a>1. IntelliJ IDEA 配置</h3><p>快捷键<code>Ctrl + Alt + S</code>打开设置面板，勾选<code>Build project automatically</code>选项：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/idea-settings.png" alt="idea-settings"></p>
<a id="more"></a>
<p>快捷键<code>Ctrl + Shift + A</code>查找<code>registry</code>命令：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/registry.png" alt="registry"></p>
<p>在查找到的<code>registry</code>命令通过鼠标双击或敲回车键，在弹出的面板中搜索关键字<code>automake</code>，找到并勾选<code>compiler.automake.allow.when.app.running</code>选项：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/registry-automake.png" alt="registry-automake"></p>
<p>配置完成后，IntelliJ IDEA 可以热加载静态资源文件了。但是模板文件仍然还不能热加载。</p>
<h3 id="2-添加-Spring-Boot-Dev-Tools-支持"><a href="#2-添加-Spring-Boot-Dev-Tools-支持" class="headerlink" title="2. 添加 Spring Boot Dev Tools 支持"></a>2. 添加 Spring Boot Dev Tools 支持</h3><p>在 pom.xml 中添加如下依赖声明：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-devtools<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">optional</span>&gt;</span>true<span class="tag">&lt;/<span class="name">optional</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>Spring Boot Dev Tools 的作用：</p>
<ul>
<li>视图或资源的任何更改都可以直接在浏览器中看到，无需重新启动，只需刷新浏览器即可。</li>
<li>对代码的任何更改将自动重新启动 Spring 容器。</li>
</ul>
<p>至此，就可以完美的解决 IntelliJ IDEA 无法热加载模板文件和静态资源文件的问题了。并且，当你修改或编写 Java 代码时，也是能够热加载的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-IntelliJ-IDEA-配置&quot;&gt;&lt;a href=&quot;#1-IntelliJ-IDEA-配置&quot; class=&quot;headerlink&quot; title=&quot;1. IntelliJ IDEA 配置&quot;&gt;&lt;/a&gt;1. IntelliJ IDEA 配置&lt;/h3&gt;&lt;p&gt;快捷键&lt;code&gt;Ctrl + Alt + S&lt;/code&gt;打开设置面板，勾选&lt;code&gt;Build project automatically&lt;/code&gt;选项：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fanlychie/mdimg/master/idea-settings.png&quot; alt=&quot;idea-settings&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
