<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>範宗雲</title>
  <subtitle>面朝大海，望眼欲穿</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-08-27T11:30:26.936Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>範宗雲</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用 Jenkins 进行持续集成</title>
    <link href="http://yoursite.com/post/jenkins-guide.html"/>
    <id>http://yoursite.com/post/jenkins-guide.html</id>
    <published>2017-08-19T14:52:52.000Z</published>
    <updated>2017-08-27T11:30:26.936Z</updated>
    
    <content type="html"><![CDATA[<p>Jenkins 的前身是 Hudson，它是基于 Java 开发的一种持续集成（Continuous Integration，简称 CI）开源工具。用于持续交付、自动构建、测试、发布和监控等，无需过多的人工干预，利于提高开发的效率。</p>
<a id="more"></a>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>到 <a href="https://jenkins.io/" target="_blank" rel="external">Jenkins</a> 官网下载安装包 <a href="https://pkg.jenkins.io/redhat-stable/jenkins-2.60.3-1.1.noarch.rpm" target="_blank" rel="external">jenkins-2.60.3-1.1.noarch.rpm</a>。Jenkins 2.54 或以上的版本需要 JDK 8 或以上的版本作为运行时环境。如果你系统环境的 JDK 版本低于 8，请选用低于 2.54 的 Jenkins 安装包。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> rpm -ivh jenkins-1.628-1.1.noarch.rpm</span></div></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>目录</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>/usr/lib/jenkins/</td>
<td>war 包目录</td>
</tr>
<tr>
<td>/var/lib/jenkins/</td>
<td>默认的 JENKINS_HOME 目录</td>
</tr>
<tr>
<td>/var/log/jenkins/</td>
<td>日志文件目录</td>
</tr>
<tr>
<td>/etc/sysconfig/jenkins</td>
<td>配置文件</td>
</tr>
</tbody>
</table>
<h4 id="1-1-JDK-配置"><a href="#1-1-JDK-配置" class="headerlink" title="1.1 JDK 配置"></a>1.1 JDK 配置</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vi /etc/init.d/jenkins</span></div></pre></td></tr></table></figure>
<p>在 66 行附近找到 candidates 的配置：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">candidates="</div><div class="line">/etc/alternatives/java</div><div class="line">/usr/lib/jvm/java-1.8.0/bin/java</div><div class="line">/usr/lib/jvm/jre-1.8.0/bin/java</div><div class="line">/usr/lib/jvm/java-1.7.0/bin/java</div><div class="line">/usr/lib/jvm/jre-1.7.0/bin/java</div><div class="line">/usr/bin/java</div><div class="line">"</div></pre></td></tr></table></figure>
<p>将你机器的 JDK 安装目录下的 /bin/java 文件的路径添加到第一行，其余行也可以删掉：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">candidates="</div><div class="line">/usr/local/jdk1.8.0_144/bin/java</div><div class="line">"</div></pre></td></tr></table></figure>
<h4 id="1-2-端口配置（可选）："><a href="#1-2-端口配置（可选）：" class="headerlink" title="1.2 端口配置（可选）："></a>1.2 端口配置（可选）：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vi /etc/sysconfig/jenkins</span></div></pre></td></tr></table></figure>
<p>在 56 行，默认端口是 8080，可自行修改：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">JENKINS_PORT="8888"</div></pre></td></tr></table></figure>
<h4 id="1-3-用户配置"><a href="#1-3-用户配置" class="headerlink" title="1.3 用户配置"></a>1.3 用户配置</h4><p>Jenkins 安装时默认创建了一个名为 jenkins 的用户，为避免 Jenkins 运行时没有操作其他文件的权限，可修改为其他权限用户，比如 root：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"> vi /etc/sysconfig/jenkins</span></div></pre></td></tr></table></figure>
<p>在 29 行：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Type:        string</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># Default:     "jenkins"</span></span></div><div class="line"><span class="meta">#</span><span class="bash"><span class="comment"># ServiceRestart: jenkins</span></span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line"><span class="meta">#</span><span class="bash"> Unix user account that runs the Jenkins daemon</span></div><div class="line"><span class="meta">#</span><span class="bash"> Be careful when you change this, as you need to update</span></div><div class="line"><span class="meta">#</span><span class="bash"> permissions of <span class="variable">$JENKINS_HOME</span> and /var/<span class="built_in">log</span>/jenkins.</span></div><div class="line"><span class="meta">#</span><span class="bash"></span></div><div class="line">JENKINS_USER="root"</div></pre></td></tr></table></figure>
<h4 id="1-4-命令行"><a href="#1-4-命令行" class="headerlink" title="1.4 命令行"></a>1.4 命令行</h4><p>启动：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service jenkins start</div></pre></td></tr></table></figure>
<p>停止：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service jenkins stop</div></pre></td></tr></table></figure>
<p>重启：</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">service jenkins restart</div></pre></td></tr></table></figure>
<h4 id="1-5-启动应用"><a href="#1-5-启动应用" class="headerlink" title="1.5 启动应用"></a>1.5 启动应用</h4><p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_1.png" alt=""></p>
<p>第一次使用 Jenkins 时，它会自动生成一个随机的口令。你需要输入正确的口令才能进入系统。</p>
<figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash"> cat /var/lib/jenkins/secrets/initialAdminPassword</span></div></pre></td></tr></table></figure>
<p>复制并粘贴口令进入到安装界面：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_2.png" alt=""></p>
<p>选择第一项<code>Install suggested plugins</code>，等待安装完成。待安装完成之后，创建管理员账户：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_3.png" alt=""></p>
<p>至此，安装完成。</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_4.png" alt=""></p>
<h3 id="2-应用配置"><a href="#2-应用配置" class="headerlink" title="2. 应用配置"></a>2. 应用配置</h3><h4 id="2-1-JDK-配置"><a href="#2-1-JDK-配置" class="headerlink" title="2.1 JDK 配置"></a>2.1 JDK 配置</h4><p><code>系统管理 -&gt; Global Tool Configuration</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_5.png" alt=""></p>
<h4 id="2-2-Maven-配置"><a href="#2-2-Maven-配置" class="headerlink" title="2.2 Maven 配置"></a>2.2 Maven 配置</h4><p><code>系统管理 -&gt; Global Tool Configuration</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_7.png" alt=""></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_6.png" alt=""></p>
<h4 id="2-3-SVN-账户配置"><a href="#2-3-SVN-账户配置" class="headerlink" title="2.3 SVN 账户配置"></a>2.3 SVN 账户配置</h4><p><code>Credentials -&gt; global -&gt; Add Credentials</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_8.png" alt=""></p>
<h4 id="2-4-GIT-账户配置"><a href="#2-4-GIT-账户配置" class="headerlink" title="2.4 GIT 账户配置"></a>2.4 GIT 账户配置</h4><p><code>Credentials -&gt; global -&gt; Add Credentials</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_9.png" alt=""></p>
<h4 id="2-5-Maven-集成插件"><a href="#2-5-Maven-集成插件" class="headerlink" title="2.5 Maven 集成插件"></a>2.5 Maven 集成插件</h4><p><code>系统管理 -&gt; 管理插件 -&gt; Maven Integration plugin</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_10.png" alt=""></p>
<h4 id="2-6-发布插件"><a href="#2-6-发布插件" class="headerlink" title="2.6 发布插件"></a>2.6 发布插件</h4><p><code>系统管理 -&gt; 管理插件 -&gt; Deploy to container Plugin</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_11.png" alt=""></p>
<h3 id="3-创建任务"><a href="#3-创建任务" class="headerlink" title="3. 创建任务"></a>3. 创建任务</h3><p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_12.png" alt=""></p>
<h3 id="4-任务配置"><a href="#4-任务配置" class="headerlink" title="4. 任务配置"></a>4. 任务配置</h3><p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_13.png" alt=""></p>
<p>附 Shell 脚本源码：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#!/bin/bash</span></div><div class="line"> </div><div class="line"><span class="comment"># 必须, 否则Tomcat无法启动</span></div><div class="line"><span class="string">export</span> <span class="string">BUILD_ID=anything</span></div><div class="line"> </div><div class="line"><span class="comment"># 应用部署到的Tomcat的路径, 不同项目只需改变此参数即可</span></div><div class="line"><span class="string">app_tomcat_path=/home/fanlychie/application/helloworld-demo-tomcat</span></div><div class="line"> </div><div class="line"><span class="comment"># 工作区间</span></div><div class="line"><span class="string">workspace=$WORKSPACE</span></div><div class="line"> </div><div class="line"><span class="comment"># 应用的名称</span></div><div class="line"><span class="string">app_final_name=$&#123;workspace##*/&#125;</span></div><div class="line"> </div><div class="line"><span class="comment"># 应用Tomcat的名称, 用于查杀进程</span></div><div class="line"><span class="string">app_tomcat_name=$&#123;app_tomcat_path##*/&#125;</span></div><div class="line"> </div><div class="line"><span class="comment"># 应用包备份的目录</span></div><div class="line"><span class="string">app_backup_path=$app_tomcat_path/backup</span></div><div class="line"> </div><div class="line"><span class="comment"># 应用包备份的路径</span></div><div class="line"><span class="string">app_backup_pathname=$app_backup_path/`echo</span> <span class="string">| awk '&#123;print strftime("%Y-%m-%d-%H-%M-%S")&#125;'`</span></div><div class="line"> </div><div class="line"># 应用Tomcat的进程ID</div><div class="line">app_tomcat_process_id=`ps -ef | grep $app_tomcat_name | grep -v grep | awk '&#123;print $2&#125;'`</div><div class="line"> </div><div class="line"># 杀掉进程</div><div class="line">if [ $app_tomcat_process_id != "" ]; then</div><div class="line">    kill -9 $app_tomcat_process_id</div><div class="line">fi</div><div class="line"> </div><div class="line"># 创建备份目录</div><div class="line">if [ ! -d $app_backup_path ]; then</div><div class="line">    mkdir $app_backup_path</div><div class="line">fi</div><div class="line"> </div><div class="line"># 创建备份路径</div><div class="line">mkdir $app_backup_pathname</div><div class="line"> </div><div class="line"># 备份应用</div><div class="line">cp -r $app_tomcat_path/webapps/ROOT $app_backup_pathname</div><div class="line"> </div><div class="line"># 清空目录</div><div class="line">rm -rf $app_tomcat_path/webapps/ROOT/*</div><div class="line"> </div><div class="line"># 拷贝应用包</div><div class="line">cp -f $&#123;workspace&#125;/target/*.war $&#123;app_tomcat_path&#125;/webapps/ROOT</div><div class="line"> </div><div class="line"># 进入ROOT目录</div><div class="line">cd $&#123;app_tomcat_path&#125;/webapps/ROOT</div><div class="line"> </div><div class="line"># 解压缩应用包</div><div class="line">jar xvf *.war</div><div class="line"> </div><div class="line"># 删除应用包</div><div class="line">rm -f *.war</div><div class="line"> </div><div class="line"># 启动应用Tomcat服务</div><div class="line">$&#123;app_tomcat_path&#125;/bin/startup.sh</div></pre></td></tr></table></figure>
<h3 id="5-用户管理"><a href="#5-用户管理" class="headerlink" title="5. 用户管理"></a>5. 用户管理</h3><p><code>系统管理 -&gt; Configure Global Security</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_15.png" alt=""></p>
<p><code>系统管理 -&gt; 管理用户 -&gt; 新建用户</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/jenkins_14.png" alt=""></p>
<p>用户新建完成后再到<code>系统管理 -&gt; Configure Global Security</code>添加用户并配置权限。</p>
<blockquote>
<p>环境：Java-8、Maven-3、Tomcat-8、Jenkins-2.60.3、Centos-6</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Jenkins 的前身是 Hudson，它是基于 Java 开发的一种持续集成（Continuous Integration，简称 CI）开源工具。用于持续交付、自动构建、测试、发布和监控等，无需过多的人工干预，利于提高开发的效率。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Jenkins" scheme="http://yoursite.com/tags/Jenkins/"/>
    
  </entry>
  
  <entry>
    <title>dubbo 集群容错</title>
    <link href="http://yoursite.com/post/dubbo-cluster-fault-tolerance.html"/>
    <id>http://yoursite.com/post/dubbo-cluster-fault-tolerance.html</id>
    <published>2017-07-29T10:18:21.000Z</published>
    <updated>2017-07-30T10:08:01.956Z</updated>
    
    <content type="html"><![CDATA[<p>在集群调用失败时，dubbo 提供了多种可选的容错方案：</p>
<p><code>failover</code>、<code>failfast</code>、<code>failsafe</code>、<code>failback</code>、<code>forking</code>、<code>broadcast</code></p>
<a id="more"></a>
<h3 id="1-failover"><a href="#1-failover" class="headerlink" title="1. failover"></a>1. failover</h3><p>失败自动切换，当出现失败，重试其它服务器。通常用于读操作，但重试会带来更长延迟。</p>
<p>在缺省配置的情况下，dubbo 采用此方案作为默认的集群容错模式（可以通过<code>cluster</code>参数设置），并默认失败重试2次（不含第一次）调用其他的服务器（可以通过<code>retries</code>参数设置）。直至重试次数用完或调用成功为止。失败一次消费者调用方就会抛一个异常，但只要有一次调用是成功的，结果就是成功的。除非全部调用都失败了，结果才是失败的。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 服务提供者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 服务消费者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 服务消费者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:method</span> <span class="attr">name</span>=<span class="string">"findFoo"</span> <span class="attr">retries</span>=<span class="string">"2"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dubbo:reference</span>&gt;</span></div></pre></td></tr></table></figure>
<p>注解配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务提供者方的配置</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service(retries = <span class="number">2</span>)</div><div class="line"> </div><div class="line"><span class="comment">// 服务消费者方的配置</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Reference(retries = <span class="number">2</span>)</div></pre></td></tr></table></figure>
<h3 id="2-failfast"><a href="#2-failfast" class="headerlink" title="2. failfast"></a>2. failfast</h3><p>快速失败，只发起一次调用，失败立即报错。通常用于非幂等性的写操作，比如新增记录。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 服务提供者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">"failfast"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 服务消费者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">"failfast"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>注解配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务提供者方的配置（亲测不起作用）</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service(cluster = <span class="string">"failfast"</span>)</div><div class="line"> </div><div class="line"><span class="comment">// 服务消费者方的配置</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Reference(cluster = <span class="string">"failfast"</span>)</div></pre></td></tr></table></figure>
<h3 id="3-failsafe"><a href="#3-failsafe" class="headerlink" title="3. failsafe"></a>3. failsafe</h3><p>失败安全，出现异常时，直接忽略。通常用于写入审计日志等操作。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 服务提供者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 服务消费者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">"failsafe"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>注解配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务提供者方的配置（亲测不起作用）</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service(cluster = <span class="string">"failsafe"</span>)</div><div class="line"> </div><div class="line"><span class="comment">// 服务消费者方的配置</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Reference(cluster = <span class="string">"failsafe"</span>)</div></pre></td></tr></table></figure>
<h3 id="4-failback"><a href="#4-failback" class="headerlink" title="4. failback"></a>4. failback</h3><p>失败自动恢复，后台记录失败请求，定时重发。通常用于消息通知操作。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 服务提供者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">"failback"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 服务消费者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">"failback"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>注解配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务提供者方的配置（亲测不起作用）</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service(cluster = <span class="string">"failback"</span>)</div><div class="line"> </div><div class="line"><span class="comment">// 服务消费者方的配置</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Reference(cluster = <span class="string">"failback"</span>)</div></pre></td></tr></table></figure>
<h3 id="5-forking"><a href="#5-forking" class="headerlink" title="5. forking"></a>5. forking</h3><p>并行调用多个服务器，只要一个成功即返回。通常用于实时性要求较高的读操作，但需要浪费更多服务资源。可通过<code>forks=&quot;2&quot;</code>来设置最大并行数。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 服务提供者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">"forking"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 服务消费者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">"forking"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>注解配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务提供者方的配置（亲测不起作用）</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service(cluster = <span class="string">"forking"</span>)</div><div class="line"> </div><div class="line"><span class="comment">// 服务消费者方的配置</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Reference(cluster = <span class="string">"forking"</span>)</div></pre></td></tr></table></figure>
<h3 id="6-broadcast"><a href="#6-broadcast" class="headerlink" title="6. broadcast"></a>6. broadcast</h3><p>广播调用所有提供者，逐个调用，任意一台报错则报错。（2.1.0开始支持）通常用于通知所有提供者更新缓存或日志等本地资源信息。</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 服务提供者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">cluster</span>=<span class="string">"broadcast"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 服务消费者方的配置 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">cluster</span>=<span class="string">"broadcast"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>注解配置示例：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 服务提供者方的配置（亲测不起作用）</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Service(cluster = <span class="string">"broadcast"</span>)</div><div class="line"> </div><div class="line"><span class="comment">// 服务消费者方的配置</span></div><div class="line"><span class="meta">@com</span>.alibaba.dubbo.config.annotation.Reference(cluster = <span class="string">"broadcast"</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>参考文档文献链接：<a href="http://dubbo.io/user-guide/demos/集群容错.html" target="_blank" rel="external">dubbo集群容错</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在集群调用失败时，dubbo 提供了多种可选的容错方案：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;failover&lt;/code&gt;、&lt;code&gt;failfast&lt;/code&gt;、&lt;code&gt;failsafe&lt;/code&gt;、&lt;code&gt;failback&lt;/code&gt;、&lt;code&gt;forking&lt;/code&gt;、&lt;code&gt;broadcast&lt;/code&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Dubbo" scheme="http://yoursite.com/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>dubbo 关闭启动时检查解决服务之间调用的问题</title>
    <link href="http://yoursite.com/post/resolve-dubbo-services-call-situation.html"/>
    <id>http://yoursite.com/post/resolve-dubbo-services-call-situation.html</id>
    <published>2017-07-28T07:26:57.000Z</published>
    <updated>2017-07-28T12:47:41.218Z</updated>
    
    <content type="html"><![CDATA[<p>dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线前，能及早发现问题，默认<code>check=&quot;true&quot;</code>。</p>
<p>如果你的 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭检查，否则服务临时不可用时会抛出异常，拿到 null 引用，如果<code>check=&quot;false&quot;</code>，总是会返回引用，当服务恢复时，能自动连上。</p>
<p>比如对一些不关心的服务，或者服务之间出现了相互依赖必须有一方先启动时，你可以关闭检查避免异常。</p>
<a id="more"></a>
<h3 id="1-场景描述"><a href="#1-场景描述" class="headerlink" title="1. 场景描述"></a>1. 场景描述</h3><p>假设现有两个已知的服务：用户中心服务、订单中心服务。它们作为服务提供者分别向 dubbo 注册了自己。用户中心服务中的<code>UserServiceImpl</code>调用了订单中心服务的<code>OrderServiceImpl</code>，如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByUserIdAndOrderStatus</span><span class="params">(Integer userId, String orderStatus)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> OrderService orderService;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPaidOrdersById</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">        orderService.findByUserIdAndOrderStatus(id, <span class="string">"PAID"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-XML-配置方式"><a href="#2-XML-配置方式" class="headerlink" title="2. XML 配置方式"></a>2. XML 配置方式</h3><p>订单中心服务配置信息的代码片段：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 声明 Bean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"orderService"</span> <span class="attr">class</span>=<span class="string">"org.fanlychie.service.OrderServiceImpl"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"org.fanlychie.service.OrderService"</span> <span class="attr">ref</span>=<span class="string">"orderService"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p>用户中心服务配置信息的代码片段：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 声明引用的服务, check 设为 false 以关闭服务的启动时检查, 避免服务启动顺序引发的异常 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"orderService"</span> <span class="attr">interface</span>=<span class="string">"org.fanlychie.service.OrderService"</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 声明 Bean --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fanlychie.service.UserServiceImpl"</span>&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 声明依赖的服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"orderService"</span> <span class="attr">ref</span>=<span class="string">"orderService"</span> /&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line"> </div><div class="line"><span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"org.fanlychie.service.UserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span> /&gt;</span></div></pre></td></tr></table></figure>
<p><code>&lt;dubbo:reference&gt;</code>的 check 属性设为 false 以关闭服务的启动时检查，否则服务的启动顺序不当会直接导致服务启动不了。如<code>check=true</code>（默认）若先启动用户中心服务会报以下异常导致服务启动失败：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">java.lang.IllegalStateException: Failed to check the status of the service ...</div></pre></td></tr></table></figure>
<p>在用户心中调用订单中心的服务示例代码片段，相关的依赖需要通过 setter 方法注入：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> OrderService orderService;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPaidOrdersById</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">        orderService.findByUserIdAndOrderStatus(id, <span class="string">"PAID"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOrderService</span><span class="params">(OrderService orderService)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.orderService = orderService;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="3-注解的方式"><a href="#3-注解的方式" class="headerlink" title="3. 注解的方式"></a>3. 注解的方式</h3><p>订单中心的服务接口使用<code>com.alibaba.dubbo.config.annotation.@Service</code>注解直接暴露服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.service;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</div><div class="line"> </div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceImpl</span> <span class="keyword">implements</span> <span class="title">OrderService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findByUserIdAndOrderStatus</span><span class="params">(Integer userId, String orderStatus)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>用户中心的服务接口使用<code>com.alibaba.dubbo.config.annotation.@Service</code>注解暴露服务，并使用使用<code>com.alibaba.dubbo.config.annotation.@Reference</code>注解引用订单中心的接口服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.service;</div><div class="line"> </div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</div><div class="line"> </div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Reference</span></div><div class="line">    <span class="keyword">private</span> OrderService orderService;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findPaidOrdersById</span><span class="params">(Integer id)</span> </span>&#123;</div><div class="line">        <span class="comment">// do something</span></div><div class="line">        orderService.findByUserIdAndOrderStatus(id, <span class="string">"PAID"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>引用的服务的属性<code>check</code>应设为 false 以关闭服务的启动时检查，避免服务启动顺序引发的异常。使用注解<code>@Reference(check = false)</code>的方式是无效的，需要在调用方(本文为用户中心)的配置文件中添加：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">&lt;!-- 关闭引用服务的启动时检查 --&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dubbo:consumer</span> <span class="attr">check</span>=<span class="string">"false"</span> /&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>参考文档文献链接：<a href="http://dubbo.io/user-guide/demos/启动时检查.html" target="_blank" rel="external">启动时检查</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dubbo 缺省会在启动时检查依赖的服务是否可用，不可用时会抛出异常，阻止 Spring 初始化完成，以便上线前，能及早发现问题，默认&lt;code&gt;check=&amp;quot;true&amp;quot;&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;如果你的 Spring 容器是懒加载的，或者通过 API 编程延迟引用服务，请关闭检查，否则服务临时不可用时会抛出异常，拿到 null 引用，如果&lt;code&gt;check=&amp;quot;false&amp;quot;&lt;/code&gt;，总是会返回引用，当服务恢复时，能自动连上。&lt;/p&gt;
&lt;p&gt;比如对一些不关心的服务，或者服务之间出现了相互依赖必须有一方先启动时，你可以关闭检查避免异常。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Dubbo" scheme="http://yoursite.com/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>dubbo 注解方式整合 springmvc</title>
    <link href="http://yoursite.com/post/dubbo-annotation-with-springmvc.html"/>
    <id>http://yoursite.com/post/dubbo-annotation-with-springmvc.html</id>
    <published>2017-07-27T17:54:38.000Z</published>
    <updated>2017-07-28T10:18:24.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-项目结构"><a href="#1-项目结构" class="headerlink" title="1. 项目结构"></a>1. 项目结构</h3><p>创建一个 maven 多模块项目，结构如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dubbo-annotation-with-springmvc-sample（父模块）</div><div class="line">|</div><div class="line">|__ user-module-api（服务接口模块）</div><div class="line">|</div><div class="line">|__ user-module-provider（服务提供者）</div><div class="line">|</div><div class="line">|__ user-module-consumer（服务消费者）</div></pre></td></tr></table></figure>
<a id="more"></a>
<h4 id="1-1-父模块项目"><a href="#1-1-父模块项目" class="headerlink" title="1.1 父模块项目"></a>1.1 父模块项目</h4><p>dubbo-annotation-with-springmvc-sample/pom.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-annotation-with-springmvc-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-annotation-with-springmvc-sample<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Sample project for Dubbo<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-module-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-module-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- dubbo依赖的spring版本（2.5）较低, 排除此依赖, 使用自己的spring版本 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-2-服务接口模块"><a href="#1-2-服务接口模块" class="headerlink" title="1.2 服务接口模块"></a>1.2 服务接口模块</h4><p>user-module-api/pom.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-annotation-with-springmvc-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>编写注册用户的示例服务接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.service;</div><div class="line">    </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(String username, String password)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-服务提供者"><a href="#1-3-服务提供者" class="headerlink" title="1.3 服务提供者"></a>1.3 服务提供者</h4><p>user-module-provider/pom.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-annotation-with-springmvc-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>user-module-provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 打包配置, 输出可执行的 jar 包 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.alibaba.dubbo.container.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">appendAssemblyId</span>&gt;</span>false<span class="tag">&lt;/<span class="name">appendAssemblyId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现服务接口，使用<code>com.alibaba.dubbo.config.annotation.@Service</code>注解暴露服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.service;</div><div class="line">    </div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</div><div class="line">    </div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"---------------------------------------------------------"</span>);</div><div class="line">        System.out.println(String.format(<span class="string">"接收到注册用户请求 - &#123;username:%s, password:%s&#125;"</span>,</div><div class="line">                username, password));</div><div class="line">        System.out.println(<span class="string">"---------------------------------------------------------"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>user-module-provider/src/main/resources/dubbo.properties 配置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">dubbo.spring.config=classpath:spring-dubbo-provider.xml</div></pre></td></tr></table></figure>
<p>user-module-provider/src/main/resources/spring-dubbo-provider.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo</div><div class="line">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-module-provider"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 使用ZK注册中心暴露服务地址 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 用Dubbo协议在20880端口暴露服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 扫描注解包路径，多个包用逗号分隔 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"org.fanlychie.service"</span>/&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-module-provider/src/main/resources/log4j.properties 配置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">log4j.rootCategory = INFO, console</div><div class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.console.target = System.out</div><div class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.console.layout.conversionPattern = %d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125; [%t] %-<span class="number">5</span>p [%c&#123;<span class="number">1</span>&#125;:%L] - %m%n</div></pre></td></tr></table></figure>
<h4 id="1-4-服务消费者"><a href="#1-4-服务消费者" class="headerlink" title="1.4 服务消费者"></a>1.4 服务消费者</h4><p>user-module-consumer/pom.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-annotation-with-springmvc-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>user-module-consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>autosellrobot-wechat<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/html<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>服务消费者使用<code>com.alibaba.dubbo.config.annotation.@Reference</code>注解引用接口服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</div><div class="line"><span class="keyword">import</span> org.fanlychie.service.UserService;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line">    </div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Reference</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/register"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!StringUtils.hasText(username) || !StringUtils.hasText(password)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"用户名或密码不能为空"</span>;</div><div class="line">        &#125;</div><div class="line">        userService.register(username, password);</div><div class="line">        <span class="keyword">return</span> <span class="string">"注册完成"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>user-module-consumer/src/main/webapp/WEB-INF/web.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-module-consumer/src/main/resources/log4j.properties 配置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">log4j.rootCategory = INFO, console</div><div class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.console.target = System.out</div><div class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.console.layout.conversionPattern = %d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125; [%t] %-<span class="number">5</span>p [%c&#123;<span class="number">1</span>&#125;:%L] - %m%n</div></pre></td></tr></table></figure>
<p>user-module-consumer/src/main/resources/spring-context.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/context</div><div class="line">       http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.fanlychie"</span>/&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-module-consumer/src/main/resources/spring-mvc.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/context</div><div class="line">       http://www.springframework.org/schema/context/spring-context.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo</div><div class="line">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-module-consumer"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 使用ZK注册中心暴露服务地址 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 扫描注解包路径，多个包用逗号分隔 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"org.fanlychie.controller"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useSuffixPatternMatch"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useTrailingSlashMatch"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringHttpMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/xml;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappingJackson2HttpMessageConverter"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefixJson"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/xml;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stringHttpMessageConverter"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mappingJackson2HttpMessageConverter"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.fanlychie.**.controller"</span>/&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>服务消费者方 dubbo 注解扫描配置的信息不能独立出 springmvc 配置文件，否则<code>@Reference</code>注解引用的接口实例会出现 Null 的状况。</p>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring-4.7、Dubbo-2.5.3<br>完整示例项目链接：<a href="https://github.com/fanlychie/dubbo-samples/tree/master/dubbo-annotation-with-springmvc-sample" target="_blank" rel="external">dubbo-annotation-with-springmvc-sample</a><br>参考文档文献链接：<a href="http://dubbo.io/user-guide/" target="_blank" rel="external">dubbo用户指南</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-项目结构&quot;&gt;&lt;a href=&quot;#1-项目结构&quot; class=&quot;headerlink&quot; title=&quot;1. 项目结构&quot;&gt;&lt;/a&gt;1. 项目结构&lt;/h3&gt;&lt;p&gt;创建一个 maven 多模块项目，结构如下：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;dubbo-annotation-with-springmvc-sample（父模块）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|__ user-module-api（服务接口模块）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|__ user-module-provider（服务提供者）&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;|__ user-module-consumer（服务消费者）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Dubbo" scheme="http://yoursite.com/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>dubbo 配置方式</title>
    <link href="http://yoursite.com/post/dubbo-configurations.html"/>
    <id>http://yoursite.com/post/dubbo-configurations.html</id>
    <published>2017-07-27T08:12:08.000Z</published>
    <updated>2017-07-28T10:18:07.961Z</updated>
    
    <content type="html"><![CDATA[<p>dubbo 提供了4种服务配置的方式，它们分别是：XML 配置、属性配置、注解配置、API 配置（官方不推荐 API 配置的方式）。本文只介绍前三种，API 配置方式可<a href="http://dubbo.io/user-guide/configuration/api.html" target="_blank" rel="external">点此前往官方文档查看API配置</a>。</p>
<a id="more"></a>
<h3 id="1-XML-配置"><a href="#1-XML-配置" class="headerlink" title="1. XML 配置"></a>1. XML 配置</h3><p>配置参考手册：</p>
<table>
<thead>
<tr>
<th>标签</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-service.html" target="_blank" rel="external"><code>&lt;dubbo:service&gt;</code></a></td>
<td>服务提供者暴露服务配置，用于定义服务的元信息，一个服务可以用多个协议暴露，一个服务也可以注册到多个注册中心。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-protocol.html" target="_blank" rel="external"><code>&lt;dubbo:protocol&gt;</code></a></td>
<td>服务提供者协议配置，用于配置提供服务的协议信息，协议由提供方指定，消费方被动接受。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-reference.html" target="_blank" rel="external"><code>&lt;dubbo:reference&gt;</code></a></td>
<td>服务消费者引用服务配置，用于创建一个远程服务代理，一个引用可以指向多个注册中心。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-registry.html" target="_blank" rel="external"><code>&lt;dubbo:registry&gt;</code></a></td>
<td>注册中心配置，用于配置连接注册中心相关信息。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-application.html" target="_blank" rel="external"><code>&lt;dubbo:application&gt;</code></a></td>
<td>应用配置，用于配置当前应用信息，不管该应用是提供者还是消费者。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-module.html" target="_blank" rel="external"><code>&lt;dubbo:module&gt;</code></a></td>
<td>模块配置，用于配置当前模块信息，可选。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-monitor.html" target="_blank" rel="external"><code>&lt;dubbo:monitor&gt;</code></a></td>
<td>监控中心配置，用于配置连接监控中心相关信息，可选。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-provider.html" target="_blank" rel="external"><code>&lt;dubbo:provider&gt;</code></a></td>
<td>服务提供者缺省值配置，当 ProtocolConfig 和 ServiceConfig 某属性没有配置时，采用此缺省值，可选。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-consumer.html" target="_blank" rel="external"><code>&lt;dubbo:consumer&gt;</code></a></td>
<td>服务消费者缺省值配置，当 ReferenceConfig 某属性没有配置时，采用此缺省值，可选。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-method.html" target="_blank" rel="external"><code>&lt;dubbo:method&gt;</code></a></td>
<td>方法配置，用于 ServiceConfig 和 ReferenceConfig 指定方法级的配置信息。</td>
</tr>
<tr>
<td><a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-argument.html" target="_blank" rel="external"><code>&lt;dubbo:argument&gt;</code></a></td>
<td>方法参数配置。</td>
</tr>
</tbody>
</table>
<p>注：标签属性只有<code>group</code>,<code>interface</code>,<code>version</code>是服务的匹配条件，三者用于共同决定是否是同一个服务，其它属性配置项均为调优和治理参数。</p>
<h4 id="1-1-dubbo-service"><a href="#1-1-dubbo-service" class="headerlink" title="1.1 dubbo:service"></a>1.1 dubbo:service</h4><p>必填属性参考列表（更多可选参数可<a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-service.html" target="_blank" rel="external">点此前往官方文档</a>查看）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">interface</td>
<td style="text-align:center">class</td>
<td style="text-align:center">服务接口名</td>
</tr>
<tr>
<td style="text-align:center">ref</td>
<td style="text-align:center">object</td>
<td style="text-align:center">服务对象实现引用</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"org.fanlychie.service.UserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></div><div class="line"> </div><div class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fanlychie.service.UserServiceImpl"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-2-dubbo-protocol"><a href="#1-2-dubbo-protocol" class="headerlink" title="1.2 dubbo:protocol"></a>1.2 dubbo:protocol</h4><p>必填属性参考列表（更多可选参数可<a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-protocol.html" target="_blank" rel="external">点此前往官方文档</a>查看）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">string</td>
<td style="text-align:center">协议名称</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>dubbo 支持的协议有：<code>dubbo</code>、<code>rmi</code>、<code>hessian</code>、<code>http</code>、<code>webservice</code>、<code>thrift</code>、<code>redis</code>、<code>memcached</code>。各个协议的介绍和使用场景可<a href="http://dubbo.io/user-guide/reference-protocol/introduction.html" target="_blank" rel="external">点此前往官方文档查看协议参考手册</a>。</p>
<h4 id="1-3-dubbo-reference"><a href="#1-3-dubbo-reference" class="headerlink" title="1.3 dubbo:reference"></a>1.3 dubbo:reference</h4><p>必填属性参考列表（更多可选参数可<a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-reference.html" target="_blank" rel="external">点此前往官方文档</a>查看）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">类型</th>
<th style="text-align:center">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">id</td>
<td style="text-align:center">string</td>
<td style="text-align:center">服务引用的 Bean ID</td>
</tr>
<tr>
<td style="text-align:center">interface</td>
<td style="text-align:center">class</td>
<td style="text-align:center">服务接口名</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"org.fanlychie.service.UserService"</span> /&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-4-dubbo-registry"><a href="#1-4-dubbo-registry" class="headerlink" title="1.4 dubbo:registry"></a>1.4 dubbo:registry</h4><p>必填属性参考列表（更多可选参数可<a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-registry.html" target="_blank" rel="external">点此前往官方文档</a>查看）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">address</td>
<td style="text-align:center">string</td>
<td style="text-align:left">注册中心服务器地址，如果地址没有端口缺省为 9090，同一集群内的多个地址用逗号分隔，如：ip:port,ip:port，不同集群的注册中心，请配置多个<code>&lt;dubbo:registry&gt;</code> 标签</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></div></pre></td></tr></table></figure>
<p>dubbo 提供支持的服务注册中心有：<code>multicast</code>、<code>zookeeper</code>、<code>redis</code>、<code>simple</code>。官方推荐你使用<code>zookeeper</code>注册中心，详细信息可<a href="http://dubbo.io/user-guide/reference-registry/introduction.html" target="_blank" rel="external">点此前往官方文档查看注册中心参考手册</a>。</p>
<h4 id="1-5-dubbo-application"><a href="#1-5-dubbo-application" class="headerlink" title="1.5 dubbo:application"></a>1.5 dubbo:application</h4><p>必填属性参考列表（更多可选参数可<a href="http://dubbo.io/user-guide/reference-xmlconf/dubbo-application.html" target="_blank" rel="external">点此前往官方文档</a>查看）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">属性名称</th>
<th style="text-align:center">类型</th>
<th style="text-align:left">描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td style="text-align:center">string</td>
<td style="text-align:left">当前应用名称，用于注册中心计算应用间依赖关系，注意：消费者和提供者应用名不要一样，此参数不是匹配条件，你当前项目叫什么名字就填什么，和提供者消费者角色无关</td>
</tr>
</tbody>
</table>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-module-provider"</span>/&gt;</span></div></pre></td></tr></table></figure>
<h3 id="2-属性配置"><a href="#2-属性配置" class="headerlink" title="2. 属性配置"></a>2. 属性配置</h3><p>如果公共配置很简单，没有多注册中心，多协议等情况，或者想多个 Spring 容器想共享配置，可以使用 dubbo.properties 作为缺省配置。dubbo 将自动加载类路径下的 dubbo.properties，可以通过 JVM 启动参数：<code>-Ddubbo.properties.file=xxx.properties</code>改变缺省配置位置。如果类路径下存在多个 dubbo.properties，比如多个 jar 包中有 dubbo.properties，dubbo 会任意加载，并打印 Error 日志，后续可能改为抛异常。</p>
<h4 id="2-1-映射规则"><a href="#2-1-映射规则" class="headerlink" title="2.1 映射规则"></a>2.1 映射规则</h4><ul>
<li>将 XML 配置的标签名，加属性名，用点分隔，多个属性拆成多行：<ul>
<li>比如 dubbo.application.name=foo 等价于：<br><code>&lt;dubbo:application name=&quot;foo&quot;/&gt;</code></li>
</ul>
</li>
<li>如果 XML 有多行同名标签配置，可用 id 号区分，如果没有 id 号将对所有同名标签生效：<ul>
<li>比如 dubbo.protocol.rmi.port=1234 等价于：<br><code>&lt;dubbo:protocol id=&quot;rmi&quot; name=&quot;rmi&quot; port=&quot;1099&quot;/&gt;</code></li>
<li>比如 dubbo.registry.china.address=10.20.153.10:9090 等价于：<br><code>&lt;dubbo:registry id=&quot;china&quot; address=&quot;10.20.153.10:9090&quot;/&gt;</code></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">dubbo.application.name=foo</div><div class="line">dubbo.application.owner=bar</div><div class="line">dubbo.registry.address=<span class="number">10.20</span>.153.10:<span class="number">9090</span></div></pre></td></tr></table></figure>
<h4 id="2-2-覆盖策略"><a href="#2-2-覆盖策略" class="headerlink" title="2.2 覆盖策略"></a>2.2 覆盖策略</h4><p>JVM 启动 -D 参数优先，这样可以使用户在部署和启动时进行参数重写，比如在启动时需改变协议的端口。<br>XML 次之，如果在 XML 中有配置，则 dubbo.properties 中的相应配置项无效。<br>Properties 最后，相当于缺省值，只有 XML 没有配置时，dubbo.properties 的相应配置项才会生效，通常用于共享公共配置，比如应用名。</p>
<h3 id="3-注解配置"><a href="#3-注解配置" class="headerlink" title="3. 注解配置"></a>3. 注解配置</h3><p>dubbo 2.2.1 以上的版本支持注解配置。</p>
<h4 id="3-1-服务提供者"><a href="#3-1-服务提供者" class="headerlink" title="3.1 服务提供者"></a>3.1 服务提供者</h4><p>服务提供者使用<code>com.alibaba.dubbo.config.annotation.@Service</code>注解暴露服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.service;</div><div class="line">    </div><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Service;</div><div class="line">    </div><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"---------------------------------------------------------"</span>);</div><div class="line">        System.out.println(String.format(<span class="string">"接收到注册用户请求 - &#123;username:%s, password:%s&#125;"</span>,</div><div class="line">                username, password));</div><div class="line">        System.out.println(<span class="string">"---------------------------------------------------------"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务提供者使用<code>&lt;dubbo:annotation&gt;</code>配置扫描的包路径，多个包用逗号分隔：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo</div><div class="line">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-module-provider"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"org.fanlychie.service"</span>/&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="3-2-服务消费者"><a href="#3-2-服务消费者" class="headerlink" title="3.2 服务消费者"></a>3.2 服务消费者</h4><p>服务消费者使用<code>com.alibaba.dubbo.config.annotation.@Reference</code>注解引用接口服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> com.alibaba.dubbo.config.annotation.Reference;</div><div class="line"><span class="keyword">import</span> org.fanlychie.service.UserService;</div><div class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</div><div class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</div><div class="line">    </div><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Reference</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/register"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!StringUtils.hasText(username) || !StringUtils.hasText(password)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"用户名或密码不能为空"</span>;</div><div class="line">        &#125;</div><div class="line">        userService.register(username, password);</div><div class="line">        <span class="keyword">return</span> <span class="string">"注册完成"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>服务消费者<code>&lt;dubbo:annotation&gt;</code>配置扫描的包路径，多个包用逗号分隔：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo</div><div class="line">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-module-consumer"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:annotation</span> <span class="attr">package</span>=<span class="string">"org.fanlychie.controller"</span>/&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<blockquote>
<p>参考文档文献链接：<a href="http://dubbo.io/user-guide/" target="_blank" rel="external">dubbo用户指南</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dubbo 提供了4种服务配置的方式，它们分别是：XML 配置、属性配置、注解配置、API 配置（官方不推荐 API 配置的方式）。本文只介绍前三种，API 配置方式可&lt;a href=&quot;http://dubbo.io/user-guide/configuration/api.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;点此前往官方文档查看API配置&lt;/a&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Dubbo" scheme="http://yoursite.com/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>dubbo 快速入门</title>
    <link href="http://yoursite.com/post/dubbo-quickstart.html"/>
    <id>http://yoursite.com/post/dubbo-quickstart.html</id>
    <published>2017-07-26T10:30:38.000Z</published>
    <updated>2017-07-28T10:25:28.027Z</updated>
    
    <content type="html"><![CDATA[<p>dubbo 是一个分布式服务框架，致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案。它采用全 Spring 配置方式，透明化接入应用，对应用没有任何API侵入，只需用 Spring 加载 dubbo 的配置即可。如需了解更多相关信息可前往官方文档<a href="http://dubbo.io/user-guide/" target="_blank" rel="external">用户指南</a>部分的介绍。</p>
<a id="more"></a>
<h3 id="1-创建项目"><a href="#1-创建项目" class="headerlink" title="1. 创建项目"></a>1. 创建项目</h3><p>创建一个 maven 多模块项目，结构如下：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">dubbo-quickstart-sample（父模块）</div><div class="line">|</div><div class="line">|__ user-module-api（服务接口模块）</div><div class="line">|</div><div class="line">|__ user-module-provider（服务提供者）</div><div class="line">|</div><div class="line">|__ user-module-consumer（服务消费者）</div></pre></td></tr></table></figure>
<h4 id="1-1-父模块项目"><a href="#1-1-父模块项目" class="headerlink" title="1.1 父模块项目"></a>1.1 父模块项目</h4><p>dubbo-quickstart-sample/pom.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-quickstart-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>dubbo-quickstart-sample<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>Sample project for Dubbo<span class="tag">&lt;/<span class="name">description</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">modules</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-module-provider<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">module</span>&gt;</span>user-module-consumer<span class="tag">&lt;/<span class="name">module</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">modules</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">properties</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dubbo.version</span>&gt;</span>2.5.3<span class="tag">&lt;/<span class="name">dubbo.version</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">spring.version</span>&gt;</span>4.3.7.RELEASE<span class="tag">&lt;/<span class="name">spring.version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;project.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="comment">&lt;!-- dubbo依赖的spring版本（2.5）较低, 排除此依赖, 使用自己的spring版本 --&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;dubbo.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<h4 id="1-2-服务接口模块"><a href="#1-2-服务接口模块" class="headerlink" title="1.2 服务接口模块"></a>1.2 服务接口模块</h4><p>user-module-api/pom.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-quickstart-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>编写注册用户的示例服务接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.service;</div><div class="line">    </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">void</span> <span class="title">register</span><span class="params">(String username, String password)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-服务提供者"><a href="#1-3-服务提供者" class="headerlink" title="1.3 服务提供者"></a>1.3 服务提供者</h4><p>user-module-provider/pom.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-quickstart-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-provider<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>jar<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>user-module-provider<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-context<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="comment">&lt;!-- 打包配置, 输出可执行的 jar 包 --&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></div><div class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.alibaba.dubbo.container.Main<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">descriptorRefs</span>&gt;</span></div><div class="line">                        <span class="tag">&lt;<span class="name">descriptorRef</span>&gt;</span>jar-with-dependencies<span class="tag">&lt;/<span class="name">descriptorRef</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;/<span class="name">descriptorRefs</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>实现服务接口：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.service;</div><div class="line">    </div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">register</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"---------------------------------------------------------"</span>);</div><div class="line">        System.out.println(String.format(<span class="string">"接收到注册用户请求 - &#123;username:%s, password:%s&#125;"</span>,</div><div class="line">                username, password));</div><div class="line">        System.out.println(<span class="string">"---------------------------------------------------------"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>user-module-provider/src/main/resources/dubbo.properties 配置如下：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"># 服务容器</div><div class="line">dubbo.container=spring</div><div class="line"># 容器加载的 spring 配置文件</div><div class="line">dubbo.spring.config=classpath:spring-dubbo-provider.xml</div></pre></td></tr></table></figure>
<p>user-module-provider/src/main/resources/spring-dubbo-provider.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo</div><div class="line">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-module-provider"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 使用ZK注册中心暴露服务地址 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 用Dubbo协议在20880端口暴露服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:protocol</span> <span class="attr">name</span>=<span class="string">"dubbo"</span> <span class="attr">port</span>=<span class="string">"20880"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 和本地Bean一样实现服务 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">class</span>=<span class="string">"org.fanlychie.service.UserServiceImpl"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 声明需要暴露的服务接口 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:service</span> <span class="attr">interface</span>=<span class="string">"org.fanlychie.service.UserService"</span> <span class="attr">ref</span>=<span class="string">"userService"</span>/&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-module-provider/src/main/resources/log4j.properties 配置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">log4j.rootCategory = INFO, console</div><div class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.console.target = System.out</div><div class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.console.layout.conversionPattern = %d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125; [%t] %-<span class="number">5</span>p [%c&#123;<span class="number">1</span>&#125;:%L] - %m%n</div></pre></td></tr></table></figure>
<h4 id="1-4-服务消费者"><a href="#1-4-服务消费者" class="headerlink" title="1.4 服务消费者"></a>1.4 服务消费者</h4><p>user-module-consumer/pom.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></div><div class="line">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd"</span>&gt;</div><div class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo-quickstart-sample<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-consumer<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">name</span>&gt;</span>user-module-consumer<span class="tag">&lt;/<span class="name">name</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.apache.org<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.fanlychie<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>user-module-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.alibaba<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dubbo<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-webmvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.fasterxml.jackson.core<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jackson-databind<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.101tec<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>zkclient<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">build</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>autosellrobot-wechat<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.maven<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat7-maven-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">path</span>&gt;</span>/<span class="tag">&lt;/<span class="name">path</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">port</span>&gt;</span>8080<span class="tag">&lt;/<span class="name">port</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">uriEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">uriEncoding</span>&gt;</span></div><div class="line">                    <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://localhost:8080/manager/html<span class="tag">&lt;/<span class="name">url</span>&gt;</span></div><div class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></div></pre></td></tr></table></figure>
<p>编写用户注册的服务方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserService userService;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/user/register"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">register</span><span class="params">(String username, String password)</span> </span>&#123;</div><div class="line">        <span class="keyword">if</span> (!StringUtils.hasText(username) || !StringUtils.hasText(password)) &#123;</div><div class="line">            <span class="keyword">return</span> <span class="string">"用户名或密码不能为空"</span>;</div><div class="line">        &#125;</div><div class="line">        userService.register(username, password);</div><div class="line">        <span class="keyword">return</span> <span class="string">"注册完成"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>user-module-consumer/src/main/webapp/WEB-INF/web.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">version</span>=<span class="string">"2.5"</span> <span class="attr">xmlns</span>=<span class="string">"http://java.sun.com/xml/ns/javaee"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-context.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.util.IntrospectorCleanupListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.request.RequestContextListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">listener</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">listener-class</span>&gt;</span>org.springframework.web.context.ContextLoaderListener<span class="tag">&lt;/<span class="name">listener-class</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">listener</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">filter</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>org.springframework.web.filter.CharacterEncodingFilter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>encoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>forceEncoding<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>true<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>encodingFilter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">servlet</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">init-param</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>contextConfigLocation<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>classpath:spring-mvc.xml<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">init-param</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">load-on-startup</span>&gt;</span>1<span class="tag">&lt;/<span class="name">load-on-startup</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>dispatcherServlet<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-module-consumer/src/main/resources/spring-context.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/context</div><div class="line">       http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context:annotation-config</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.fanlychie"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">import</span> <span class="attr">resource</span>=<span class="string">"spring-dubbo-consumer.xml"</span>/&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-module-consumer/src/main/resources/spring-dubbo-consumer.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://code.alibabatech.com/schema/dubbo</div><div class="line">       http://code.alibabatech.com/schema/dubbo/dubbo.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 提供方应用信息，用于计算依赖关系 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:application</span> <span class="attr">name</span>=<span class="string">"user-module-consumer"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 使用ZK注册中心暴露服务地址 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:registry</span> <span class="attr">address</span>=<span class="string">"zookeeper://127.0.0.1:2181"</span>/&gt;</span></div><div class="line">    </div><div class="line">    <span class="comment">&lt;!-- 生成远程服务代理，可以和本地Bean一样使用 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">dubbo:reference</span> <span class="attr">id</span>=<span class="string">"userService"</span> <span class="attr">interface</span>=<span class="string">"org.fanlychie.service.UserService"</span> /&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-module-consumer/src/main/resources/spring-mvc.xml 配置如下：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></div><div class="line">       <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></div><div class="line">       <span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></div><div class="line">       <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans</span></div><div class="line">       http://www.springframework.org/schema/beans/spring-beans.xsd</div><div class="line">       http://www.springframework.org/schema/context</div><div class="line">       http://www.springframework.org/schema/context/spring-context.xsd"&gt;</div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useSuffixPatternMatch"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"useTrailingSlashMatch"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"stringHttpMessageConverter"</span> <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.StringHttpMessageConverter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">value</span>=<span class="string">"UTF-8"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/xml;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"mappingJackson2HttpMessageConverter"</span></span></div><div class="line">          <span class="attr">class</span>=<span class="string">"org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"</span>&gt;</div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"prefixJson"</span> <span class="attr">value</span>=<span class="string">"false"</span>/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"supportedMediaTypes"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>text/html;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/xml;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">value</span>&gt;</span>application/json;charset=utf-8<span class="tag">&lt;/<span class="name">value</span>&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"messageConverters"</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">list</span>&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"stringHttpMessageConverter"</span>/&gt;</span></div><div class="line">                <span class="tag">&lt;<span class="name">ref</span> <span class="attr">bean</span>=<span class="string">"mappingJackson2HttpMessageConverter"</span>/&gt;</span></div><div class="line">            <span class="tag">&lt;/<span class="name">list</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">property</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></div><div class="line">    </div><div class="line">    <span class="tag">&lt;<span class="name">context:component-scan</span> <span class="attr">base-package</span>=<span class="string">"org.fanlychie.**.controller"</span>/&gt;</span></div><div class="line">    </div><div class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-module-consumer/src/main/resources/log4j.properties 配置如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">log4j.rootCategory = INFO, console</div><div class="line">log4j.appender.console = org.apache.log4j.ConsoleAppender</div><div class="line">log4j.appender.console.target = System.out</div><div class="line">log4j.appender.console.layout = org.apache.log4j.PatternLayout</div><div class="line">log4j.appender.console.layout.conversionPattern = %d&#123;yyyy-MM-dd HH:mm:ss:SSS&#125; [%t] %-<span class="number">5</span>p [%c&#123;<span class="number">1</span>&#125;:%L] - %m%n</div></pre></td></tr></table></figure>
<h3 id="2-启动服务"><a href="#2-启动服务" class="headerlink" title="2. 启动服务"></a>2. 启动服务</h3><p>首先需要先启动 zookeeper 服务（可参考<a href="http://fanlychie.github.io/post/zookeeper-setup.html" target="_blank" rel="external">Zookeeper安装和配置</a>），再启动 dubbo-admin 应用（可选，可参考<a href="http://fanlychie.github.io/post/dubbo-admin-setup.html" target="_blank" rel="external">dubbo-admin管理控制台应用安装</a>）。</p>
<h4 id="2-1-启动服务提供者"><a href="#2-1-启动服务提供者" class="headerlink" title="2.1 启动服务提供者"></a>2.1 启动服务提供者</h4><p>本示例将启用2个服务提供者的实例，并使用 dubbo 提供的<code>com.alibaba.dubbo.container.Main</code>启动类来启动服务提供者的实例。下面介绍3种较为常用的启动命令。</p>
<h5 id="2-1-1-maven-命令启动"><a href="#2-1-1-maven-命令启动" class="headerlink" title="2.1.1 maven 命令启动"></a>2.1.1 maven 命令启动</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动第一个实例, 端口 20881</span></div><div class="line">&gt; mvn <span class="built_in">exec</span>:java -Ddubbo.protocol.port=20881 -Dexec.mainClass=com.alibaba.dubbo.container.Main</div><div class="line"><span class="comment"># 启动第二个实例, 端口 20882</span></div><div class="line">&gt; mvn <span class="built_in">exec</span>:java -Ddubbo.protocol.port=20882 -Dexec.mainClass=com.alibaba.dubbo.container.Main</div></pre></td></tr></table></figure>
<h5 id="2-1-2-application-启动"><a href="#2-1-2-application-启动" class="headerlink" title="2.1.2 application 启动"></a>2.1.2 application 启动</h5><p>以开发工具 IntelliJ IDEA 为例，<code>Run -&gt; Edit Configurations</code>添加一个 Application，配置如下：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/intellij-provider-application.png" alt=""></p>
<h5 id="2-1-3-jar-包启动"><a href="#2-1-3-jar-包启动" class="headerlink" title="2.1.3 jar 包启动"></a>2.1.3 jar 包启动</h5><p>在父模块项目 dubbo-quickstart-sample 根目录下执行打包命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&gt; mvn package</div></pre></td></tr></table></figure>
<p>执行完成之后，在 dubbo-quickstart-sample/user-module-provider/target 目录下将得到一个可执行的 jar 包：<code>user-module-provider-0.0.1-SNAPSHOT.jar</code>。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动第一个实例, 端口 20881</span></div><div class="line">&gt; java -jar -Ddubbo.protocol.port=20881 user-module-provider-0.0.1-SNAPSHOT.jar</div><div class="line"><span class="comment"># 启动第二个实例, 端口 20882</span></div><div class="line">&gt; java -jar -Ddubbo.protocol.port=20882 user-module-provider-0.0.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<h4 id="2-2-启动服务消费者"><a href="#2-2-启动服务消费者" class="headerlink" title="2.2 启动服务消费者"></a>2.2 启动服务消费者</h4><p>服务消费者 user-module-consumer 是一个 web 项目，使用内置 tomcat 容器或部署到外部的 tomcat 运行即可。</p>
<p>如使用内置 tomcat 插件启动的 maven 命令：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/intellij-consumer.png" alt=""></p>
<h3 id="3-访问服务"><a href="#3-访问服务" class="headerlink" title="3. 访问服务"></a>3. 访问服务</h3><p>访问地址：<code>http://localhost:8080/user/register?username=fanlychie&amp;password=123456</code>可在服务提供者的控制台查看相关的输出信息。你也可以在 dubbo-admin 应用查看和管理相关的服务：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/dubbo-admin-host.png" alt=""></p>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring-4.7、Dubbo-2.5.3<br>完整示例项目链接：<a href="https://github.com/fanlychie/dubbo-samples/tree/master/dubbo-quickstart-sample" target="_blank" rel="external">dubbo-quickstart-sample</a><br>参考文档文献链接：<a href="http://dubbo.io/user-guide/" target="_blank" rel="external">dubbo用户指南</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dubbo 是一个分布式服务框架，致力于提供高性能和透明化的 RPC 远程服务调用方案，以及 SOA 服务治理方案。它采用全 Spring 配置方式，透明化接入应用，对应用没有任何API侵入，只需用 Spring 加载 dubbo 的配置即可。如需了解更多相关信息可前往官方文档&lt;a href=&quot;http://dubbo.io/user-guide/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;用户指南&lt;/a&gt;部分的介绍。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Dubbo" scheme="http://yoursite.com/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>dubbo-admin 管理控制台应用安装</title>
    <link href="http://yoursite.com/post/dubbo-admin-setup.html"/>
    <id>http://yoursite.com/post/dubbo-admin-setup.html</id>
    <published>2017-07-25T14:20:38.000Z</published>
    <updated>2017-07-26T10:27:51.984Z</updated>
    
    <content type="html"><![CDATA[<p>dubbo 管理控制台是其内部裁剪版本，开源部分主要包含：路由规则，动态配置，服务降级，访问控制，权重调整，负载均衡，等管理功能。</p>
<h3 id="1-安装应用"><a href="#1-安装应用" class="headerlink" title="1. 安装应用"></a>1. 安装应用</h3><p>目前最新的发布版本为 2.5.3，但由于仓库问题下载不了依赖包，亲测主分支代码可以编译通过。首先下载最新的源代码：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git <span class="built_in">clone</span> https://github.com/alibaba/dubbo.git</div></pre></td></tr></table></figure>
<p>最新源代码拉下来之后，在 dubbo 文件夹的根目录下，执行编译安装命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mvn install -Dmaven.test.skip=<span class="literal">true</span></div></pre></td></tr></table></figure>
<p>执行完成之后，在 dubbo/dubbo-admin/target 目录下得到 dubbo-admin-2.5.4-SNAPSHOT.war。</p>
<p>在 tomcat 的 webapps 目录下创建 dubbo-admin 文件夹，即：tomcat/webapps/dubbo-admin，并将安装包拷贝到该目录下，并对安装包进行解压缩（解压缩完成之后，删除安装包即可）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">jar xvf dubbo-admin-2.5.4-SNAPSHOT.war</div></pre></td></tr></table></figure>
<p>接着我们可以验证安装是否成功。首先需要先启动 zookeeper（可参考<a href="http://fanlychie.github.io/post/zookeeper-setup.html" target="_blank" rel="external">Zookeeper安装和配置</a>），再启动 dubbo-admin 的 tomcat。访问<code>http://localhost:8080/dubbo-admin</code>。账户密码可在 dubbo-admin/WEB-INF/dubbo.properties 中查看和配置（默认为：<code>root/root</code>、<code>guest/guest</code>）。</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/dubbo-admin.png" alt=""></p>
<blockquote>
<p>参考文档文献链接：<a href="http://dubbo.io/Administrator+Guide-zh.htm" target="_blank" rel="external">dubbo管理员指南</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;dubbo 管理控制台是其内部裁剪版本，开源部分主要包含：路由规则，动态配置，服务降级，访问控制，权重调整，负载均衡，等管理功能。&lt;/p&gt;
&lt;h3 id=&quot;1-安装应用&quot;&gt;&lt;a href=&quot;#1-安装应用&quot; class=&quot;headerlink&quot; title=&quot;1. 安装应用
    
    </summary>
    
    
      <category term="Dubbo" scheme="http://yoursite.com/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>Zookeeper 安装和配置</title>
    <link href="http://yoursite.com/post/zookeeper-setup.html"/>
    <id>http://yoursite.com/post/zookeeper-setup.html</id>
    <published>2017-07-25T12:56:35.000Z</published>
    <updated>2017-07-25T18:46:53.746Z</updated>
    
    <content type="html"><![CDATA[<p>ZooKeeper 是一个开放源码的分布式应用程序协调服务，它为分布式应用提供一致性服务，主要功能包括：配置维护、域名服务、分布式同步、组服务等。</p>
<a id="more"></a>
<h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1. 安装"></a>1. 安装</h3><p>到 <a href="http://apache.org/dist/zookeeper/" target="_blank" rel="external">Zookeeper官网</a> 下载安装包，本文使用 <a href="http://apache.org/dist/zookeeper/zookeeper-3.4.10/" target="_blank" rel="external">zookeeper-3.4.10.tar.gz</a> 安装包。</p>
<p>解压缩：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ tar zxvf zookeeper-3.4.10.tar.gz</div></pre></td></tr></table></figure>
<p>删除安装包：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ rm -f zookeeper-3.4.10.tar.gz</div></pre></td></tr></table></figure>
<h3 id="2-单机模式配置"><a href="#2-单机模式配置" class="headerlink" title="2. 单机模式配置"></a>2. 单机模式配置</h3><p>拷贝一份 zookeeper-3.4.10/conf/zoo_sample.cfg 配置文件并重命名为 zoo.cfg：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ <span class="built_in">cd</span> zookeeper-3.4.10/conf/</div><div class="line">$ cp zoo_sample.cfg zoo.cfg</div></pre></td></tr></table></figure>
<p>编辑 zoo.cfg 配置文件：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ vi zoo.cfg</div></pre></td></tr></table></figure>
<p>内容如下：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">tickTime=<span class="number">2000</span></div><div class="line">dataDir=/usr/local/applications/zookeeper/data</div><div class="line">dataLogDir=/usr/local/applications/zookeeper/logs</div><div class="line">clientPort=<span class="number">2181</span></div></pre></td></tr></table></figure>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>tickTime</td>
<td>基本时间单位（毫秒）</td>
</tr>
<tr>
<td>dataDir</td>
<td>数据目录的路径</td>
</tr>
<tr>
<td>dataLogDir</td>
<td>日志目录的路径</td>
</tr>
<tr>
<td>clientPort</td>
<td>端口号</td>
</tr>
</tbody>
</table>
<p>启动服务命令（在 bin 目录下执行）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./zkServer.sh start</div></pre></td></tr></table></figure>
<p>重启服务命令（在 bin 目录下执行）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./zkServer.sh restart</div></pre></td></tr></table></figure>
<p>查看服务状态（在 bin 目录下执行）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./zkServer.sh status</div></pre></td></tr></table></figure>
<p>停止服务命令（在 bin 目录下执行）：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ ./zkServer.sh stop</div></pre></td></tr></table></figure>
<h3 id="3-伪集群模式配置"><a href="#3-伪集群模式配置" class="headerlink" title="3. 伪集群模式配置"></a>3. 伪集群模式配置</h3><p>伪集群是指在单台机器中启动多个 Zookeeper 服务并组成一个集群。Zookeeper 集群中只要有过半的节点是正常的，那么整个集群对外就是可用的。基于这种特性，Zookeeper 集群的节点数量通常为奇数个。</p>
<p>拷贝三份 Zookeeper：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ cp -r zookeeper-3.4.10/ zookeeper-1</div><div class="line">$ cp -r zookeeper-3.4.10/ zookeeper-2</div><div class="line">$ cp -r zookeeper-3.4.10/ zookeeper-3</div></pre></td></tr></table></figure>
<p>配置 zookeeper-1/conf/zoo.cfg：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tickTime=<span class="number">2000</span></div><div class="line">initLimit=<span class="number">10</span></div><div class="line">syncLimit=<span class="number">5</span></div><div class="line">dataDir=/usr/local/applications/zookeeper/cluster/node1/data</div><div class="line">dataLogDir=/usr/local/applications/zookeeper/cluster/node1/logs</div><div class="line">clientPort=<span class="number">2181</span></div><div class="line">server.1=<span class="number">127.0</span>.0.1:<span class="number">8881</span>:<span class="number">9991</span></div><div class="line">server.2=<span class="number">127.0</span>.0.1:<span class="number">8882</span>:<span class="number">9992</span></div><div class="line">server.3=<span class="number">127.0</span>.0.1:<span class="number">8883</span>:<span class="number">9993</span></div></pre></td></tr></table></figure>
<p>参数说明：</p>
<table>
<thead>
<tr>
<th>参数</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td>initLimit</td>
<td>初始化连接时, follower 和 leader 之间的最长心跳时间。若设置为 10，表示 10 倍的 tickTime 时间</td>
</tr>
<tr>
<td>syncLimit</td>
<td>leader 和 follower 之间发送消息，请求和应答的最大时间。若设置为 5，表示 5 倍的 tickTime 时间</td>
</tr>
<tr>
<td>server.X=A:B:C</td>
<td>X 是一个数字，表示这是第几个服务。A 是服务器的IP地址。B 是服务器和 leader 交换消息所使用的端口。C 是选举 leader 时所使用的端口</td>
</tr>
</tbody>
</table>
<p>zookeeper-2 和 zookeeper-3 的配置与 zookeeper-1 基本相同，只需改变 dataDir、dataLogDir、clientPort 参数的值。配置 zookeeper-2/conf/zoo.cfg：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tickTime=<span class="number">2000</span></div><div class="line">initLimit=<span class="number">10</span></div><div class="line">syncLimit=<span class="number">5</span></div><div class="line">dataDir=/usr/local/applications/zookeeper/cluster/node2/data</div><div class="line">dataLogDir=/usr/local/applications/zookeeper/cluster/node2/logs</div><div class="line">clientPort=<span class="number">2182</span></div><div class="line">server.1=<span class="number">127.0</span>.0.1:<span class="number">8881</span>:<span class="number">9991</span></div><div class="line">server.2=<span class="number">127.0</span>.0.1:<span class="number">8882</span>:<span class="number">9992</span></div><div class="line">server.3=<span class="number">127.0</span>.0.1:<span class="number">8883</span>:<span class="number">9993</span></div></pre></td></tr></table></figure>
<p>配置 zookeeper-3/conf/zoo.cfg：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tickTime=<span class="number">2000</span></div><div class="line">initLimit=<span class="number">10</span></div><div class="line">syncLimit=<span class="number">5</span></div><div class="line">dataDir=/usr/local/applications/zookeeper/cluster/node3/data</div><div class="line">dataLogDir=/usr/local/applications/zookeeper/cluster/node3/logs</div><div class="line">clientPort=<span class="number">2183</span></div><div class="line">server.1=<span class="number">127.0</span>.0.1:<span class="number">8881</span>:<span class="number">9991</span></div><div class="line">server.2=<span class="number">127.0</span>.0.1:<span class="number">8882</span>:<span class="number">9992</span></div><div class="line">server.3=<span class="number">127.0</span>.0.1:<span class="number">8883</span>:<span class="number">9993</span></div></pre></td></tr></table></figure>
<p>在相应的数据目录下创建 myid 文件，并输入相对应的数字编号的值作为内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /usr/<span class="built_in">local</span>/applications/zookeeper/cluster/node1/data</div><div class="line">$ vi /usr/<span class="built_in">local</span>/applications/zookeeper/cluster/node1/data/myid	<span class="comment"># 输入内容：1</span></div><div class="line">  </div><div class="line">$ mkdir -p /usr/<span class="built_in">local</span>/applications/zookeeper/cluster/node2/data</div><div class="line">$ vi /usr/<span class="built_in">local</span>/applications/zookeeper/cluster/node2/data/myid	<span class="comment"># 输入内容：2</span></div><div class="line">  </div><div class="line">$ mkdir -p /usr/<span class="built_in">local</span>/applications/zookeeper/cluster/node3/data</div><div class="line">$ vi /usr/<span class="built_in">local</span>/applications/zookeeper/cluster/node3/data/myid	<span class="comment"># 输入内容：3</span></div></pre></td></tr></table></figure>
<p>启动服务命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ zookeeper-1/bin/zkServer.sh start</div><div class="line">$ zookeeper-2/bin/zkServer.sh start</div><div class="line">$ zookeeper-3/bin/zkServer.sh start</div></pre></td></tr></table></figure>
<p>查看服务状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$ zookeeper-1/bin/zkServer.sh status</div><div class="line">$ zookeeper-2/bin/zkServer.sh status</div><div class="line">$ zookeeper-3/bin/zkServer.sh status</div></pre></td></tr></table></figure>
<h3 id="4-集群模式配置"><a href="#4-集群模式配置" class="headerlink" title="4. 集群模式配置"></a>4. 集群模式配置</h3><p>集群模式的配置和伪集群的配置基本相同。在集群模式下，由于各个服务部署在不同的主机上，因此，zoo.cfg 配置文件的配置内容可以是完全一样的。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">tickTime=<span class="number">2000</span></div><div class="line">initLimit=<span class="number">10</span></div><div class="line">syncLimit=<span class="number">5</span></div><div class="line">dataDir=/usr/local/applications/zookeeper/data</div><div class="line">dataLogDir=/usr/local/applications/zookeeper/logs</div><div class="line">clientPort=<span class="number">2181</span></div><div class="line">server.1=<span class="number">192.168</span>.1.101:<span class="number">2555</span>:<span class="number">3555</span></div><div class="line">server.2=<span class="number">192.168</span>.1.102:<span class="number">2555</span>:<span class="number">3555</span></div><div class="line">server.3=<span class="number">192.168</span>.1.103:<span class="number">2555</span>:<span class="number">3555</span></div></pre></td></tr></table></figure>
<p>在各主机相应的数据目录下创建 myid 文件，并输入相对应的数字编号的值作为内容：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">$ mkdir -p /usr/<span class="built_in">local</span>/applications/zookeeper/data</div><div class="line">$ vi /usr/<span class="built_in">local</span>/applications/zookeeper/data/myid	<span class="comment"># 192.168.1.101 输入内容：1</span></div><div class="line">  </div><div class="line">$ mkdir -p /usr/<span class="built_in">local</span>/applications/zookeeper/data</div><div class="line">$ vi /usr/<span class="built_in">local</span>/applications/zookeeper/data/myid	<span class="comment"># 192.168.1.102 输入内容：2</span></div><div class="line">  </div><div class="line">$ mkdir -p /usr/<span class="built_in">local</span>/applications/zookeeper/data</div><div class="line">$ vi /usr/<span class="built_in">local</span>/applications/zookeeper/data/myid	<span class="comment"># 192.168.1.103 输入内容：3</span></div></pre></td></tr></table></figure>
<p>各主机防火墙分别开放相对应的端口：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 2181 -j ACCEPT</div><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 2555 -j ACCEPT</div><div class="line">-A INPUT -m state --state NEW -m tcp -p tcp --dport 3555 -j ACCEPT</div></pre></td></tr></table></figure>
<p>各主机启动服务命令：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ zookeeper-3.4.10/bin/zkServer.sh start</div></pre></td></tr></table></figure>
<p>查看服务状态：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ zookeeper-3.4.10/bin/zkServer.sh status</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ZooKeeper 是一个开放源码的分布式应用程序协调服务，它为分布式应用提供一致性服务，主要功能包括：配置维护、域名服务、分布式同步、组服务等。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Zookeeper" scheme="http://yoursite.com/tags/Zookeeper/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Ribbon — 客户端负载均衡器</title>
    <link href="http://yoursite.com/post/spring-cloud-netflix-ribbon.html"/>
    <id>http://yoursite.com/post/spring-cloud-netflix-ribbon.html</id>
    <published>2017-07-20T05:57:18.000Z</published>
    <updated>2017-07-23T11:03:00.217Z</updated>
    
    <content type="html"><![CDATA[<p>Ribbon 是 Netflix 开源的项目，主要用于为提供客户端软件提供负载均衡算法。Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一个基于 HTTP 和 TCP 的客户端负载均衡器。</p>
<h3 id="1-Ribbon-单独使用"><a href="#1-Ribbon-单独使用" class="headerlink" title="1. Ribbon 单独使用"></a>1. Ribbon 单独使用</h3><p>创建两个项目：order-service（订单服务，作为服务提供者）、user-center（用户中心，作为服务消费者）。并在 user-center（服务消费者）端使用 Spring Cloud Ribbon 做客户端负载均衡。</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-ribbon-project.png" alt=""></p>
<h4 id="1-1-服务提供者"><a href="#1-1-服务提供者" class="headerlink" title="1.1 服务提供者"></a>1.1 服务提供者</h4><p>在 order-service/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 order-service/src/main/resources/application.yml 配置两个端口以便启动两个不同实例用于测试：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">order-service</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">service1</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">service1</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8881</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">service2</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8882</span></div></pre></td></tr></table></figure>
<p>编写查询用户订单的服务方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/find/&#123;uid:[1-9]\\d+&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(@PathVariable Integer uid)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------------------------------------------------"</span>);</div><div class="line">        System.out.println(<span class="string">"------------------ 方法被调用 ------------------"</span>);</div><div class="line">        System.out.println(<span class="string">"------------------------------------------------"</span>);</div><div class="line">        <span class="keyword">return</span> orderRepository.findByUid(uid);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>配置根路径的访问许可，以便客户端负载均衡器能够 PING 通本服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebConfig</span> <span class="keyword">extends</span> <span class="title">WebMvcConfigurerAdapter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addViewControllers</span><span class="params">(ViewControllerRegistry registry)</span> </span>&#123;</div><div class="line">        registry.addStatusController(<span class="string">"/"</span>, HttpStatus.OK);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写 Spring Boot 应用启动类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-服务消费者"><a href="#1-2-服务消费者" class="headerlink" title="1.2 服务消费者"></a>1.2 服务消费者</h4><p>在 user-center/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 user-center/src/main/resources/application.yml 配置客户端负载均衡：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8888</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">user-center</span></div><div class="line"><span class="attr">order-service:</span></div><div class="line"><span class="attr">  ribbon:</span></div><div class="line"><span class="attr">    eureka:</span></div><div class="line"><span class="attr">      enabled:</span> <span class="literal">false</span></div><div class="line">    <span class="comment"># 微服务的服务器列表</span></div><div class="line"><span class="attr">    listOfServers:</span> <span class="attr">localhost:8881,localhost:8882</span></div><div class="line">    <span class="comment"># 刷新微服务的服务器列表信息间隔的毫秒数</span></div><div class="line"><span class="attr">    ServerListRefreshInterval:</span> <span class="number">3000</span></div></pre></td></tr></table></figure>
<p>默认情况下，Spring Cloud Ribbon 使用 NoOpPing 作为 IPing 的实现，NoOpPing 实际上并没有 PING 服务器而是一直返回 true。而 PingUrl 则会通过 PING 服务器根路径地址来检查每一台服务器的状态以确认服务是否还在线。默认情况下，Spring Cloud Ribbon 使用 ZoneAvoidanceRule 作为 IRule 的实现，ZoneAvoidanceRule 基于 AZ（可用区）过滤服务器最大程度避免区域服务器故障。由于本地环境测试，这里采用 AvailabilityFilteringRule，它使用 Ribbon 内置的断路器功能来过滤掉处于开路状态（无法 PING 通）的服务器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConfiguration</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> IClientConfig ribbonClientConfig;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IPing <span class="title">ribbonPing</span><span class="params">(IClientConfig config)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> PingUrl();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> IRule <span class="title">ribbonRule</span><span class="params">(IClientConfig config)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AvailabilityFilteringRule();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写用户订单查询服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/orders/&#123;uid:[1-9]\\d+&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">orders</span><span class="params">(@PathVariable Integer uid)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(String.format(<span class="string">"http://order-service/order/find/%d"</span>, uid), List.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写 Spring Boot 应用启动类，使用<code>@LoadBalanced</code>注解，为 RestTemplate 开启负载均衡的能力：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"order-service"</span>, configuration = RibbonConfiguration.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@LoadBalanced</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">proviceRestTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-启动服务"><a href="#1-3-启动服务" class="headerlink" title="1.3 启动服务"></a>1.3 启动服务</h4><p>启动两个服务提供者服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ java -jar order-service-<span class="number">0.0</span>.1-SNAPSHOT.jar</div><div class="line">$ java -Dspring.profiles.active=service2 -jar order-service-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>启动一个服务消费者服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar user-center-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>你可以尝试多次访问用户订单服务，或尝试途中关闭其中一个服务提供者服务再访问用户订单服务，以便查看其效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -i -X GET http:<span class="comment">//localhost:8888/user/orders/1001</span></div></pre></td></tr></table></figure>
<h3 id="2-整合-Eureka"><a href="#2-整合-Eureka" class="headerlink" title="2. 整合 Eureka"></a>2. 整合 Eureka</h3><p>创建三个项目：eureka-server（服务注册中心）、order-service（订单服务，作为服务提供者）、user-center（用户中心，作为服务消费者）。并在 user-center（服务消费者）端使用 Spring Cloud Ribbon 做客户端负载均衡。</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-ribbon-eureka-project.png" alt=""></p>
<h4 id="2-1-服务注册中心"><a href="#2-1-服务注册中心" class="headerlink" title="2.1 服务注册中心"></a>2.1 服务注册中心</h4><p>在 eureka-server/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>eureka-server/src/main/resources/application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  server:</span></div><div class="line"><span class="attr">    renewal-percent-threshold:</span> <span class="number">0.49</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      default-zone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  level:</span></div><div class="line">    <span class="string">com.netflix.eureka:</span> <span class="string">'off'</span></div><div class="line">    <span class="string">com.netflix.discovery:</span> <span class="string">'off'</span></div></pre></td></tr></table></figure>
<p>Spring Boot 应用启动类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-服务提供者"><a href="#2-2-服务提供者" class="headerlink" title="2.2 服务提供者"></a>2.2 服务提供者</h4><p>在 order-service/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>在 order-service/src/main/resources/application.yml 配置两个端口以便启动两个不同实例用于测试：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">order-service</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">service1</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">service1</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8881</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">service2</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8882</span></div></pre></td></tr></table></figure>
<p>编写查询用户订单的服务方法：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/order"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> OrderRepository orderRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/find/&#123;uid:[1-9]\\d+&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">findByUid</span><span class="params">(@PathVariable Integer uid)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------------------------------------------------"</span>);</div><div class="line">        System.out.println(<span class="string">"------------------ 方法被调用 ------------------"</span>);</div><div class="line">        System.out.println(<span class="string">"------------------------------------------------"</span>);</div><div class="line">        <span class="keyword">return</span> orderRepository.findByUid(uid);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写 Spring Boot 应用启动类：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-服务消费者"><a href="#2-3-服务消费者" class="headerlink" title="2.3 服务消费者"></a>2.3 服务消费者</h4><p>在 user-center/pom.xml 中声明依赖：</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure>
<p>user-center/src/main/resources/application.yml 配置示例：</p>
<figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8888</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">user-center</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    serviceUrl:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></div></pre></td></tr></table></figure>
<p>编写用户订单查询服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RestController</span></div><div class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/user"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> RestTemplate restTemplate;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/orders/&#123;uid:[1-9]\\d+&#125;"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> List&lt;Order&gt; <span class="title">orders</span><span class="params">(@PathVariable Integer uid)</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> restTemplate.getForObject(String.format(<span class="string">"http://order-service/order/find/%d"</span>, uid), List.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>编写 Spring Boot 应用启动类，使用<code>@LoadBalanced</code>注解，为 RestTemplate 开启负载均衡的能力：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@RibbonClient</span>(name = <span class="string">"order-service"</span>, configuration = RibbonConfiguration.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="meta">@LoadBalanced</span></div><div class="line">    <span class="function"><span class="keyword">public</span> RestTemplate <span class="title">proviceRestTemplate</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-4-启动服务"><a href="#2-4-启动服务" class="headerlink" title="2.4 启动服务"></a>2.4 启动服务</h4><p>启动服务注册中心：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar eureka-server-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>启动两个服务提供者服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">$ java -jar order-service-<span class="number">0.0</span>.1-SNAPSHOT.jar</div><div class="line">$ java -Dspring.profiles.active=service2 -jar order-service-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>启动一个服务消费者服务：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -jar user-center-<span class="number">0.0</span>.1-SNAPSHOT.jar</div></pre></td></tr></table></figure>
<p>你可以尝试多次访问用户订单服务，或尝试途中关闭其中一个服务提供者服务再访问用户订单服务，以便查看其效果。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ curl -i -X GET http:<span class="comment">//localhost:8888/user/orders/1001</span></div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Cloud-Dalston.SR1<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-cloud-samples/tree/master/spring-cloud-netflix-ribbon-sample" target="_blank" rel="external">spring-cloud-netflix-ribbon-sample</a>、<a href="https://github.com/fanlychie/spring-cloud-samples/tree/master/spring-cloud-netflix-ribbon-with-eureka-sample" target="_blank" rel="external">spring-cloud-netflix-ribbon-with-eureka-sample</a><br>参考文档文献链接：<a href="https://spring.io/guides/gs/client-side-load-balancing" target="_blank" rel="external">client-side-load-balancing</a>、<a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR1/#spring-cloud-ribbon" target="_blank" rel="external">spring-cloud-ribbon</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Ribbon 是 Netflix 开源的项目，主要用于为提供客户端软件提供负载均衡算法。Spring Cloud Ribbon 是基于 Netflix Ribbon 实现的一个基于 HTTP 和 TCP 的客户端负载均衡器。&lt;/p&gt;
&lt;h3 id=&quot;1-Ribbon-单独使
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://yoursite.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud Eureka — 服务发现</title>
    <link href="http://yoursite.com/post/spring-cloud-netflix-eureka.html"/>
    <id>http://yoursite.com/post/spring-cloud-netflix-eureka.html</id>
    <published>2017-06-21T13:57:47.000Z</published>
    <updated>2017-07-06T17:11:16.739Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Cloud 是一套基于 Spring Boot 实现的微服务开发工具。微服务（也称微服务架构），简单的说，就是将一个系统按照一定的规则有效的拆分成多个不同的服务，每个服务都能够独立的进行开发、部署、扩展和维护。服务与服务之间可以通过 RESTful API 等方式进行相互调用。</p>
<p>Spring Cloud 没有重复制造轮子，它只是将业界内多个开源的微服务框架集成起来，再通过 Spring Boot 进行包装屏蔽掉了复杂的配置和实现原理，目的是给开发者予一套简单易懂、易部署和易维护的分布式系统开发工具包。它提供了微服务开发所需的配置管理、服务发现、断路器、智能路由、微代理、控制总线等组件。</p>
<a id="more"></a>
<h2 id="1-Eureka"><a href="#1-Eureka" class="headerlink" title="1. Eureka"></a>1. Eureka</h2><p>Eureka 是一种基于 REST 的服务，主要用于定位服务，以实现中间层服务器的负载均衡和故障转移。它是由 Spring Cloud Netflix（Spring Cloud 的子项目） 项目提供的。</p>
<h3 id="1-1-Spring-Cloud-Netflix"><a href="#1-1-Spring-Cloud-Netflix" class="headerlink" title="1.1 Spring Cloud Netflix"></a>1.1 Spring Cloud Netflix</h3><p>它主要是对 Netflix 开源的一系列产品进行包装，为 Spring Boot 应用程序提供自动配置的 Netflix OSS 集成。通过一些简单的注解，就能快速启用并构建大型的分布式系统。它提供的模块有：<br>服务发现（Eureka）、断路器（Hystrix）、智能路由（Zuul）、客户端负载均衡（Ribbon）。</p>
<h3 id="1-2-样例项目结构"><a href="#1-2-样例项目结构" class="headerlink" title="1.2 样例项目结构"></a>1.2 样例项目结构</h3><p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-sample-structure.png" alt=""></p>
<h3 id="1-3-服务注册中心"><a href="#1-3-服务注册中心" class="headerlink" title="1.3 服务注册中心"></a>1.3 服务注册中心</h3><p>在 pom.xml 中声明使用<code>spring-cloud-starter-eureka-server</code>启动器（本示例对应的项目是<code>eureka-server</code>）：</p>
<p></p><p class="code-title">pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p>使用<code>@EnableEurekaServer</code>注解将应用声明为 Eureka 服务器端（Eureka Server），从而启动 Eureka 服务注册中心的组件，对外提供服务注册和发现的功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaServer</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EurekaServerApplication</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在默认的模式中，Eureka 服务器端也充当客户端并向给定的 serviceUrl 注册自己。在生产环境中，我们通常会有多台服务器端应用，但是为了简单起见，本示例使用单台服务器，因此需要禁掉 Eureka 服务器端应用的客户端行为：</p>
<p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">localhost</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    register-with-eureka:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    fetch-registry:</span> <span class="literal">false</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span></div></pre></td></tr></table></figure><p></p>
<table>
<thead>
<tr>
<th>配置项</th>
<th style="text-align:center">默认值</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>eureka.instance.hostname</td>
<td style="text-align:center">-</td>
<td>实例的主机名。</td>
</tr>
<tr>
<td>eureka.client.register-with-eureka</td>
<td style="text-align:center">true</td>
<td>该实例是否向 Eureka 服务器注册自己，以供外部应用发现自己。在某些情况下，你可能不希望当前的应用被外部的其他应用发现，而只是想从服务器发现其他服务的实例，此时你可以将此值设为 false。</td>
</tr>
<tr>
<td>eureka.client.fetch-registry</td>
<td style="text-align:center">true</td>
<td>该实例是否向 Eureka 服务器获取所有的注册信息表。</td>
</tr>
<tr>
<td>eureka.client.service-url.defaultZone</td>
<td style="text-align:center">-</td>
<td>该实例与 Eureka 服务器通讯的 URL 地址列表。如果 Eureka 服务器地址不止一个，则使用英文的逗号分隔。</td>
</tr>
</tbody>
</table>
<p>Eureka 服务器默认监听 8761 端口来接收服务注册，除此之外它还提供一个可视化的直观页面，可以方便的查看注册的服务。启动<code>EurekaServerApplication</code>，访问：<code>http://localhost:8761/</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-server-page-1.png" alt=""></p>
<p>从上图可以看到，此时还没有任何服务注册到 Eureka 服务器。</p>
<h3 id="1-4-客户端（服务提供者）"><a href="#1-4-客户端（服务提供者）" class="headerlink" title="1.4 客户端（服务提供者）"></a>1.4 客户端（服务提供者）</h3><p>在 pom.xml 中声明使用<code>spring-cloud-starter-eureka</code>启动器（本示例对应的项目是<code>order-service</code>）：</p>
<p></p><p class="code-title">pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p>使用<code>@EnableEurekaClient</code>或<code>@EnableDiscoveryClient</code>注解可以将应用声明为 Eureka 客户端（Eureka Client）。当客户端向 Eureka 服务器注册时，它会提供关于自身的一些元数据，例如主机和端口，健康指示符 URL，主页等信息。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@EnableEurekaClient</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderServiceApplication</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>除此之外，还需要配置才能找到 Eureka 服务器：</p>
<p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8881</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">order-service</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://localhost:8761/eureka/</span></div></pre></td></tr></table></figure><p></p>
<p><code>spring.application.name</code>是 Eureka 客户端向服务器注册的服务ID和虚拟主机的名称。在 Eureka 服务器中，服务ID相同的实例将集群在一起。<br>启动<code>OrderServiceApplication</code>，再次访问：<code>http://localhost:8761/</code></p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-server-page-2.png" alt=""></p>
<p>从上图可以看到，客户端应用程序已经成功被注册了。</p>
<h3 id="1-5-高可用"><a href="#1-5-高可用" class="headerlink" title="1.5 高可用"></a>1.5 高可用</h3><p>以上示例都是单点运行的，不适合于生产环境。<a href="https://github.com/Netflix/eureka/wiki/Eureka-at-a-glance#high-level-architecture" target="_blank" rel="external">Eureka</a> 官方给出的应用部署架构图是这样的：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/eureka-architecture.png" alt=""></p>
<p>下面对这个架构图来作一些解读，希望能帮助你更好的理解。</p>
<p><strong>1．Region 和 Zone</strong><br>在 Eureka 中有 Region（区域）和 Zone（Availability Zone，可用区）的区分。<br>这是由于 Netflix 开源的 Eureka 旨在 AWS（Amazon Web Services，现在通常称为云计算）中运行，因此使用了一些 AWS 特有的概念术语。<br>在非 AWS 的环境下，我们可以简单的将 Region 理解成大区或地域（如阿里云服务器的华南、华北地区），Zone 可以简单的理解成机房。如需了解更多相关信息，可参考：<a href="http://blog.csdn.net/awschina/article/details/17639191" target="_blank" rel="external">AWS的区域和可用区概念解释</a>。<br>上图是一个 Eureka 集群的部署架构图，它面有 3 个 Zone（us-east-1c、us-east-1d、us-east-1e），它们都属于 us-east-1 这个 Region。</p>
<p><strong> 2．Eureka Server </strong><br>每个 Zone 至少有一个 Eureka Server，能够对外提供服务发现和处理区域故障。<br>在 Eureka Server 集群中（<code>eureka.client.register-with-eureka</code>不能设置为 false），没有 Master/Slave 的区分，每个 Eureka Server 都是对等（Peer）的。它们除了可以作为服务注册中心外还可以充当客户端向其他 Eureka Server 注册自己，并且会从它的对等的节点（由<code>eureka.client.service-url.defaultZone</code>配置指定）中 Replicate（复制）所有的服务注册表信息以达到同步的目的，如果因为某种原因导致同步失败，默认等待 5 分钟（可以通过<code>eureka.server.wait-time-in-ms-when-sync-empt</code>配置），在这期间，它不向客户端提供服务注册信息。并且默认失败重试 5 次（可以通过<code>eureka.server.number-of-replication-retries</code>配置）。</p>
<p><strong> 3．Eureka Client </strong><br>Eureka 客户端应用分两种，Applicaton Service（服务提供者）和 Application Client（服务消费者）。<br>Applicaton Service（服务提供者）通常需要向给定的 serviceUrl 对应的 Eureka Server 来 Register（注册）自己，以供外部应用可以发现自己。其注册信息包含主机名和端口信息等元数据。然后默认以每隔 30 秒的频率向注册的 Eureka Server 发送一次心跳（可以通过<code>eureka.instance.lease-renewal-interval-in-seconds</code>配置）来 Renew（续约）服务。<br>Eureka Server 默认为 90 秒内如果没有收到客户端的心跳，则它会将该客户端实例从它的注册表中剔除，以禁止该实例的流量（可以通过<code>eureka.instance.lease-expiration-duration-in-seconds</code>配置。注意，如果该值设置的太大，即使实例已经不存在了，流量也可以路由到该实例；如果设置的太小，很可能因为网络问题导致实例被服务器剔除；该值至少应该比发送心跳频率的间隔值要大）。<br>Eureka 客户端默认会从注册的 Eureka Server 中获取所有的服务注册表信息（可以通过<code>eureka.client.fetch-registry</code>配置），默认是以每隔 30 秒的频率去 Get Registry（获取注册表） 一次（可以通过<code>eureka.client.registry-fetch-interval-seconds</code>配置）。<br>Application Client（服务消费者）可以不向任何 Eureka Server 注册自己，它可以只从 Eureka Server 获取注册过的服务列表，通过 RESTful API 的方式远程调用 Applicaton Service（服务提供者）。</p>
<h4 id="1-5-1-Eureka-Server-高可用样例"><a href="#1-5-1-Eureka-Server-高可用样例" class="headerlink" title="1.5.1 Eureka Server 高可用样例"></a>1.5.1 Eureka Server 高可用样例</h4><p>本示例是在同一主机运行多个 Eureka Server 实例，由于 Eureka 会过滤同一主机的相同主机名（详见<code>com.netflix.eureka.cluster.PeerEurekaNodes#isThisMyUrl</code>），但是它不检查端口，因此需要先行定义至少两个不同的主机名，并使它们映射到<code>127.0.0.1</code>。<br>这里采用修改 hosts 文件的方式。Windows 操作系统的 hosts 文件路径是<code>C:\Windows\System32\drivers\etc\hosts</code>。找到并打开系统的 hosts 文件，在最后添加如下行：</p>
<p></p><p class="code-title">hosts</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span> <span class="string">peer1</span> <span class="string">peer2</span> <span class="string">peer3</span></div></pre></td></tr></table></figure><p></p>
<p>修改<code>eureka-server</code>项目的配置文件：</p>
<p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">eureka-server</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">peer1</span></div><div class="line"><span class="attr">logging:</span></div><div class="line"><span class="attr">  level:</span></div><div class="line">    <span class="string">com.netflix.eureka:</span> <span class="string">'off'</span></div><div class="line">    <span class="string">com.netflix.discovery:</span> <span class="string">'off'</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">peer1</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8761</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer1</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer2:8762/eureka/,http://peer3:8763/eureka/</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">peer2</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8762</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer2</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/,http://peer3:8763/eureka/</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">peer3</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8763</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  instance:</span></div><div class="line"><span class="attr">    hostname:</span> <span class="string">peer3</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/,http://peer2:8762/eureka/</span></div></pre></td></tr></table></figure><p></p>
<p>这里配置了 3 个 Eureka Server 实例，每个实例与其他两个实例分别进行两两的相互注册，关系如图示：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/ES-2.png" alt=""></p>
<p>需要注意的是，Eureka Server 的服务注册信息不能进行二次传播。如下图的实例关系配置是不可取的：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/ES-1.png" alt=""></p>
<p>此图的每个 Eureka Server 实例是单向的向另外一个实例注册，假如现有一个新的客户端实例 C 向 1 注册，那么，1 和 2 中都会有 C 的注册信息，但是 3 中是没有 C 的注册信息的（详见<code>com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl#replicateToPeers</code>）。</p>
<p>启动 3 个 Eureka Server 实例：</p>
<p></p><p class="code-title">cmd</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动 peer1 实例</span></div><div class="line"><span class="string">&gt; java -jar eureka-server-0.0.1-SNAPSHOT.jar</span></div><div class="line"># 启动 peer2 实例</div><div class="line">&gt; java -jar -Dspring.profiles.active=peer2 eureka-server-0.0.1-SNAPSHOT.jar</div><div class="line"># 启动 peer3 实例</div><div class="line">&gt; java -jar -Dspring.profiles.active=peer3 eureka-server-0.0.1-SNAPSHOT.jar</div></pre></td></tr></table></figure><p></p>
<h4 id="1-5-2-Eureka-Client-高可用样例"><a href="#1-5-2-Eureka-Client-高可用样例" class="headerlink" title="1.5.2 Eureka Client 高可用样例"></a>1.5.2 Eureka Client 高可用样例</h4><p>修改<code>order-service</code>项目的配置文件：</p>
<p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  application:</span></div><div class="line"><span class="attr">    name:</span> <span class="string">order-service</span></div><div class="line"><span class="attr">  profiles:</span></div><div class="line"><span class="attr">    active:</span> <span class="string">client1</span></div><div class="line"><span class="attr">eureka:</span></div><div class="line"><span class="attr">  client:</span></div><div class="line"><span class="attr">    service-url:</span></div><div class="line"><span class="attr">      defaultZone:</span> <span class="attr">http://peer1:8761/eureka/</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">client1</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8881</span></div><div class="line"><span class="meta">---</span></div><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  profiles:</span> <span class="string">client2</span></div><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8882</span></div></pre></td></tr></table></figure><p></p>
<p>客户端的<code>eureka.client.service-url.defaultZone</code>指定为当前 Zone 中任意一台服务注册中心的地址就可以，因为上例中配置的每台服务注册中心的服务注册表是两两相互进行复制的。</p>
<p>启动 2 个 Eureka Client 实例：</p>
<p></p><p class="code-title">cmd</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 启动 client1 实例</span></div><div class="line"><span class="string">&gt; java -jar order-service-0.0.1-SNAPSHOT.jar</span></div><div class="line"># 启动 client2 实例</div><div class="line">&gt; java -jar -Dspring.profiles.active=client2 order-service-0.0.1-SNAPSHOT.jar</div></pre></td></tr></table></figure><p></p>
<p>重新刷新<code>http://localhost:8761/</code>：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-server-page-3.png" alt=""></p>
<h3 id="1-6-自我保护模式"><a href="#1-6-自我保护模式" class="headerlink" title="1.6 自我保护模式"></a>1.6 自我保护模式</h3><p>Eureka 默认开启了自我保护模式（可以通过<code>eureka.server.enable-self-preservation</code>配置）。该模式被激活的条件是：在 1 分钟后，<code>Renews (last min)</code>&lt;<code>Renews threshold</code>。你可以在 Eureka Server 首页的右上侧可以看到：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-cloud-netflix-eureka-server-page-part.png" alt=""></p>
<table>
<thead>
<tr>
<th>参数</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>Renews threshold</td>
<td>Eureka Server 期望每分钟收到客户端实例续约的总数</td>
</tr>
<tr>
<td>Renews (last min)</td>
<td>Eureka Server 最后 1 分钟收到客户端实例续约的总数</td>
</tr>
</tbody>
</table>
<p><strong> 1．服务器端续约阀值的计算源码（Renews threshold） </strong></p>
<p></p><p class="code-title">com.netflix.eureka.registry.PeerAwareInstanceRegistryImpl#openForTraffic</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.expectedNumberOfRenewsPerMin = count * <span class="number">2</span>;</div><div class="line"><span class="keyword">this</span>.numberOfRenewsPerMinThreshold = (<span class="keyword">int</span>) (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());</div></pre></td></tr></table></figure><p></p>
<p>其中，count 为 服务器的数量。数值 2 表示每 30 秒 1 个心跳，每分钟 2 个心跳的固定频率因子。</p>
<p>归纳公式：<code>2M * renewalPercentThreshold</code>。其中，M 为服务器的个数，计算结果只保留整数位。</p>
<p>renewalPercentThreshold 默认是 0.85（可以通过<code>eureka.server.renewal-percent-threshold</code>配置）。</p>
<p>其实这就是个固定值，因为对于每个 Eureka Server 来说，M 只能取 1。这段代码达到的效果是：</p>
<p>1．expectedNumberOfRenewsPerMin 重置为固定值 2；<br>2．numberOfRenewsPerMinThreshold 的值被设置为 1；</p>
<p><strong> 2．客户端续约阀值的计算源码（Renews threshold） </strong></p>
<p></p><p class="code-title">com.netflix.eureka.registry.AbstractInstanceRegistry#register</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin &gt; <span class="number">0</span>) &#123;</div><div class="line">    <span class="keyword">this</span>.expectedNumberOfRenewsPerMin = <span class="keyword">this</span>.expectedNumberOfRenewsPerMin + <span class="number">2</span>;</div><div class="line">    <span class="keyword">this</span>.numberOfRenewsPerMinThreshold = (<span class="keyword">int</span>) (<span class="keyword">this</span>.expectedNumberOfRenewsPerMin * serverConfig.getRenewalPercentThreshold());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>注：上面贴出的 PeerAwareInstanceRegistryImpl 继承自 AbstractInstanceRegistry。<br>它们共享 expectedNumberOfRenewsPerMin 和 numberOfRenewsPerMinThreshold 属性，具体可自行翻阅源码。</p>
<p>设有 N 个客户端，服务器端先启动，expectedNumberOfRenewsPerMin 被重置为固定值 2。接着客户端依次启动：</p>
<p><code>N = 1</code>–&gt;<code>(2 + 2) * renewalPercentThreshold</code><br><code>N = 2</code>–&gt;<code>(2 + 2 + 2) * renewalPercentThreshold</code><br><code>N = 3</code>–&gt;<code>(2 + 2 + 2 + 2) * renewalPercentThreshold</code></p>
<p>归纳公式：<code>2(N + 1) * renewalPercentThreshold</code>，计算结果只保留整数位。</p>
<p>即，如果只有 1 个 Eureka Server 或者有多个 Eureka Server 但它们之间没有相互注册：</p>
<p>当 N = 0 时，只计算服务器端。<code>Renews threshold</code>= 1。由于没有客户端向服务器发送心跳，<code>Renews (last min)</code>&lt;<code>Renews threshold</code>，Eureka 自我保护模式被激活；</p>
<p>当 N ≠ 0 时，服务器端的计算结果被客户端覆盖，即只计算客户端；</p>
<p>当 N = 2 时，<code>Renews threshold</code>= 2(N + 1) * renewalPercentThreshold = 2 * 3 * 0.85 = 5。2 个客户端以每 30 秒发送 1 个心跳，1 分钟后总共向服务器发送 4 个心跳，<code>Renews (last min)</code>&lt;<code>Renews threshold</code>，Eureka 自我保护模式被激活；</p>
<p>所以如果 N &lt; 3，在 1 分钟后，服务器端收到的客户端实例续约的总数总是小于期望的阀值，因此 Eureka 的自我保护模式自动被激活。首页会出现警告信息：</p>
<font color="#da5985" style="margin:-12px 0 6px 0;display:block;">EMERGENCY! EUREKA MAY BE INCORRECTLY CLAIMING INSTANCES ARE UP WHEN THEY’RE NOT. RENEWALS ARE LESSER THAN THRESHOLD AND HENCE THE INSTANCES ARE NOT BEING EXPIRED JUST TO BE SAFE.</font>

<p>这种情况下，由于 Eureka Server 没有对等的节点，同步不到服务注册信息，默认需等待 5 分钟（可以通过<code>eureka.server.wait-time-in-ms-when-sync-empty</code>配置）。即 5 分钟后你应该看到此信息。</p>
<p>为避免这种情况发生，你可以：</p>
<ul>
<li>关闭自我保护模式（<code>eureka.server.enable-self-preservation</code>设为 false）</li>
<li>降低 renewalPercentThreshold 的比例（<code>eureka.server.renewal-percent-threshold</code>设置为 0.5 以下，比如 0.49）</li>
<li>部署多个 Eureka Server 并开启其客户端行为（<code>eureka.client.register-with-eureka</code>不要设为 false，默认为 true）</li>
</ul>
<p><div style="margin-top:18px"></div>如果是采取部署多个 Eureka Server 并开启其客户端行为使其相互注册。假设有 M 个 Eureka Server，那么，每个 Eureka Server 每分钟可以额外收到 2 * (M - 1) 个心跳。例如：</p>
<p>当 M = 1，N = 2 时，<code>Renews threshold</code>= 2(N + 1) * renewalPercentThreshold = 2 * 3 * 0.85 = 5，2 个客户端以每 30 秒发送 1 个心跳，1 分钟后总共向服务器发送 4 个心跳，<code>Renews (last min)</code>&lt;<code>Renews threshold</code>；</p>
<p>当 M = 2，N = 2 时，<code>Renews threshold</code>= 2(N + 1) * renewalPercentThreshold = 2 * 3 * 0.85 = 5，2 个客户端以每 30 秒发送 1 个心跳，1 分钟后总共向服务器发送 4 个心跳，另外还有 1 个 M 发来的 2 个心跳，总共是 6 个心跳，<code>Renews (last min)</code>&gt;<code>Renews threshold</code>；</p>
<p>Eureka 的自我保护模式是有意义的，该模式被激活后，它不会从注册列表中剔除因长时间没收到心跳导致租期过期的服务，而是等待修复，直到心跳恢复正常之后，它自动退出自我保护模式。这种模式旨在避免因网络分区故障导致服务不可用的问题。例如，两个客户端实例 C1 和 C2 的连通性是良好的，但是由于网络故障，C2 未能及时向 Eureka 发送心跳续约，这时候 Eureka 不能简单的将 C2 从注册表中剔除。因为如果剔除了，C1 就无法从 Eureka 服务器中获取 C2 注册的服务，但是这时候 C2 服务是可用的。所以，Eureka 的自我保护模式最好还是开启它。</p>
<h3 id="1-7-Eureka-与-Zookeeper-的区别"><a href="#1-7-Eureka-与-Zookeeper-的区别" class="headerlink" title="1.7 Eureka 与 Zookeeper 的区别"></a>1.7 Eureka 与 Zookeeper 的区别</h3><p>Eureka 最大程度上保证 AP（Availability，可用性；Partition-tolerance，分区容错性），而 Zookeeper 保证的是 CP（Consistency，一致性；Partition-tolerance，分区容错性）。<br>如果因为网络分区故障导致服务器（master 节点）无法与其它节点联系，对于 Zookeeper 来说，这是不能容忍的。它会对剩下的节点重新进行 leader 选举，在这期间，整个 Zookeeper 集群是不可用的，这就直接导致了所有注册服务瘫痪的现象。<br>而对于 Eureka 来说，每个节点都是对等的，失去了一个节点，就自动切换到其它节点，只要还有一个 Eureka 节点存在，就能正常对外提供注册服务。Eureka 可以很好的应对因网络分区故障而导致的部分节点失去联系的状况。</p>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Cloud-Dalston.SR1<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-cloud-samples/tree/master/spring-cloud-netflix-eureka-sample" target="_blank" rel="external">spring-cloud-netflix-eureka-sample</a><br>参考文档文献链接：<a href="http://cloud.spring.io/spring-cloud-static/Dalston.SR1/#_spring_cloud_netflix" target="_blank" rel="external">http://cloud.spring.io/spring-cloud-static/Dalston.SR1/#_spring_cloud_netflix</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Cloud 是一套基于 Spring Boot 实现的微服务开发工具。微服务（也称微服务架构），简单的说，就是将一个系统按照一定的规则有效的拆分成多个不同的服务，每个服务都能够独立的进行开发、部署、扩展和维护。服务与服务之间可以通过 RESTful API 等方式进行相互调用。&lt;/p&gt;
&lt;p&gt;Spring Cloud 没有重复制造轮子，它只是将业界内多个开源的微服务框架集成起来，再通过 Spring Boot 进行包装屏蔽掉了复杂的配置和实现原理，目的是给开发者予一套简单易懂、易部署和易维护的分布式系统开发工具包。它提供了微服务开发所需的配置管理、服务发现、断路器、智能路由、微代理、控制总线等组件。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Cloud" scheme="http://yoursite.com/tags/Spring-Cloud/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Test</title>
    <link href="http://yoursite.com/post/spring-boot-testing.html"/>
    <id>http://yoursite.com/post/spring-boot-testing.html</id>
    <published>2017-06-20T06:51:38.000Z</published>
    <updated>2017-07-07T12:32:19.249Z</updated>
    
    <content type="html"><![CDATA[<p>Spring 框架提供了一个专门的测试模块（<code>spring-test</code>），用于应用程序的集成测试。 在 Spring Boot 中，你可以通过<code>spring-boot-starter-test</code>启动器快速开启和使用它。</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<h2 id="1-Junit-测试"><a href="#1-Junit-测试" class="headerlink" title="1. Junit 测试"></a>1. Junit 测试</h2><p>当你的单元测试代码不需要用到 Spring Boot 功能，而只是一个简单的测试时，你可以直接编写你的 Junit 测试代码：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleJunitTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHi</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"Hi Junit."</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-Spring-Boot-测试"><a href="#2-Spring-Boot-测试" class="headerlink" title="2. Spring Boot 测试"></a>2. Spring Boot 测试</h2><p>当你的集成测试代码需要用到 Spring Boot 功能时，你可以使用<code>@SpringBootTest</code>注解。<br>该注解是普通的 Spring 项目（非 Spring Boot 项目）中编写集成测试代码所使用的<code>@ContextConfiguration</code>注解的替代品。其作用是用于确定如何装载 Spring 应用程序的上下文资源。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInjectTest</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HelloService helloService;</div><div class="line">	</div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHi</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(helloService.sayHi());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Service</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloService</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"--- Hi ---"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="string">"--- Hello ---"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当运行 Spring Boot 应用程序测试时，它会自动的从当前测试类所在的包起一层一层向上搜索，直到找到一个<code>@SpringBootApplication</code>或<code>@SpringBootConfiguration</code>注释类为止。以此来确定如何装载 Spring 应用程序的上下文资源。只要你以合理的方式组织你的代码，你项目的主配置通常是可以被发现的。本示例项目的部分文件结构图为：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">spring-boot-testing-sample</div><div class="line">\__ src</div><div class="line">     \__ main</div><div class="line">     :     \__ java</div><div class="line">     :           \__ org</div><div class="line">     :                \__ fanlychie</div><div class="line">     :                        |__ Application.java</div><div class="line">     :                        \__ service</div><div class="line">     :                               |__ HelloService.java</div><div class="line">     \__ test</div><div class="line">           \__ java</div><div class="line">                 \__ org</div><div class="line">                      \__ fanlychie</div><div class="line">                              \__ test</div><div class="line">                                    |__ BeanInjectTest.java</div></pre></td></tr></table></figure>
<p>其中，主配置启动类的代码为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果搜索算法搜索不到你项目的主配置文件，将报出异常：</p>
<font color="#da5985" style="margin:-12px 0 6px 0;display:block;">java.lang.IllegalStateException: Unable to find a @SpringBootConfiguration, you need to use @ContextConfiguration or @SpringBootTest(classes=…) with your test</font>

<p>解决办法是，按 Spring Boot 的约定重新组织你的代码结构，或者手工指定你要装载的主配置文件：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>(classes = &#123;YourApplication.class&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BeanInjectTest</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="comment">// ...</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基于 Spring 环境的 Junit 集成测试还需要使用<code>@RunWith(SpringJUnit4ClassRunner.class)</code>注解，该注解能够改变 Junit 并让其运行在 Spring 的测试环境，以得到 Spring 测试环境的上下文支持。否则，在 Junit 测试中，Bean 的自动装配等注解将不起作用。但由于 SpringJUnit4ClassRunner 不方便记忆，Spring 4.3 起提供了一个等同于 SpringJUnit4ClassRunner 的类 SpringRunner，因此可以简写成：<code>@RunWith(SpringRunner.class)</code>。</p>
<h2 id="3-Spring-MVC-测试"><a href="#3-Spring-MVC-测试" class="headerlink" title="3. Spring MVC 测试"></a>3. Spring MVC 测试</h2><p>当你想对 Spring MVC 控制器编写单元测试代码时，可以使用<code>@WebMvcTest</code>注解。它提供了自配置的 MockMvc，可以不需要完整启动 HTTP 服务器就可以快速测试 MVC 控制器。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line">	</div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@WebMvcTest</span>(HelloController.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MockMvc mvc;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHello</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        mvc.perform(get(<span class="string">"/hello"</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andDo(print());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">(ModelMap model)</span> </span>&#123;</div><div class="line">        model.put(<span class="string">"message"</span>, <span class="string">"Hello Page"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>@WebMvcTest</code>注解时，只有一部分的 Bean 能够被扫描得到，它们分别是：</p>
<ul>
<li><code>@Controller</code></li>
<li><code>@ControllerAdvice</code></li>
<li><code>@JsonComponent</code></li>
<li><code>Filter</code></li>
<li><code>WebMvcConfigurer</code></li>
<li><code>HandlerMethodArgumentResolver</code></li>
</ul>
<p>其他常规的<code>@Component</code>（包括<code>@Service</code>、<code>@Repository</code>等）Bean 则不会被加载到 Spring 测试环境上下文中。</p>
<p>如果测试的 MVC 控制器中需要<code>@Component</code>Bean 的参与，你可以使用<code>@MockBean</code>注解来协助完成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.mockito.BDDMockito.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.request.MockMvcRequestBuilders.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultHandlers.*;</div><div class="line"><span class="keyword">import</span> <span class="keyword">static</span> org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;</div><div class="line">    </div><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@WebMvcTest</span>(HelloController.class)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloControllerTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> MockMvc mvc;</div><div class="line">    </div><div class="line">    <span class="meta">@MockBean</span></div><div class="line">    <span class="keyword">private</span> HelloService helloService;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHi</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</div><div class="line">        <span class="comment">// 模拟 HelloService.sayHi() 调用, 返回 "=== Hi ==="</span></div><div class="line">        when(helloService.sayHi()).thenReturn(<span class="string">"=== Hi ==="</span>);</div><div class="line">        mvc.perform(get(<span class="string">"/hello/sayHi"</span>))</div><div class="line">                .andExpect(status().isOk())</div><div class="line">                .andDo(print());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HelloService helloService;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello/sayHi"</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHi</span><span class="params">(ModelMap model)</span> </span>&#123;</div><div class="line">        model.put(<span class="string">"message"</span>, helloService.sayHi());</div><div class="line">        <span class="keyword">return</span> <span class="string">"hello"</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="4-Spring-Boot-Web-测试"><a href="#4-Spring-Boot-Web-测试" class="headerlink" title="4. Spring Boot Web 测试"></a>4. Spring Boot Web 测试</h2><p>当你想启动一个完整的 HTTP 服务器对 Spring Boot 的 Web 应用编写测试代码时，可以使用<code>@SpringBootTest(webEnvironment = WebEnvironment.RANDOM_PORT)</code>注解开启一个随机的可用端口。Spring Boot 针对 REST 调用的测试提供了一个 TestRestTemplate 模板，它可以解析链接服务器的相对地址。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@SpringBootTest</span>(webEnvironment = WebEnvironment.RANDOM_PORT)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> TestRestTemplate restTemplate;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSayHello</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; result = restTemplate.getForObject(<span class="string">"/hello/sayHello"</span>, Map.class);</div><div class="line">        System.out.println(result.get(<span class="string">"message"</span>));</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Controller</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> HelloService helloService;</div><div class="line">    </div><div class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/hello/sayHello"</span>)</div><div class="line">    <span class="keyword">public</span> <span class="meta">@ResponseBody</span> <span class="function">Object <span class="title">helloInfo</span><span class="params">()</span> </span>&#123;</div><div class="line">        Map&lt;String, Object&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</div><div class="line">        map.put(<span class="string">"message"</span>, helloService.sayHello());</div><div class="line">        <span class="keyword">return</span> map;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="5-Spring-Data-JPA-测试"><a href="#5-Spring-Data-JPA-测试" class="headerlink" title="5. Spring Data JPA 测试"></a>5. Spring Data JPA 测试</h2><p>当你想对 Spring Data JPA 应用进行单元测试时，你可以使用<code>@DataJpaTest</code>注解。并且在进行 JPA 测试时，你可以选择使用内存数据库还是真实的数据库测试。</p>
<h3 id="5-1-内存数据库测试"><a href="#5-1-内存数据库测试" class="headerlink" title="5.1 内存数据库测试"></a>5.1 内存数据库测试</h3><p>默认情况下，<code>@DataJpaTest</code>使用的是内存数据库进行测试，你无需配置和启用真实的数据库。只需要在 pom.xml 配置文件中声明如下依赖即可：</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.h2database<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>h2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p><code>@DataJpaTest</code>注解它只扫描<code>@Entity</code>Bean 和装配 Spring Data JPA 存储库，其他常规的<code>@Component</code>（包括<code>@Service</code>、<code>@Repository</code>等）Bean 则不会被加载到 Spring 测试环境上下文。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryInMemoryTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(<span class="string">"fanlychie"</span>);</div><div class="line">        userRepository.save(user);</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">        System.out.println(userRepository.findAll());</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"User"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span>(generator = <span class="string">"uuidGenerator"</span>)</div><div class="line">    <span class="meta">@GenericGenerator</span>(name = <span class="string">"uuidGenerator"</span>, strategy = <span class="string">"uuid"</span>)</div><div class="line">    <span class="keyword">private</span> String id;</div><div class="line">    </div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">    </div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">User</span>, <span class="title">String</span>&gt; </span>&#123;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="5-2-真实数据库测试"><a href="#5-2-真实数据库测试" class="headerlink" title="5.2 真实数据库测试"></a>5.2 真实数据库测试</h3><p>如果你希望使用真实的数据库做测试，你可以使用<code>@AutoConfigureTestDatabase(replace = Replace.NONE)</code>注解：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@AutoConfigureTestDatabase</span>(replace = Replace.NONE)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryMySQLTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(<span class="string">"fanlychie"</span>);</div><div class="line">        userRepository.save(user);</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">        System.out.println(userRepository.findAll());</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>replace = Replace.NONE</code>的作用是告知 Spring Boot 不要替换应用程序默认的数据源。</p>
<p></p><p class="code-title"># src/main.resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://127.0.0.1/test</span></div><div class="line"><span class="attr">      username:</span> <span class="string">root</span></div><div class="line"><span class="attr">      password:</span> <span class="string">root</span></div><div class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">      tomcat:</span></div><div class="line"><span class="attr">        default-auto-commit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">  jpa:</span></div><div class="line"><span class="attr">    hibernate:</span></div><div class="line"><span class="attr">      ddl-auto:</span> <span class="string">update</span></div></pre></td></tr></table></figure><p></p>
<h3 id="5-3-事务控制"><a href="#5-3-事务控制" class="headerlink" title="5.3 事务控制"></a>5.3 事务控制</h3><p>默认情况下，在每个 JPA 测试结束时，事务会发生回滚。这在一定程度上可以防止测试数据污染数据库。如果你不希望事务发生回滚，你可以使用<code>@Rollback(false)</code>注解，该注解可以标注在类级别做全局的控制，也可以标注在某个特定不需要执行事务回滚的方法级别上。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@AutoConfigureTestDatabase</span>(replace = Replace.NONE)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryMySQLTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@Rollback</span>(<span class="keyword">false</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</div><div class="line">        User user = <span class="keyword">new</span> User();</div><div class="line">        user.setName(<span class="string">"fanlychie"</span>);</div><div class="line">        userRepository.save(user);</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">        System.out.println(userRepository.findAll());</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>另外，你也可以使用<code>@Transactional</code>注解对事务进行控制。该注解可以标注在类级别做全局的控制，也可以标注在某个特定的方法级别上。如：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</div><div class="line"><span class="meta">@DataJpaTest</span></div><div class="line"><span class="meta">@AutoConfigureTestDatabase</span>(replace = Replace.NONE)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRepositoryMySQLTest</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Autowired</span></div><div class="line">    <span class="keyword">private</span> UserRepository userRepository;</div><div class="line">    </div><div class="line">    <span class="meta">@Test</span></div><div class="line">    <span class="meta">@Transactional</span>(readOnly = <span class="keyword">true</span>)</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelect</span><span class="params">()</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">        System.out.println(userRepository.findAll());</div><div class="line">        System.out.println(<span class="string">"===================================="</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="6-关闭-DEBUG-日志和输出-SQL-信息"><a href="#6-关闭-DEBUG-日志和输出-SQL-信息" class="headerlink" title="6. 关闭 DEBUG 日志和输出 SQL 信息"></a>6. 关闭 DEBUG 日志和输出 SQL 信息</h2><p>在 Spring Boot 环境中执行 Junit 单元测试的时候，会有很多<code>DEBUG</code>和<code>INFO</code>级别的日志信息输出。我们对这些信息其实并不是很感兴趣，而是更关心自己编写的测试代码部分输出的信息以及 SQL 语句信息。正确关闭这些日志信息的姿势是，在测试目录的资源文件夹中创建一个<code>logback-test.xml</code>文件：</p>
<p></p><p class="code-title"># src/test/resources/logback-test.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</div><div class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">resource</span>=<span class="string">"org/springframework/boot/logging/logback/base.xml"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 日志级别设置为 ERROR --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">"ERROR"</span> /&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 输出 SQL 语句信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.SQL"</span> <span class="attr">level</span>=<span class="string">"DEBUG"</span>/&gt;</span></div><div class="line">    <span class="comment">&lt;!-- 输出 SQL 语句参数信息 --&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">logger</span> <span class="attr">name</span>=<span class="string">"org.hibernate.type.descriptor.sql.BasicBinder"</span> <span class="attr">level</span>=<span class="string">"TRACE"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-testing-sample" target="_blank" rel="external">spring-boot-testing-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-testing" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-testing</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring 框架提供了一个专门的测试模块（&lt;code&gt;spring-test&lt;/code&gt;），用于应用程序的集成测试。 在 Spring Boot 中，你可以通过&lt;code&gt;spring-boot-starter-test&lt;/code&gt;启动器快速开启和使用它。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-title&quot;&gt;# pom.xml&lt;/p&gt;&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;test&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;scope&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 使用 Servlet、Filter、Listener</title>
    <link href="http://yoursite.com/post/spring-boot-servlet-filter-listener-usage.html"/>
    <id>http://yoursite.com/post/spring-boot-servlet-filter-listener-usage.html</id>
    <published>2017-06-19T14:30:08.000Z</published>
    <updated>2017-07-06T17:23:12.189Z</updated>
    
    <content type="html"><![CDATA[<p>在普通的 WEB 应用中，Servlet、Filter、Listener 都是在 web.xml 配置文件中配置的。而在 Spring Boot 中，由于它省去 web.xml 配置文件，Servlet、Filter、Listener 的配置需要通过 Java 代码的方式来进行配置。</p>
<a id="more"></a>
<h2 id="1-通过-Bean-的方式配置"><a href="#1-通过-Bean-的方式配置" class="headerlink" title="1. 通过 Bean 的方式配置"></a>1. 通过 Bean 的方式配置</h2><p>Spring Boot 提供了 ServletRegistrationBean、FilterRegistrationBean、<br>ServletListenerRegistrationBean 三种类型来分别配置应用的 Servlet、Filter、Listener。</p>
<p></p><p class="code-title"># 在 Spring Boot 应用中配置使用 Servlet、Filter、Listener</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Configuration</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ApplicationConfigurer</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> FilterRegistrationBean <span class="title">registerCustomFilter</span><span class="params">()</span> </span>&#123;</div><div class="line">        FilterRegistrationBean filterRegBean = <span class="keyword">new</span> FilterRegistrationBean(<span class="keyword">new</span> CustomFilter());</div><div class="line">        filterRegBean.setUrlPatterns(Arrays.asList(<span class="string">"/*"</span>));</div><div class="line">        <span class="keyword">return</span> filterRegBean;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="function"><span class="keyword">public</span> ServletRegistrationBean <span class="title">registerCustomServlet</span><span class="params">()</span> </span>&#123;</div><div class="line">        ServletRegistrationBean servletRegBean = <span class="keyword">new</span> ServletRegistrationBean(<span class="keyword">new</span> CustomServlet());</div><div class="line">        servletRegBean.setUrlMappings(Arrays.asList(<span class="string">"/customServlet"</span>));</div><div class="line">        servletRegBean.setLoadOnStartup(<span class="number">1</span>);</div><div class="line">        <span class="keyword">return</span> servletRegBean;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Bean</span></div><div class="line">    <span class="keyword">public</span> ServletListenerRegistrationBean&lt;?&gt; registerCustomListener() &#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ServletListenerRegistrationBean&lt;&gt;(<span class="keyword">new</span> CustomListener());</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 自定义的 Filter</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomFilter ------"</span>);</div><div class="line">        chain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 自定义的 Listener</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent event)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomListener ------"</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent event)</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 自定义的 Servlet</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomServlet ------"</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h2 id="2-通过注解的方式配置"><a href="#2-通过注解的方式配置" class="headerlink" title="2. 通过注解的方式配置"></a>2. 通过注解的方式配置</h2><p>Spring Boot 提供了 @WebServlet、@WebFilter、@WebListener 三种类型的注解来分别配置应用的 Servlet、Filter、Listener。</p>
<p></p><p class="code-title"># Filter 注解</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebFilter</span>(urlPatterns = <span class="string">"/*"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomFilter</span> <span class="keyword">implements</span> <span class="title">Filter</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomFilter Annotation ------"</span>);</div><div class="line">        chain.doFilter(request, response);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># Listener 注解</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebListener</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomListener</span> <span class="keyword">implements</span> <span class="title">ServletRequestListener</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestInitialized</span><span class="params">(ServletRequestEvent event)</span> </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomListener Annotation ------"</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">requestDestroyed</span><span class="params">(ServletRequestEvent event)</span> </span>&#123;</div><div class="line">    </div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># Servlet 注解</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@WebServlet</span>(urlPatterns = <span class="string">"/customServlet"</span>, loadOnStartup = <span class="number">1</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CustomServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</div><div class="line">        System.out.println(<span class="string">"------ CustomServlet Annotation ------"</span>);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>最后，需要在应用中使用<code>@ServletComponentScan</code>注解配置才有效。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@SpringBootApplication</span></div><div class="line"><span class="meta">@ServletComponentScan</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</div><div class="line">        SpringApplication.run(Application.class);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-servlet-filter-listener-conf-sample" target="_blank" rel="external">conf-sample</a> <a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-servlet-filter-listener-scan-sample" target="_blank" rel="external">scan-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-embedded-container" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-embedded-container</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在普通的 WEB 应用中，Servlet、Filter、Listener 都是在 web.xml 配置文件中配置的。而在 Spring Boot 中，由于它省去 web.xml 配置文件，Servlet、Filter、Listener 的配置需要通过 Java 代码的方式来进行配置。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 异常处理</title>
    <link href="http://yoursite.com/post/spring-boot-exception-handler.html"/>
    <id>http://yoursite.com/post/spring-boot-exception-handler.html</id>
    <published>2017-06-18T08:18:54.000Z</published>
    <updated>2017-07-06T17:23:47.837Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 默认提供了程序出错的结果映射路径<code>/error</code>（见：<a href="http://fanlychie.github.io/post/spring-boot-error-page.html" target="_blank" rel="external">Spring Boot 错误页面</a>）。其内部是通过判断请求头中的<code>Accept</code>的内容是否为<code>text/html</code>来区分请求是来自客户端浏览器（浏览器通常默认自动发送请求头内容<code>Accept:text/html</code>）还是客户端接口的调用，以此来决定返回页面视图还是 JSON 消息内容。</p>
<a id="more"></a>
<h2 id="1-自定义异常处理"><a href="#1-自定义异常处理" class="headerlink" title="1. 自定义异常处理"></a>1. 自定义异常处理</h2><p>使用<code>@ControllerAdvice</code>注解可以对已知的<code>Controller</code>中抛出的异常进行捕获并处理。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@ControllerAdvice</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(GlobalExceptionHandler.class);</div><div class="line">	</div><div class="line">    <span class="meta">@ResponseStatus</span>(HttpStatus.INTERNAL_SERVER_ERROR)</div><div class="line">    <span class="meta">@ExceptionHandler</span>(BusinessHtmlException.class)</div><div class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handleHtmlException</span><span class="params">(Exception e)</span> </span>&#123;</div><div class="line">        logger.error(<span class="string">"「捕捉到异常」："</span>, e);</div><div class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView(<span class="string">"error/general"</span>);</div><div class="line">        modelAndView.addObject(<span class="string">"message"</span>, e.getMessage());</div><div class="line">        <span class="keyword">return</span> modelAndView;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@ExceptionHandler</span>(&#123;</div><div class="line">            BusinessJsonException.class,</div><div class="line">            IllegalArgumentJsonException.class</div><div class="line">    &#125;)</div><div class="line">    <span class="keyword">public</span> ResponseEntity&lt;?&gt; handleJsonException(Exception e) &#123;</div><div class="line">        logger.error(<span class="string">"「捕捉到异常」："</span>, e);</div><div class="line">        HttpStatus status = HttpStatus.INTERNAL_SERVER_ERROR;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ResponseEntity&lt;&gt;(<span class="keyword">new</span> HttpResponseBody(status.value(), e.getMessage(), <span class="keyword">null</span>), status);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-1-ExceptionHandler"><a href="#1-1-ExceptionHandler" class="headerlink" title="1.1 @ExceptionHandler"></a>1.1 @ExceptionHandler</h3><p>该注解用于标注处理方法处理哪些特定的异常。被该注解标注的方法可以有以下任意顺序的参数类型：</p>
<ul>
<li>Throwable、Exception 等异常对象；</li>
<li>ServletRequest、HttpServletRequest、ServletResponse、HttpServletResponse；</li>
<li>HttpSession 等会话对象；</li>
<li>org.springframework.web.context.request.WebRequest；</li>
<li>java.util.Locale；</li>
<li>java.io.InputStream、java.io.Reader；</li>
<li>java.io.OutputStream、java.io.Writer；</li>
<li>org.springframework.ui.Model；</li>
</ul>
<p><div style="margin-top:18px"></div>并且被该注解标注的方法可以有以下的返回值类型可选：</p>
<ul>
<li>ModelAndView；</li>
<li>org.springframework.ui.Model；</li>
<li>java.util.Map；</li>
<li>org.springframework.web.servlet.View；</li>
<li>@ResponseBody 注解标注的任意对象；</li>
<li>HttpEntity&lt;?&gt; or ResponseEntity&lt;?&gt;；</li>
<li>void；</li>
</ul>
<p><div style="margin-top:18px"></div>以上罗列的不完全，更加详细的信息可参考：<a href="https://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/bind/annotation/ExceptionHandler.html" target="_blank" rel="external">Spring ExceptionHandler</a>。</p>
<h3 id="1-2-ResponseStatus"><a href="#1-2-ResponseStatus" class="headerlink" title="1.2 @ResponseStatus"></a>1.2 @ResponseStatus</h3><p>@ExceptionHandler 注释可以与 @ResponseStatus 结合起来，以定义 HTTP 响应的状态码值。</p>
<p><strong> 以下为涉及本示例的其余代码： </strong></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpResponseBody</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> <span class="keyword">int</span> code;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> String errmsg;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Object data;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HttpResponseBody</span><span class="params">(<span class="keyword">int</span> code, String errmsg, Object data)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.code = code;</div><div class="line">        <span class="keyword">this</span>.data = data;</div><div class="line">        <span class="keyword">this</span>.errmsg = errmsg;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessHtmlException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessHtmlException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BusinessJsonException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">BusinessJsonException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IllegalArgumentJsonException</span> <span class="keyword">extends</span> <span class="title">RuntimeException</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IllegalArgumentJsonException</span><span class="params">(String message)</span> </span>&#123;</div><div class="line">        <span class="keyword">super</span>(message);</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-exception-handler-sample" target="_blank" rel="external">spring-boot-exception-handler-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-error-handling" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-error-handling</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 默认提供了程序出错的结果映射路径&lt;code&gt;/error&lt;/code&gt;（见：&lt;a href=&quot;http://fanlychie.github.io/post/spring-boot-error-page.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Spring Boot 错误页面&lt;/a&gt;）。其内部是通过判断请求头中的&lt;code&gt;Accept&lt;/code&gt;的内容是否为&lt;code&gt;text/html&lt;/code&gt;来区分请求是来自客户端浏览器（浏览器通常默认自动发送请求头内容&lt;code&gt;Accept:text/html&lt;/code&gt;）还是客户端接口的调用，以此来决定返回页面视图还是 JSON 消息内容。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 错误页面</title>
    <link href="http://yoursite.com/post/spring-boot-error-page.html"/>
    <id>http://yoursite.com/post/spring-boot-error-page.html</id>
    <published>2017-06-17T03:26:48.000Z</published>
    <updated>2017-07-06T17:25:35.303Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-默认的错误页面"><a href="#1-默认的错误页面" class="headerlink" title="1. 默认的错误页面"></a>1. 默认的错误页面</h3><p>Spring Boot 默认提供了程序出错的结果映射路径<code>/error</code>：<br>spring-boot-autoconfigure.jar/org.springframework.boot.autoconfigure.web.BasicErrorController.java</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/BasicErrorController_code.png" alt=""></p>
<a id="more"></a>
<p>其中，<code>errorHtml</code>方法是用于处理浏览器端的请求，它返回一个简单的错误页面。而<code>error</code>方法是用于处理客户端的调用，它返回一个简单的 JSON 字串信息。</p>
<p>当请求发生错误，它会响应浏览器一个简单的页面来描述这些错误信息，如 404 错误页面：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-boot-404-page-default.png" alt=""></p>
<h3 id="2-自定义错误页面"><a href="#2-自定义错误页面" class="headerlink" title="2. 自定义错误页面"></a>2. 自定义错误页面</h3><p>Spring Boot 默认是到模板文件所在目录的<code>error</code>文件夹中查找错误码对应的视图模板文件：<br>spring-boot-autoconfigure-1.5.2.RELEASE.jar/org.springframework.boot.autoconfigure.web.DefaultErrorViewResolver.java</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/DefaultErrorViewResolver.png" alt=""></p>
<p>因此，自定义的错误模板文件放在 error 目录下即可。如：</p>
<p></p><p class="code-title"># src/main/resources/templates/error/404.html（Thymeleaf）</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>404错误页面<span class="tag">&lt;/<span class="name">title</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>404<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|timestamp：$&#123;#dates.format(timestamp, 'yyyy-MM-dd HH:mm:ss:SSS')&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|status：$&#123;status&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|error：$&#123;error&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|message：$&#123;message&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">th:text</span>=<span class="string">"|path：$&#123;path&#125;|"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<p>最终的效果：</p>
<p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/spring-boot-404-page.png" alt=""></p>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-error-page-sample" target="_blank" rel="external">spring-boot-error-page-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-error-handling-custom-error-pages" target="_blank" rel="external">http://docs.spring.io/spring-boot/docs/1.5.2.RELEASE/reference/htmlsingle/#boot-features-error-handling-custom-error-pages</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;1-默认的错误页面&quot;&gt;&lt;a href=&quot;#1-默认的错误页面&quot; class=&quot;headerlink&quot; title=&quot;1. 默认的错误页面&quot;&gt;&lt;/a&gt;1. 默认的错误页面&lt;/h3&gt;&lt;p&gt;Spring Boot 默认提供了程序出错的结果映射路径&lt;code&gt;/error&lt;/code&gt;：&lt;br&gt;spring-boot-autoconfigure.jar/org.springframework.boot.autoconfigure.web.BasicErrorController.java&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://raw.githubusercontent.com/fanlychie/mdimg/master/BasicErrorController_code.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Tomcat 上下文路径</title>
    <link href="http://yoursite.com/post/spring-boot-tomcat-context-path.html"/>
    <id>http://yoursite.com/post/spring-boot-tomcat-context-path.html</id>
    <published>2017-05-12T16:17:40.000Z</published>
    <updated>2017-07-07T12:16:05.163Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 内置 Tomcat 上下文路径默认是<code>/</code>。修改上下文路径的方式有：</p>
<h3 id="1-application-yml"><a href="#1-application-yml" class="headerlink" title="1. application.yml"></a>1. <code>application.yml</code></h3><p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  contextPath:</span> <span class="string">/my-app</span></div></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<h3 id="2-application-properties"><a href="#2-application-properties" class="headerlink" title="2. application.properties"></a>2. <code>application.properties</code></h3><p></p><p class="code-title">src/main/resources/application.properties</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.contextPath=/my-app</div></pre></td></tr></table></figure><p></p>
<h3 id="3-命令行"><a href="#3-命令行" class="headerlink" title="3. 命令行"></a>3. 命令行</h3><p></p><p class="code-title">terminal</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -Dserver.contextPath=/my-app -jar xxxx.jar</div></pre></td></tr></table></figure><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 内置 Tomcat 上下文路径默认是&lt;code&gt;/&lt;/code&gt;。修改上下文路径的方式有：&lt;/p&gt;
&lt;h3 id=&quot;1-application-yml&quot;&gt;&lt;a href=&quot;#1-application-yml&quot; class=&quot;headerlink&quot; title=&quot;1. application.yml&quot;&gt;&lt;/a&gt;1. &lt;code&gt;application.yml&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-title&quot;&gt;src/main/resources/application.yml&lt;/p&gt;&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  contextPath:&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/my-app&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Tomcat 端口</title>
    <link href="http://yoursite.com/post/spring-boot-tomcat-port.html"/>
    <id>http://yoursite.com/post/spring-boot-tomcat-port.html</id>
    <published>2017-05-12T16:16:30.000Z</published>
    <updated>2017-07-07T12:16:10.024Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 内置 Tomcat 端口默认是<code>8080</code>。修改端口的方式有：</p>
<h3 id="1．application-yml"><a href="#1．application-yml" class="headerlink" title="1．application.yml"></a>1．<code>application.yml</code></h3><p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="attr">server:</span></div><div class="line"><span class="attr">  port:</span> <span class="number">8888</span></div></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<h3 id="2．application-properties"><a href="#2．application-properties" class="headerlink" title="2．application.properties"></a>2．<code>application.properties</code></h3><p></p><p class="code-title">src/main/resources/application.properties</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">server.port=8888</div></pre></td></tr></table></figure><p></p>
<h3 id="3．命令行"><a href="#3．命令行" class="headerlink" title="3．命令行"></a>3．命令行</h3><p></p><p class="code-title">terminal</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -Dserver.port=<span class="number">8888</span> -jar xxxx.jar</div></pre></td></tr></table></figure><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 内置 Tomcat 端口默认是&lt;code&gt;8080&lt;/code&gt;。修改端口的方式有：&lt;/p&gt;
&lt;h3 id=&quot;1．application-yml&quot;&gt;&lt;a href=&quot;#1．application-yml&quot; class=&quot;headerlink&quot; title=&quot;1．application.yml&quot;&gt;&lt;/a&gt;1．&lt;code&gt;application.yml&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-title&quot;&gt;src/main/resources/application.yml&lt;/p&gt;&lt;br&gt;&lt;figure class=&quot;highlight yml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;server:&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attr&quot;&gt;  port:&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;8888&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Banner</title>
    <link href="http://yoursite.com/post/spring-boot-logo-banner.html"/>
    <id>http://yoursite.com/post/spring-boot-logo-banner.html</id>
    <published>2017-05-12T16:16:13.000Z</published>
    <updated>2017-07-06T17:28:50.379Z</updated>
    
    <content type="html"><![CDATA[<p>Spring Boot 启动时的 Logo Banner：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">  .   ____          _            __ _ _</div><div class="line"> /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \</div><div class="line">( ( )\___ | '_ | '_| | '_ \/ _`| \ \ \ \</div><div class="line"> \\/  ___)| |_)| | | | | || (_| |  ) ) ) )</div><div class="line">  '  |____| .__|_| |_|_| |_\__, | / / / /</div><div class="line"> =========|_|==============|___/=/_/_/_/</div><div class="line"> :: Spring Boot ::        (v1.5.2.RELEASE)</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="1-更换-Banner"><a href="#1-更换-Banner" class="headerlink" title="1. 更换 Banner"></a>1. 更换 Banner</h3><p>在<code>src/main/resources</code>目录下创建<code>banner.txt</code>文件：</p>
<p></p><p class="code-title">src/main/resources/banner.txt</p><br><figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">                   _ooOoo_</div><div class="line">                  o8888888o</div><div class="line">                  88" . "88</div><div class="line">                  (| -_- |)</div><div class="line">                   O\ = /O</div><div class="line">               ____/`---'\____</div><div class="line">             .   ' \\| |//`.</div><div class="line">              / \\||| : |||// \</div><div class="line">            / _||||| -:- |||||- \</div><div class="line">              | | \\\ - /// | |</div><div class="line">            | \_| ''\---/'' | |</div><div class="line">             \ .-\__`-`___/-. /</div><div class="line">          ___`. .' /--.--\`. . __</div><div class="line">       ."" '&lt;`.___\_&lt;|&gt;_/___.' &gt;'"".</div><div class="line">      | | :`- \`.;`\ _ /`;.`/ -`: | |</div><div class="line">        \ \`-. \_ __\ /__ _/ .-`/ /</div><div class="line">======`-.____`-.___\_____/___.-`____.-'======</div><div class="line">                  `=---='</div><div class="line"></div><div class="line">.............................................</div><div class="line">         佛祖镇楼                  BUG辟易</div></pre></td></tr></table></figure><p></p>
<h3 id="2-禁用-Banner"><a href="#2-禁用-Banner" class="headerlink" title="2. 禁用 Banner"></a>2. 禁用 Banner</h3><p></p><p class="code-title">src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  main:</span></div><div class="line"><span class="attr">    banner-mode:</span> <span class="string">'off'</span></div></pre></td></tr></table></figure><p></p>
<p>或</p>
<p></p><p class="code-title">src/main/resources/application.properties</p><br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">spring.main.banner-mode='off'</div></pre></td></tr></table></figure><p></p>
<p>或</p>
<p></p><p class="code-title">terminal</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ java -Dspring.main.banner-mode=off -jar xxxx.jar</div></pre></td></tr></table></figure><p></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Spring Boot 启动时的 Logo Banner：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;  .   ____          _            __ _ _&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; /\\ / ___&#39;_ __ _ _(_)_ __  __ _ \ \ \ \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;( ( )\___ | &#39;_ | &#39;_| | &#39;_ \/ _`| \ \ \ \&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; \\/  ___)| |_)| | | | | || (_| |  ) ) ) )&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &#39;  |____| .__|_| |_|_| |_\__, | / / / /&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; =========|_|==============|___/=/_/_/_/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; :: Spring Boot ::        (v1.5.2.RELEASE)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>JPQL 语言语法</title>
    <link href="http://yoursite.com/post/jpql-usage.html"/>
    <id>http://yoursite.com/post/jpql-usage.html</id>
    <published>2017-05-06T06:42:27.000Z</published>
    <updated>2017-07-06T17:33:05.072Z</updated>
    
    <content type="html"><![CDATA[<p>JPQL（Java Persistence Query Language，Java 持久化查询语言）和 SQL 之间有很多相似之处，它们之间主要的区别在于前者处理 JPA 实体类，而后者则直接涉及关系数据。在 JPQL 中，可以使用<code>SELECT</code>、<code>UPDATE</code>和<code>DELETE</code>语法来定义查询。</p>
<a id="more"></a>
<h2 id="1-查询"><a href="#1-查询" class="headerlink" title="1. 查询"></a>1. 查询</h2><p>语法：<code>SELECT ... FROM ... [WHERE ...] [GROUP BY ... [HAVING ...]] [ORDER BY ...]</code></p>
<p><strong> FROM 子句 </strong><br>通过声明一个或多个标识符变量来定义查询的范围。在<code>SELECT</code>和<code>WHERE</code>子句中可以引用这些变量。</p>
<p><strong> WHERE 子句 </strong><br>用于限制查询到的对象或值的条件表达式。</p>
<p><strong> GROUP BY 子句 </strong><br>根据一组属性对查询结果进行分组。</p>
<p><strong> HAVING 子句 </strong><br>配合<code>GROUP BY</code>子句使用，以根据条件表达式进一步限制查询结果。</p>
<p><strong> ORDER BY 子句 </strong><br>对查询结果进行排序。</p>
<p></p><p class="code-title"># 部门实体</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"Department"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">    <span class="meta">@OneToMany</span>(cascade = CascadeType.ALL, orphanRemoval = <span class="keyword">true</span>)</div><div class="line">    <span class="meta">@JoinColumn</span>(name = <span class="string">"department_id"</span>)</div><div class="line">    <span class="keyword">private</span> Set&lt;Employee&gt; employees;</div><div class="line">	</div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 雇员实体</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"Employee"</span>)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="meta">@Id</span></div><div class="line">    <span class="meta">@GeneratedValue</span></div><div class="line">    <span class="keyword">private</span> Long id;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">    <span class="meta">@Enumerated</span>(EnumType.STRING)</div><div class="line">    <span class="keyword">private</span> Sex sex;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Integer age;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Boolean married;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Double salary;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Date hireDate;</div><div class="line">	</div><div class="line">    <span class="meta">@ManyToOne</span>(fetch = FetchType.LAZY)</div><div class="line">    <span class="keyword">private</span> Department department;</div><div class="line">	</div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># 性别枚举</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.enums;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> <span class="keyword">enum</span> Sex &#123;</div><div class="line">	</div><div class="line">    MALE(<span class="string">"男"</span>),</div><div class="line">	</div><div class="line">    FEMALE(<span class="string">"女"</span>),</div><div class="line">	</div><div class="line">    ;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String displayText;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Sex</span><span class="params">(String displayText)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.displayText = displayText;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="meta">@Override</span></div><div class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</div><div class="line">        <span class="keyword">return</span> displayText;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<h3 id="1-1-基础查询"><a href="#1-1-基础查询" class="headerlink" title="1.1 基础查询"></a>1.1 基础查询</h3><p>语法：<code>SELECT 标识符变量 FROM 实体名称 [AS] 标识符变量</code></p>
<p>示例：查询所有的雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectAll</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-2-查询参数"><a href="#1-2-查询参数" class="headerlink" title="1.2 查询参数"></a>1.2 查询参数</h3><p>JPQL 支持两种查询参数，它们分别是命名参数和位置参数。</p>
<h4 id="1-2-1-命名参数"><a href="#1-2-1-命名参数" class="headerlink" title="1.2.1 命名参数"></a>1.2.1 命名参数</h4><p>语法：<code>:自定义的参数名称</code></p>
<p>示例：按性别和薪资范围查找雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = :sex AND E.salary &gt; :salary"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByNamedParams</span><span class="params">(@Param(<span class="string">"sex"</span>)</span> Sex sex, @<span class="title">Param</span><span class="params">(<span class="string">"salary"</span>)</span> Double salary)</span>;</div></pre></td></tr></table></figure>
<p>在方法的参数列表中，需要使用<code>@Param</code>注解标注每个参数的名称，使之与查询语句参数名称匹配。</p>
<h4 id="1-2-2-位置参数"><a href="#1-2-2-位置参数" class="headerlink" title="1.2.2 位置参数"></a>1.2.2 位置参数</h4><p>语法：<code>?位置编号的数值</code></p>
<p>示例：按姓名和性别查找雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = ?1 AND E.salary &gt; ?2"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByPositionalParams</span><span class="params">(Sex sex, Double salary)</span></span>;</div></pre></td></tr></table></figure>
<p>在方法的参数列表中，参数的顺序需要与查询语句中参数标注的编号依次对应起来。</p>
<h3 id="1-3-关联查询"><a href="#1-3-关联查询" class="headerlink" title="1.3 关联查询"></a>1.3 关联查询</h3><p>通过使用关键字<code>[LEFT|INNER] JOIN</code>联接关系属性查询。</p>
<h4 id="1-3-1-单值关联查询"><a href="#1-3-1-单值关联查询" class="headerlink" title="1.3.1 单值关联查询"></a>1.3.1 单值关联查询</h4><p>语法：<code>SELECT 标识符变量 FROM 实体名称 [AS] 标识符变量 JOIN 实体名称.单值关联字段 [AS] 标识符变量2 ...</code></p>
<p>示例：按部门名称查找该部门所有的雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E JOIN E.department D WHERE D.name = ?1"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByDeptName</span><span class="params">(String deptName)</span></span>;</div></pre></td></tr></table></figure>
<h4 id="1-3-2-多值关联查询"><a href="#1-3-2-多值关联查询" class="headerlink" title="1.3.2 多值关联查询"></a>1.3.2 多值关联查询</h4><p>语法1：<code>SELECT 标识符变量 FROM 实体名称 [AS] 标识符变量 JOIN 实体名称.多值关联字段 [AS] 标识符变量2 ...</code></p>
<p>示例：查询薪资大于10000的所有雇员所属的部门信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT D FROM Department D JOIN D.employees E WHERE E.salary &gt; 10000"</span>)</div><div class="line"><span class="function">List&lt;Department&gt; <span class="title">selectByMultRelatedField</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>语法2：<code>SELECT 标识符变量 FROM 实体名称 [AS] 标识符变量, IN(实体名称.多值关联字段) [AS] 标识符变量2 ...</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT D FROM Department D, IN(D.employees) E WHERE E.salary &gt; 10000"</span>)</div><div class="line"><span class="function">List&lt;Department&gt; <span class="title">selectByMultRelatedCollection</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-4-去重查询"><a href="#1-4-去重查询" class="headerlink" title="1.4 去重查询"></a>1.4 去重查询</h3><p>语法：<code>SELECT DISTINCT 标识符变量 FROM 实体名称 [AS] 标识符变量 ...</code></p>
<p>示例：查询薪资大于10000的所有雇员所属的部门信息，并消除查询结果中的重复的部门</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT DISTINCT D FROM Department D JOIN D.employees E WHERE E.salary &gt; 10000"</span>)</div><div class="line"><span class="function">List&lt;Department&gt; <span class="title">selectByMultRelatedFieldDistinct</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-5-字面值"><a href="#1-5-字面值" class="headerlink" title="1.5 字面值"></a>1.5 字面值</h3><p>JPQL 支持的字面值有以下的4种，它们分别是：字符串、数字、布尔、枚举。</p>
<h4 id="1-5-1-字符串"><a href="#1-5-1-字符串" class="headerlink" title="1.5.1 字符串"></a>1.5.1 字符串</h4><p>语法：<code>&#39;字符串&#39;</code></p>
<p>示例：查询给定名字的雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name = '张三'"</span>)</div><div class="line"><span class="function">Employee <span class="title">selectByLiteralString</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<p>如果字符串中含有单引号，则用两个单引号来表示。如：<code>Li&#39;Si</code> -&gt; <code>Li&#39;&#39;Si</code></p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name = 'Li''Si'"</span>)</div><div class="line"><span class="function">Employee <span class="title">selectByLiteralStringWithQuote</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h4 id="1-5-2-数字"><a href="#1-5-2-数字" class="headerlink" title="1.5.2 数字"></a>1.5.2 数字</h4><p>整数类型：如<code>24</code>、<code>+24</code>、<code>-24</code>、<code>24L</code>，支持 Java Long 范围的数值。</p>
<p>浮点类型：如<code>24.</code>、<code>24.6</code>、<code>+24.6</code>、<code>-24.6</code>、<code>24.6F</code>、<code>24.6D</code>，支持 Java Double 范围的数值。</p>
<p>示例：查询薪资大于10000的所有雇员</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.salary &gt; 10000.0"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByLiteralNumber</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h4 id="1-5-3-布尔"><a href="#1-5-3-布尔" class="headerlink" title="1.5.3 布尔"></a>1.5.3 布尔</h4><p>布尔类型的可选值为：<code>TRUE</code>或<code>FALSE</code>，它们不区分大小写。</p>
<p>示例：查找已婚的所有雇员</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.married = TRUE"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByLiteralBool</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h4 id="1-5-4-枚举"><a href="#1-5-4-枚举" class="headerlink" title="1.5.4 枚举"></a>1.5.4 枚举</h4><p>枚举类名必须指定为完全限定类名。</p>
<p>示例：查询所有女性的雇员</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = org.fanlychie.enums.Sex.FEMALE"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByLiteralEnum</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-6-模糊查询"><a href="#1-6-模糊查询" class="headerlink" title="1.6 模糊查询"></a>1.6 模糊查询</h3><table>
<thead>
<tr>
<th>表达式</th>
<th style="text-align:center">匹配</th>
<th style="text-align:center">不匹配</th>
</tr>
</thead>
<tbody>
<tr>
<td>E.name LIKE ‘张%’</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">小张伟</td>
</tr>
<tr>
<td>E.name LIKE ‘张_’</td>
<td style="text-align:center">张三</td>
<td style="text-align:center">张三丰</td>
</tr>
<tr>
<td>E.name LIKE ‘张\_%’</td>
<td style="text-align:center">张_三</td>
<td style="text-align:center">张三</td>
</tr>
</tbody>
</table>
<p>示例：查询张性的所有雇员</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name LIKE '张%'"</span>)</div><div class="line"><span class="function">List&lt;Employee&gt; <span class="title">selectByLikeLiteralString</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-7-空集合查询"><a href="#1-7-空集合查询" class="headerlink" title="1.7 空集合查询"></a>1.7 空集合查询</h3><p>通过使用关键字<code>IS [NOT] EMPTY</code>来查找关联的属性集合的值为空的记录。</p>
<p>示例：查找尚无雇员的所有部门</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT D FROM Department D WHERE D.employees IS EMPTY"</span>)</div><div class="line"><span class="function">List&lt;Department&gt; <span class="title">selectByEmpty</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<h3 id="1-8-构造器"><a href="#1-8-构造器" class="headerlink" title="1.8 构造器"></a>1.8 构造器</h3><p>查询结果的类型如果不是持久化的实体类，必须使用该类的完全限定名。</p>
<p>语法：<code>SELECT NEW 类的完全限定名(参数1, 参数2, ...) ...</code></p>
<p>示例：查询所有的雇员信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Query</span>(<span class="string">"SELECT NEW org.fanlychie.model.SimpleEmployee(E.name, E.sex) FROM Employee E"</span>)</div><div class="line"><span class="function">List&lt;SimpleEmployee&gt; <span class="title">selectSimpleEmployees</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> org.fanlychie.model;</div><div class="line">	</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleEmployee</span> </span>&#123;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> String name;</div><div class="line">	</div><div class="line">    <span class="keyword">private</span> Sex sex;</div><div class="line">	</div><div class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SimpleEmployee</span><span class="params">(String name, Sex sex)</span> </span>&#123;</div><div class="line">        <span class="keyword">this</span>.name = name;</div><div class="line">        <span class="keyword">this</span>.sex = sex;</div><div class="line">    &#125;</div><div class="line">	</div><div class="line">    <span class="comment">// getters and setters</span></div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-更新"><a href="#2-更新" class="headerlink" title="2. 更新"></a>2. 更新</h2><p>示例：更新某个雇员的婚姻状态和薪资信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Modifying</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Query</span>(<span class="string">"UPDATE Employee SET married = ?2, salary = ?3 WHERE id = ?1"</span>)</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">update</span><span class="params">(Long id, Boolean married, Double salary)</span></span>;</div></pre></td></tr></table></figure>
<p><code>@Query</code>无法进行 DML（Data Manipulation Language 数据操控语言，主要语句有 INSERT、DELETE、UPDATE）操作，如需更新数据库表的数据需要标注<code>@Modifying</code>注解，并且需要使用支持事务的<code>@Transactional</code>注解。</p>
<h2 id="3-删除"><a href="#3-删除" class="headerlink" title="3. 删除"></a>3. 删除</h2><p>示例：删除没有雇员的部门信息</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Modifying</span></div><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="meta">@Query</span>(<span class="string">"DELETE FROM Department D WHERE D.employees IS EMPTY"</span>)</div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">delete</span><span class="params">()</span></span>;</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-jpql-sample" target="_blank" rel="external">spring-boot-jpql-sample</a><br>参考文档文献链接：<a href="http://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm" target="_blank" rel="external">http://docs.oracle.com/javaee/7/tutorial/persistence-querylanguage.htm</a>、<a href="http://docs.oracle.com/html/E13946_04/ejb3_langref.html" target="_blank" rel="external">http://docs.oracle.com/html/E13946_04/ejb3_langref.html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JPQL（Java Persistence Query Language，Java 持久化查询语言）和 SQL 之间有很多相似之处，它们之间主要的区别在于前者处理 JPA 实体类，而后者则直接涉及关系数据。在 JPQL 中，可以使用&lt;code&gt;SELECT&lt;/code&gt;、&lt;code&gt;UPDATE&lt;/code&gt;和&lt;code&gt;DELETE&lt;/code&gt;语法来定义查询。&lt;/p&gt;
    
    </summary>
    
    
      <category term="JPA" scheme="http://yoursite.com/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Jpa</title>
    <link href="http://yoursite.com/post/spring-boot-jpa.html"/>
    <id>http://yoursite.com/post/spring-boot-jpa.html</id>
    <published>2017-04-30T13:04:47.000Z</published>
    <updated>2017-07-07T12:32:44.259Z</updated>
    
    <content type="html"><![CDATA[<p>JPA（Java Persistence API）是一套 Java 持久化规范，用于将应用程序中的对象映射到关系型数据库。<br>应用程序的数据访问层通常为域对象提供创建、读取、更新和删除（CRUD）操作，Spring Data JPA 提供了这方面的通用接口以及持久化存储特定的实现，它选择目前最流行之一的 Hibernate 作为 JPA 实现的提供者，旨在简化数据访问层。作为应用程序的开发人员，你只需要编写数据库的存取接口，由 Spring 运行时自动生成这些接口的适当实现，开发人员不需要编写任何具体的实现代码。在 Spring Boot 中，通过使用<code>spring-boot-starter-data-jpa</code>启动器，就能快速开启和使用 Spring Data JPA。</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<a id="more"></a>
<h2 id="1-编程接口"><a href="#1-编程接口" class="headerlink" title="1. 编程接口"></a>1. 编程接口</h2><p><img src="https://raw.githubusercontent.com/fanlychie/mdimg/master/JpaRepository.png" alt=""></p>
<h3 id="1-1-Repository"><a href="#1-1-Repository" class="headerlink" title="1.1 Repository"></a>1.1 Repository</h3><p>这是 Spring Data Jpa 抽象的中心接口，它是一个标记接口。扩展此接口需要传递实体类型和实体的ID字段类型参数，你必须在接口里面声明你自己需要的方法，这些方法由 Spring 在运行时提供具体的实现。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">Repository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function">Employee <span class="title">findOne</span><span class="params">(Long id)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-2-CrudRepository"><a href="#1-2-CrudRepository" class="headerlink" title="1.2 CrudRepository"></a>1.2 CrudRepository</h3><p>继承自 Repository 接口，它提供了一套 CRUD 操作的方法。扩展此接口需要传递实体类型和实体的ID字段类型参数，你可以不需要再定义基础的 CRUD 操作方法而直接可以使用它们。但在某些场景中你可能不希望接口对外暴露一套完整的增删查改的方法，比如你只希望提供查改的方法而不希望暴露增删的功能。基于这种情况，你可以使用 Repository 接口，并将需要的方法从 CrudRepository 拷贝到其中以选择性的公开 CRUD 方法。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-2-1-save"><a href="#1-2-1-save" class="headerlink" title="1.2.1 save"></a>1.2.1 save</h4><p>当你需要修改数据库的数据时，你可以调用此方法。当此方法被调用时，它首先判断参数的实体对象是否是新的。如果是新的，则调用 persist 将对象数据 insert 到数据库。如果不是新的，则调用 merge 将对象数据 update/insert 到数据库。源码：<a href="https://github.com/spring-projects/spring-data-jpa/blob/master/src/main/java/org/springframework/data/jpa/repository/support/SimpleJpaRepository.java#L482" target="_blank" rel="external">spring-data-jpa.jar!\org\springframework\data\jpa\repository\support\SimpleJpaRepository.java</a></p>
<p></p><p class="code-title"># SimpleJpaRepository 源码片段</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Transactional</span></div><div class="line"><span class="keyword">public</span> &lt;S extends T&gt; <span class="function">S <span class="title">save</span><span class="params">(S entity)</span> </span>&#123;</div><div class="line">    <span class="keyword">if</span> (entityInformation.isNew(entity)) &#123;</div><div class="line">        em.persist(entity);</div><div class="line">        <span class="keyword">return</span> entity;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">return</span> em.merge(entity);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>判断实体对象是否是新的，其依据是主键字段是否设置了有效的值。源码：<a href="https://github.com/spring-projects/spring-data-commons/blob/master/src/main/java/org/springframework/data/repository/core/support/AbstractEntityInformation.java#L41" target="_blank" rel="external">spring-data-commons.jar!\org\springframework\data\repository\core\support\AbstractEntityInformation.java</a></p>
<p></p><p class="code-title"># AbstractEntityInformation 源码片段</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNew</span><span class="params">(T entity)</span> </span>&#123;</div><div class="line">    ID id = getId(entity);</div><div class="line">    Class&lt;ID&gt; idType = getIdType();</div><div class="line">    <span class="keyword">if</span> (!idType.isPrimitive()) &#123;</div><div class="line">        <span class="keyword">return</span> id == <span class="keyword">null</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (id <span class="keyword">instanceof</span> Number) &#123;</div><div class="line">        <span class="keyword">return</span> ((Number) id).longValue() == <span class="number">0L</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(String.format(<span class="string">"Unsupported primitive id type %s!"</span>, idType));</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p>
<p>因此，<code>CrudRepository.save()</code>既有保存又有更新数据的能力。保存一条数据：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSave</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">    employee.setName(<span class="string">"张三丰"</span>);</div><div class="line">    employee.setAge(<span class="number">24</span>);</div><div class="line">    employeeRepository.save(employee);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>更新数据时，应该先从数据库将记录查询出来，对数据修改完成之后再调用<code>save</code>更新回数据库：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdate</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = employeeRepository.findByName(<span class="string">"张三丰"</span>);</div><div class="line">    employee.setAge(<span class="number">25</span>);</div><div class="line">    employeeRepository.save(employee);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>切勿脑洞大开异想通过设置主键字段的值来直接更新数据库的记录，以下做法是不可取的：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testUpdateById</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">    employee.setId(<span class="number">1L</span>);  <span class="comment">// 已知ID=1的记录是存在的</span></div><div class="line">    employee.setAge(<span class="number">26</span>); <span class="comment">// 期望根据ID更新年龄的值</span></div><div class="line">    employeeRepository.save(employee);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>方法执行完之后悲剧就发生了，除了主键和年龄之外，其余字段的值全部被清空了。观众朋友切勿模仿。</p>
<h4 id="1-2-2-delete"><a href="#1-2-2-delete" class="headerlink" title="1.2.2 delete"></a>1.2.2 delete</h4><p>根据主键删除时，主键字段不能为空，并且在数据库中必须得有与主键对应的行记录（通过<code>SELECT</code>查询判断），然后将查询出的行记录删除。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteById</span><span class="params">()</span> </span>&#123;</div><div class="line">    employeeRepository.delete(<span class="number">1L</span>); <span class="comment">// 产生 SELECT 和 DELETE 语句</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>根据实体删除时，实体对象不能为空，依据实体的主键标识判断数据库中是否有与之对应的行记录，如果有，则将此行删除；如果没有，则调用<code>merge</code>产生 INSERT 语句，然后再删除。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">    employee.setId(<span class="number">2L</span>); <span class="comment">// 此 ID 在数据库中存在</span></div><div class="line">    employeeRepository.delete(employee); <span class="comment">// 产生 SELECT 和 DELETE</span></div><div class="line">&#125;</div><div class="line">    </div><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDeleteByNonExistentEntity</span><span class="params">()</span> </span>&#123;</div><div class="line">    Employee employee = <span class="keyword">new</span> Employee();</div><div class="line">    employee.setId(<span class="number">20L</span>); <span class="comment">// 此 ID 在数据库中不存在</span></div><div class="line">    employeeRepository.delete(employee); <span class="comment">// 产生 SELECT 和 INSERT 及 DELETE</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-3-PagingAndSortingRepository"><a href="#1-3-PagingAndSortingRepository" class="headerlink" title="1.3 PagingAndSortingRepository"></a>1.3 PagingAndSortingRepository</h3><p>继承自 CrudRepository 接口，它提供了一个分页和排序的操作方法。扩展此接口需要传递实体类型和实体的ID字段类型参数，但是通常我们会比较少选择扩展该接口，而更多的是在接口里声明含有 Pageable 或 Sort 类型参数的方法来完成分页或排序的功能。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">PagingAndSortingRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-1-排序查询"><a href="#1-3-1-排序查询" class="headerlink" title="1.3.1 排序查询"></a>1.3.1 排序查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAndOrder</span><span class="params">()</span> </span>&#123;</div><div class="line">    List&lt;Order&gt; orders = <span class="keyword">new</span> ArrayList&lt;&gt;();</div><div class="line">    orders.add(<span class="keyword">new</span> Order(Direction.DESC, <span class="string">"salary"</span>)); <span class="comment">// 薪资降序</span></div><div class="line">    orders.add(<span class="keyword">new</span> Order(<span class="string">"age"</span>)); <span class="comment">// 薪资相同则按年龄升序</span></div><div class="line">    orders.add(<span class="keyword">new</span> Order(<span class="string">"hireDate"</span>).with(Direction.ASC)); <span class="comment">// 薪资和年龄都相同则按入职时间升序</span></div><div class="line">    employeeRepository.findAll(<span class="keyword">new</span> Sort(orders))</div><div class="line">            .forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>或</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectAndSort</span><span class="params">()</span> </span>&#123;</div><div class="line">    Sort sort = <span class="keyword">new</span> Sort(Direction.DESC, <span class="string">"salary"</span>) <span class="comment">// 薪资降序</span></div><div class="line">            .and(<span class="keyword">new</span> Sort(<span class="string">"age"</span>)) <span class="comment">// 薪资相同则按年龄升序</span></div><div class="line">            .and(<span class="keyword">new</span> Sort(Direction.DESC, <span class="string">"hireDate"</span>)); <span class="comment">// 薪资和年龄都相同则按入职时间升序</span></div><div class="line">    employeeRepository.findAll(sort)</div><div class="line">            .forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-2-分页查询"><a href="#1-3-2-分页查询" class="headerlink" title="1.3.2 分页查询"></a>1.3.2 分页查询</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPagination</span><span class="params">()</span> </span>&#123;</div><div class="line">    <span class="comment">// 分页索引从0开始, 表示第一页</span></div><div class="line">    Page&lt;Employee&gt; page = employeeRepository.findAll(<span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">2</span>));</div><div class="line">    <span class="keyword">long</span> totalElements = page.getTotalElements(); <span class="comment">// 查询结果总的记录条数</span></div><div class="line">    <span class="keyword">int</span> totalPages = page.getTotalPages(); <span class="comment">// 分页的总页数</span></div><div class="line">    List&lt;Employee&gt; content = page.getContent(); <span class="comment">// 当前页的数据内容</span></div><div class="line">    <span class="keyword">int</span> number = page.getNumber(); <span class="comment">// 当前页的页码, 从0开始, 表示第一页</span></div><div class="line">    <span class="keyword">int</span> numberOfElements = page.getNumberOfElements(); <span class="comment">// 每页的记录条数</span></div><div class="line">    <span class="keyword">int</span> size = page.getSize(); <span class="comment">// 每页的记录条数</span></div><div class="line">    Sort sort = page.getSort(); <span class="comment">// 分页查询的排序对象</span></div><div class="line">    <span class="keyword">boolean</span> isFirst = page.isFirst(); <span class="comment">// 是否是第一页</span></div><div class="line">    <span class="keyword">boolean</span> isLast = page.isLast(); <span class="comment">// 是否是最后一页</span></div><div class="line">    <span class="keyword">boolean</span> hasContent = page.hasContent(); <span class="comment">// 当前页是否有数据</span></div><div class="line">    <span class="keyword">boolean</span> hasNext = page.hasNext(); <span class="comment">// 是否有下一页</span></div><div class="line">    <span class="keyword">boolean</span> hasPrevious = page.hasPrevious(); <span class="comment">// 是否有上一页</span></div><div class="line">    Pageable nextPageable = page.nextPageable(); <span class="comment">// 下一页的分页对象</span></div><div class="line">    Pageable previousPageable = page.previousPageable(); <span class="comment">// 上一页的分页对象</span></div><div class="line">    page.forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="1-3-3-分页并排序"><a href="#1-3-3-分页并排序" class="headerlink" title="1.3.3 分页并排序"></a>1.3.3 分页并排序</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectByPaginationAndSort</span><span class="params">()</span> </span>&#123;</div><div class="line">    Sort sort = <span class="keyword">new</span> Sort(Direction.DESC, <span class="string">"salary"</span>) <span class="comment">// 薪资降序</span></div><div class="line">            .and(<span class="keyword">new</span> Sort(<span class="string">"age"</span>)); <span class="comment">// 薪资相同则按年龄升序</span></div><div class="line">    Page&lt;Employee&gt; page = employeeRepository.findAll(<span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">2</span>, sort));</div><div class="line">    page.forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="1-4-JpaRepository"><a href="#1-4-JpaRepository" class="headerlink" title="1.4 JpaRepository"></a>1.4 JpaRepository</h3><p>继承自 PagingAndSortingRepository 接口，它提供了一组实用的操作方法，如批量操作等。扩展此接口需要传递实体类型和实体的ID字段类型参数，该接口的一部分方法返回 List 类型的实体，与之不同的是，CrudRepository 返回的是 Iterable 类型的实体。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="2-定义查询方法"><a href="#2-定义查询方法" class="headerlink" title="2. 定义查询方法"></a>2. 定义查询方法</h2><p>Spring Data JPA 在运行时会为接口创建代理对象并为接口声明的方法提供具体的实现。代理提供了两种方式来从方法名中提取查询，一种是从方法名中直接提取查询，另外一种是从方法中提取手工定义的查询语句。代理如何创建查询是由具体的策略来决定的。</p>
<table>
<thead>
<tr>
<th style="text-align:center">策略</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">CREATE</td>
<td>根据方法名构造出一个特定的查询。<br>具体的做法是从方法名中移除一组已知的前缀，然后解析剩余的部分。</td>
</tr>
<tr>
<td style="text-align:center">USE_DECLARED_QUERY</td>
<td>使用查询注解定义的查询语句。如：<br>@Query、@NamedQuery、@NamedNativeQuery</td>
</tr>
<tr>
<td style="text-align:center">CREATE_IF_NOT_FOUND</td>
<td>默认使用的策略。<br>它组合了 CREATE 和 USE_DECLARED_QUERY 两个策略。它首先使用 USE_DECLARED_QUERY 策略查找，如果找不到再使用 CREATE 策略。</td>
</tr>
</tbody>
</table>
<h3 id="2-1-创建查询"><a href="#2-1-创建查询" class="headerlink" title="2.1 创建查询"></a>2.1 创建查询</h3><p>JPA 提供了一种可以根据方法名称直接构造出查询语句的方式，这种方式称为创建查询。在存储库接口中定义的方法，其名称只需按照约定命名，需满足以下的规则：</p>
<ul>
<li>方法名必须以：<code>findBy</code> <code>find...By</code> <code>readBy</code> <code>read...By</code> <code>queryBy</code> <code>query...By</code><br><code>countBy</code> <code>count...By</code> <code>getBy</code> <code>get...By</code>前缀之一开始命名；</li>
<li>在第一个<code>By</code>之后可以添加查询方法的检索条件，可以使用实体的属性名和支持的关键字来组合；</li>
<li>在第一个<code>By</code>之前可以添加<code>First</code>或<code>Top</code>关键字，表示返回查询结果的第一条数据。除此之外，关键字<code>First</code>或<code>Top</code>的后面也可以携带数字表示返回前多少条的数据，如<code>Top10</code>；</li>
<li>在第一个<code>By</code>之前可以添加<code>Distinct</code>关键字，去掉查询结果中重复的数据；</li>
<li>查询方法如果设定了X个检索条件，那么，查询方法的参数个数也必须是X个，并且参数必须按与检索条件相同的顺序给出；</li>
<li>查询方法同时还可以使用特殊的<code>Pageable</code>或<code>Sort</code>参数，用于分页或排序，该参数不算在X之内；</li>
</ul>
<h4 id="2-1-1-查询方法支持的关键字表"><a href="#2-1-1-查询方法支持的关键字表" class="headerlink" title="2.1.1 查询方法支持的关键字表"></a>2.1.1 查询方法支持的关键字表</h4><table>
<thead>
<tr>
<th>关键字</th>
<th>示例</th>
<th>JPQL 片段</th>
</tr>
</thead>
<tbody>
<tr>
<td>And</td>
<td>findByLastnameAndFirstname</td>
<td><code>… where x.lastname = ?1 and x.firstname = ?2</code></td>
</tr>
<tr>
<td>Or</td>
<td>findByLastnameOrFirstname</td>
<td><code>… where x.lastname = ?1 or x.firstname = ?2</code></td>
</tr>
<tr>
<td>Is<br>Equals</td>
<td>findByFirstname<br>findByFirstnameIs<br>findByFirstnameEquals</td>
<td><code>… where x.firstname = ?1</code></td>
</tr>
<tr>
<td>Between</td>
<td>findByStartDateBetween</td>
<td><code>… where x.startDate between ?1 and ?2</code></td>
</tr>
<tr>
<td>LessThan</td>
<td>findByAgeLessThan</td>
<td><code>… where x.age &lt; ?1</code></td>
</tr>
<tr>
<td>LessThanEqual</td>
<td>findByAgeLessThanEqual</td>
<td><code>… where x.age &lt;= ?1</code></td>
</tr>
<tr>
<td>GreaterThan</td>
<td>findByAgeGreaterThan</td>
<td><code>… where x.age &gt; ?1</code></td>
</tr>
<tr>
<td>GreaterThanEqual</td>
<td>findByAgeGreaterThanEqual</td>
<td><code>… where x.age &gt;= ?1</code></td>
</tr>
<tr>
<td>After</td>
<td>findByStartDateAfter</td>
<td><code>… where x.startDate &gt; ?1</code></td>
</tr>
<tr>
<td>Before</td>
<td>findByStartDateBefore</td>
<td><code>… where x.startDate &lt; ?1</code></td>
</tr>
<tr>
<td>IsNull</td>
<td>findByAgeIsNull</td>
<td><code>… where x.age is null</code></td>
</tr>
<tr>
<td>IsNotNull<br>NotNull</td>
<td>findByAgeNotNull<br>findByAgeIsNotNull</td>
<td><code>… where x.age not null</code></td>
</tr>
<tr>
<td>Like</td>
<td>findByFirstnameLike</td>
<td><code>… where x.firstname like ?1</code></td>
</tr>
<tr>
<td>NotLike</td>
<td>findByFirstnameNotLike</td>
<td><code>… where x.firstname not like ?1</code></td>
</tr>
<tr>
<td>StartingWith</td>
<td>findByFirstnameStartingWith</td>
<td><code>… where x.firstname like ?1 (parameter bound with appended %)</code></td>
</tr>
<tr>
<td>EndingWith</td>
<td>findByFirstnameEndingWith</td>
<td><code>… where x.firstname like ?1 (parameter bound with prepended %)</code></td>
</tr>
<tr>
<td>Containing</td>
<td>findByFirstnameContaining</td>
<td><code>… where x.firstname like ?1 (parameter bound wrapped in %)</code></td>
</tr>
<tr>
<td>OrderBy</td>
<td>findByAgeOrderByLastnameDesc</td>
<td><code>… where x.age = ?1 order by x.lastname desc</code></td>
</tr>
<tr>
<td>Not</td>
<td>findByLastnameNot</td>
<td><code>… where x.lastname &lt;&gt; ?1</code></td>
</tr>
<tr>
<td>In</td>
<td>findByAgeIn(Collection&lt;Age&gt; ages)</td>
<td><code>… where x.age in ?1</code></td>
</tr>
<tr>
<td>NotIn</td>
<td>findByAgeNotIn(Collection&lt;Age&gt; age)</td>
<td><code>… where x.age not in ?1</code></td>
</tr>
<tr>
<td>True</td>
<td>findByActiveTrue()</td>
<td><code>… where x.active = true</code></td>
</tr>
<tr>
<td>False</td>
<td>findByActiveFalse()</td>
<td><code>… where x.active = false</code></td>
</tr>
<tr>
<td>IgnoreCase</td>
<td>findByFirstnameIgnoreCase</td>
<td><code>… where UPPER(x.firstame) = UPPER(?1)</code></td>
</tr>
</tbody>
</table>
<h4 id="2-1-2-查询方法支持的返回值表"><a href="#2-1-2-查询方法支持的返回值表" class="headerlink" title="2.1.2 查询方法支持的返回值表"></a>2.1.2 查询方法支持的返回值表</h4><table>
<thead>
<tr>
<th>类型</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td>void</td>
<td>不需要返回值</td>
</tr>
<tr>
<td>Primitives</td>
<td>Java 基本数据类型</td>
</tr>
<tr>
<td>Wrapper</td>
<td>Java 基本数据类型对应的包装类型</td>
</tr>
<tr>
<td>T</td>
<td>期望返回的实体类型，查询方法至多只能返回一条数据结果，多于一条数据的结果将抛出异常，没有查询到数据结果，则返回 null</td>
</tr>
<tr>
<td>Iterator&lt;T&gt;</td>
<td>迭代器类型</td>
</tr>
<tr>
<td>Collection&lt;T&gt;</td>
<td>集合类型</td>
</tr>
<tr>
<td>List&lt;T&gt;</td>
<td>List 集合类型</td>
</tr>
<tr>
<td>Optional&lt;T&gt;</td>
<td>Java8 Optional 类型</td>
</tr>
<tr>
<td>Stream&lt;T&gt;</td>
<td>Java8 Stream 类型</td>
</tr>
<tr>
<td>Future&lt;T&gt;</td>
<td>Java8 Future 类型，使用<code>@Async</code>注解标注查询方法，并且需要启用 Spring 异步方法执行的功能</td>
</tr>
<tr>
<td>CompletableFuture&lt;T&gt;</td>
<td>Java8 CompletableFuture 类型，使用<code>@Async</code>注解标注查询方法，并且需要启用 Spring 异步方法执行的功能</td>
</tr>
<tr>
<td>ListenableFuture</td>
<td>Spring ListenableFuture 类型，使用<code>@Async</code>注解标注查询方法，并且需要启用 Spring 异步方法执行的功能</td>
</tr>
<tr>
<td>Slice</td>
<td>分页相关</td>
</tr>
<tr>
<td>Page&lt;T&gt;</td>
<td>分页相关</td>
</tr>
</tbody>
</table>
<p>在存储库接口中定义的方法，只需要按照约定命名，就能快速实现查询的功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据姓名查询</span></div><div class="line">    <span class="function">Employee <span class="title">findByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据姓名查询, 返回第一条记录</span></div><div class="line">    <span class="function">Employee <span class="title">findFirstByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据姓名和性别查询</span></div><div class="line">    <span class="function">Employee <span class="title">findByNameAndSex</span><span class="params">(String name, Sex sex)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据性别查询, 返回前3条记录</span></div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">findTop3BySex</span><span class="params">(Sex sex)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据性别分页查询</span></div><div class="line">    <span class="function">Page&lt;Employee&gt; <span class="title">findBySex</span><span class="params">(Sex sex, Pageable pageable)</span></span>;</div><div class="line">    </div><div class="line">    <span class="comment">// 根据给定的年龄查找小于且未婚的记录并按年龄升序排序</span></div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">findByAgeLessThanAndMarriedIsFalseOrderByAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建查询的优点是，不用编写查询语句，处理检索条件简单的查询非常方便，而且方法的可读性很高。但是对于检索条件过多的查询方法，很容易导致方法名称过长，可读性降低。</p>
<h3 id="2-2-命名查询"><a href="#2-2-命名查询" class="headerlink" title="2.2 命名查询"></a>2.2 命名查询</h3><p>JPA 提供了一种可以将查询语句从存储库接口中独立出来的方式，这种方式称为命名查询。它允许我们通过使用<code>@NamedQuery</code>或<code>@NamedNativeQuery</code>注解将预定义好的静态查询语句直接绑定到目标方法。<br>命名查询的优点是，查询语句集中，便于维护，查询方法的名称不受约束，编写复杂的查询只要合理命名也不会导致产生过长的方法名称。但是由于命名查询的注解都是标注在实体类中，因此它不适合用于大量定义查询语句，这样会使得实体类变得过于臃肿。</p>
<h4 id="2-2-1-NamedQuery"><a href="#2-2-1-NamedQuery" class="headerlink" title="2.2.1 @NamedQuery"></a>2.2.1 @NamedQuery</h4><table>
<thead>
<tr>
<th style="text-align:center">参数</th>
<th>简述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">name</td>
<td>用于定义查询的方法名称，该方法名称是全局范围的，为避免不同的实体定义了相同的方法名称而导致的查询冲突，JPA 明确规定自定义的方法名称的命名需要满足约定：<br>实体类的简单类名 + <strong>“.”</strong> + 自定义的查询方法名称</td>
</tr>
<tr>
<td style="text-align:center">query</td>
<td>用于定义 <a href="http://fanlychie.github.io/post/jpql-usage.html" target="_blank" rel="external">JPQL 查询语句</a>（附：<a href="http://fanlychie.github.io/post/jpql-usage.html#2-2-查询参数" target="_blank" rel="external">查询参数语法</a>）</td>
</tr>
</tbody>
</table>
<p>使用<code>@NamedQuery</code>注解需要在实体类中标注使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"Employee"</span>)</div><div class="line"><span class="meta">@NamedQueries</span>(&#123;</div><div class="line">    <span class="meta">@NamedQuery</span>(</div><div class="line">        name = <span class="string">"Employee.selectBySex"</span>,</div><div class="line">        query = <span class="string">"SELECT E FROM Employee E WHERE E.sex = ?1"</span></div><div class="line">    ),</div><div class="line">    <span class="meta">@NamedQuery</span>(</div><div class="line">        name = <span class="string">"Employee.selectByName"</span>,</div><div class="line">        query = <span class="string">"SELECT E FROM Employee E WHERE E.name = ?1"</span></div><div class="line">    )</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在存储库接口中声明与这些名称相同的方法即可：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function">Employee <span class="title">selectByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">selectBySex</span><span class="params">(Sex sex)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-2-2-NamedNativeQuery"><a href="#2-2-2-NamedNativeQuery" class="headerlink" title="2.2.2 @NamedNativeQuery"></a>2.2.2 @NamedNativeQuery</h4><p>注解<code>@NamedNativeQuery</code>与<code>@NamedQuery</code>的用法和作用相类似。不同的是，<code>@NamedQuery</code>使用的是 JPQL 查询语言，可以做到跨数据库平台。而<code>@NamedNativeQuery</code>使用的是 SQL 查询语言，与特定的数据库平台紧密相关。<code>@NamedNativeQuery</code>注解也是需要在实体类中标注使用：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Entity</span>(name = <span class="string">"Employee"</span>)</div><div class="line"><span class="meta">@NamedNativeQueries</span>(&#123;</div><div class="line">    <span class="meta">@NamedNativeQuery</span>(</div><div class="line">        name = <span class="string">"Employee.searchBySex"</span>,</div><div class="line">        query = <span class="string">"SELECT * FROM EMPLOYEE WHERE SEX = ?1"</span>,</div><div class="line">        resultClass = Employee.class</div><div class="line">    ),</div><div class="line">    <span class="meta">@NamedNativeQuery</span>(</div><div class="line">        name = <span class="string">"Employee.searchByName"</span>,</div><div class="line">        query = <span class="string">"SELECT * FROM EMPLOYEE WHERE NAME = ?1"</span>,</div><div class="line">        resultClass = Employee.class</div><div class="line">    )</div><div class="line">&#125;)</div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</div><div class="line">    </div><div class="line">    ...</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>相比较<code>@NamedQuery</code>注解而言，多了一个<code>resultClass</code>参数，它用于定义查询结果的返回值类型。</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="function">Employee <span class="title">searchByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">searchBySex</span><span class="params">(String sex)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="2-3-Query-查询"><a href="#2-3-Query-查询" class="headerlink" title="2.3 @Query 查询"></a>2.3 @Query 查询</h3><p>使用<code>@Query</code>注解可以直接将查询语句绑定到存储库接口的方法上，它同时支持 JPQL 和 SQL 查询语言。另外，它对方法名称的命名没有约束，并且查询语句就编写在方法的上方，方便追踪查询方法的具体作用。</p>
<h4 id="2-3-1-JPQL-查询"><a href="#2-3-1-JPQL-查询" class="headerlink" title="2.3.1 JPQL 查询"></a>2.3.1 JPQL 查询</h4><p>注解<code>@Query</code>默认使用的就是 JPQL 查询语言：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name = ?1"</span>)</div><div class="line">    <span class="function">Employee <span class="title">queryOneByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-2-SQL-查询"><a href="#2-3-2-SQL-查询" class="headerlink" title="2.3.2 SQL 查询"></a>2.3.2 SQL 查询</h4><p>在<code>@Query</code>注解中，如果要使用 SQL 查询语言，<code>nativeQuery</code>参数需要标记为 <code>true</code>：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(value = <span class="string">"SELECT * FROM EMPLOYEE WHERE NAME = ?1"</span>, nativeQuery = <span class="keyword">true</span>)</div><div class="line">    <span class="function">Employee <span class="title">queryOneByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-3-LIKE-查询"><a href="#2-3-3-LIKE-查询" class="headerlink" title="2.3.3 LIKE 查询"></a>2.3.3 LIKE 查询</h4><p>在<code>@Query</code>注解中，可以使用高级的<code>LIKE</code>表达式查询（命名查询不支持）：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.name LIKE %?1"</span>)</div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">queryNameLike</span><span class="params">(String suffixName)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-4-分页查询"><a href="#2-3-4-分页查询" class="headerlink" title="2.3.4 分页查询"></a>2.3.4 分页查询</h4><p>如果你使用的是<code>@Query</code>的 JPQL 查询语言，只需在查询方法中添加<code>Pageable</code>参数就能实现分页查询：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = ?1"</span>)</div><div class="line">    <span class="function">Page&lt;Employee&gt; <span class="title">queryBySexPagination</span><span class="params">(Sex sex, Pageable pageable)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果你使用的不是 JPQL 而是 SQL 查询语言，则还需提供<code>countQuery</code>参数用于查询结果的总条数：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(value = <span class="string">"SELECT * FROM EMPLOYEE WHERE SEX = ?1"</span>,</div><div class="line">      countQuery = <span class="string">"SELECT COUNT(*) FROM EMPLOYEE WHERE SEX = ?1 "</span>,</div><div class="line">      nativeQuery = <span class="keyword">true</span>)</div><div class="line">    <span class="function">Page&lt;Employee&gt; <span class="title">queryBySexPagination</span><span class="params">(String sex, Pageable pageable)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>Spring Data JPA 官方文档给出了<code>@Query</code>注解使用本地查询分页的基础示例（<a href="http://docs.spring.io/spring-data/jpa/docs/1.11.1.RELEASE/reference/html/#_native_queries" target="_blank" rel="external">Example 51</a>），但是按照该示例编写出的代码运行时报错。</p>
<h4 id="2-3-5-排序查询"><a href="#2-3-5-排序查询" class="headerlink" title="2.3.5 排序查询"></a>2.3.5 排序查询</h4><p>如果你使用的是<code>@Query</code>的 JPQL 查询语言，只需在查询方法中添加<code>Sort</code>参数就能实现排序功能：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM Employee E WHERE E.sex = ?1"</span>)</div><div class="line">    <span class="function">List&lt;Employee&gt; <span class="title">queryBySexAndSort</span><span class="params">(Sex sex, Sort sort)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>注：<code>@Query</code>的本地查询（SQL 查询）不支持这种动态排序的功能。</p>
<p>如果是分页查询需要排序支持，可以通过向<code>PageRequest</code>构造器传入<code>Sort</code>对象来完成：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">@Test</span></div><div class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryBySexPagination</span><span class="params">()</span> </span>&#123;</div><div class="line">    Page&lt;Employee&gt; page = employeeRepository.queryBySexPagination(Sex.FEMALE, </div><div class="line">        <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">2</span>, <span class="keyword">new</span> Sort(<span class="string">"age"</span>)));</div><div class="line">    page.forEach(System.out::println);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-6-SpEL-表达式"><a href="#2-3-6-SpEL-表达式" class="headerlink" title="2.3.6 SpEL 表达式"></a>2.3.6 SpEL 表达式</h4><p>Spring Data JPA 1.4 版本开始引入 SpEL 表达式，目前支持的 SpEL 表达式非常有限（目前仅有一个）：</p>
<table>
<thead>
<tr>
<th style="text-align:center">变量</th>
<th>描述</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">entityName</td>
<td>存储库接口关联的实体类的实体名称。如果实体类@Entity注解设置了name属性，那么将使用它。否则将使用实体类的简单类名。</td>
</tr>
</tbody>
</table>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Query</span>(<span class="string">"SELECT E FROM #&#123;#entityName&#125; E WHERE E.name = ?1"</span>)</div><div class="line">    <span class="function">Employee <span class="title">queryByNameSpEL</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="2-3-7-更新查询"><a href="#2-3-7-更新查询" class="headerlink" title="2.3.7 更新查询"></a>2.3.7 更新查询</h4><p><code>@Query</code>注解除了可以用来定义查询语句还可以用来定义更新语句（UPDATE/DELETE），在<code>@Query</code>标注的方法上只需要使用<code>@Modifying</code>注解就能实现更新的行为：</p>
<figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">CrudRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Long</span>&gt; </span>&#123;</div><div class="line">    </div><div class="line">    <span class="meta">@Modifying</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"UPDATE Employee E SET E.salary = ?2 WHERE E.name = ?1"</span>)</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">updateSalaryForName</span><span class="params">(String name, Double salary)</span></span>;</div><div class="line">    </div><div class="line">    <span class="meta">@Modifying</span></div><div class="line">    <span class="meta">@Query</span>(<span class="string">"DELETE FROM Employee E WHERE E.name = ?1"</span>)</div><div class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteByName</span><span class="params">(String name)</span></span>;</div><div class="line">    </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>示例项目开发环境：Java-8、Maven-3、IntelliJ IDEA-2017、Spring Boot-1.5.2.RELEASE<br>完整示例项目链接：<a href="https://github.com/fanlychie/spring-boot-samples/tree/master/spring-boot-jpa-sample" target="_blank" rel="external">spring-boot-jpa-sample</a><br>参考文档文献链接：<a href="http://docs.spring.io/spring-data/jpa/docs/1.11.1.RELEASE/reference/html" target="_blank" rel="external">http://docs.spring.io/spring-data/jpa/docs/1.11.1.RELEASE/reference/html</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;JPA（Java Persistence API）是一套 Java 持久化规范，用于将应用程序中的对象映射到关系型数据库。&lt;br&gt;应用程序的数据访问层通常为域对象提供创建、读取、更新和删除（CRUD）操作，Spring Data JPA 提供了这方面的通用接口以及持久化存储特定的实现，它选择目前最流行之一的 Hibernate 作为 JPA 实现的提供者，旨在简化数据访问层。作为应用程序的开发人员，你只需要编写数据库的存取接口，由 Spring 运行时自动生成这些接口的适当实现，开发人员不需要编写任何具体的实现代码。在 Spring Boot 中，通过使用&lt;code&gt;spring-boot-starter-data-jpa&lt;/code&gt;启动器，就能快速开启和使用 Spring Data JPA。&lt;/p&gt;
&lt;p&gt;&lt;/p&gt;&lt;p class=&quot;code-title&quot;&gt;# pom.xml&lt;/p&gt;&lt;br&gt;&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;org.springframework.boot&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;groupId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;spring-boot-starter-data-jpa&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;artifactId&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;dependency&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot Tomcat &amp; HikariCP &amp; DBCP 连接池</title>
    <link href="http://yoursite.com/post/spring-boot-tomcat-pool-hikaricp-dbcp-dbcp2.html"/>
    <id>http://yoursite.com/post/spring-boot-tomcat-pool-hikaricp-dbcp-dbcp2.html</id>
    <published>2017-04-29T15:12:15.000Z</published>
    <updated>2017-07-07T12:14:35.371Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Tomcat-JDBC-连接池"><a href="#Tomcat-JDBC-连接池" class="headerlink" title="Tomcat JDBC 连接池"></a>Tomcat JDBC 连接池</h3><p>Spring Boot 默认选择 Tomcat JDBC Pool 作为数据库连接池。Tomcat（8） 连接池常用的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>defaultAutoCommit</td>
<td>连接池中创建的连接默认是否自动提交事务</td>
<td>驱动的缺省值</td>
</tr>
<tr>
<td>defaultReadOnly</td>
<td>连接池中创建的连接默认是否为只读状态</td>
<td>-</td>
</tr>
<tr>
<td>defaultCatalog</td>
<td>连接池中创建的连接默认的 catalog</td>
<td>-</td>
</tr>
<tr>
<td>driverClassName</td>
<td>驱动类的名称</td>
<td>-</td>
</tr>
<tr>
<td>username</td>
<td>数据库账户</td>
<td>-</td>
</tr>
<tr>
<td>password</td>
<td>数据库密码</td>
<td>-</td>
</tr>
<tr>
<td>maxActive</td>
<td>连接池同一时间可分配的最大活跃连接数</td>
<td>100</td>
</tr>
<tr>
<td>maxIdle</td>
<td>始终保留在池中的最大连接数，如果启用，将定期检查限制连接，超出此属性设定的值且空闲时间超过minEvictableIdleTimeMillis的连接则释放</td>
<td>与maxActive设定的值相同</td>
</tr>
<tr>
<td>minIdle</td>
<td>始终保留在池中的最小连接数，池中的连接数量若低于此值则创建新的连接，如果连接验证失败将缩小至此值</td>
<td>与initialSize设定的值相同</td>
</tr>
<tr>
<td>initialSize</td>
<td>连接池启动时创建的初始连接数量</td>
<td>10</td>
</tr>
<tr>
<td>maxWait</td>
<td>最大等待时间（毫秒），如果在没有连接可用的情况下等待超过此时间，则抛出异常</td>
<td>30000（30秒）</td>
</tr>
<tr>
<td>testOnBorrow</td>
<td>当从连接池中取出一个连接时是否进行验证，若验证失败则从池中删除该连接并尝试取出另一个连接</td>
<td>false</td>
</tr>
<tr>
<td>testOnConnect</td>
<td>当一个连接首次被创建时是否进行验证，若验证失败则抛出 SQLException 异常</td>
<td>false</td>
</tr>
<tr>
<td>testOnReturn</td>
<td>当一个连接使用完归还到连接池时是否进行验证</td>
<td>false</td>
</tr>
<tr>
<td>testWhileIdle</td>
<td>对池中空闲的连接是否进行验证，验证失败则回收此连接</td>
<td>false</td>
</tr>
<tr>
<td>validationQuery</td>
<td>在连接池返回连接给调用者前用来对连接进行验证的查询 SQL</td>
<td>null</td>
</tr>
<tr>
<td>validationQueryTimeout</td>
<td>SQL 查询验证超时时间（秒），小于或等于 0 的数值表示禁用</td>
<td>-1</td>
</tr>
<tr>
<td>timeBetweenEvictionRunsMillis</td>
<td>在空闲连接回收器线程运行期间休眠时间（毫秒）， 该值不应该小于 1 秒，它决定线程多久验证空闲连接或丢弃连接的频率</td>
<td>5000（5秒）</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td>连接在池中保持空闲而不被回收的最小时间（毫秒）</td>
<td>60000（60秒）</td>
</tr>
<tr>
<td>removeAbandoned</td>
<td>标记是否删除泄露的连接，如果连接超出removeAbandonedTimeout的限制，且该属性设置为 true，则连接被认为是被泄露并且可以被删除</td>
<td>false</td>
</tr>
<tr>
<td>removeAbandonedTimeout</td>
<td>泄露的连接可以被删除的超时时间（秒），该值应设置为应用程序查询可能执行的最长时间</td>
<td>60</td>
</tr>
</tbody>
</table>
<p></p><p class="code-title"># src/main/resources/application.properties</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1/spring_boot_testing_storage</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.tomcat.<span class="keyword">default</span>-auto-commit=<span class="keyword">true</span></div><div class="line">spring.datasource.tomcat.initial-size=<span class="number">3</span></div><div class="line">spring.datasource.tomcat.max-active=<span class="number">120</span></div><div class="line">spring.datasource.tomcat.max-wait=<span class="number">10000</span></div><div class="line">spring.datasource.tomcat.test-on-borrow=<span class="keyword">true</span></div><div class="line">spring.datasource.tomcat.test-<span class="keyword">while</span>-idle=<span class="keyword">true</span></div><div class="line">spring.datasource.tomcat.validation-query=SELECT <span class="number">1</span></div><div class="line">spring.datasource.tomcat.validation-query-timeout=<span class="number">3</span></div><div class="line">spring.datasource.tomcat.time-between-eviction-runs-millis=<span class="number">10000</span></div><div class="line">spring.datasource.tomcat.min-evictable-idle-time-millis=<span class="number">120000</span></div><div class="line">spring.datasource.tomcat.remove-abandoned=<span class="keyword">true</span></div><div class="line">spring.datasource.tomcat.remove-abandoned-timeout=<span class="number">120</span></div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1/spring_boot_testing_storage</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">    tomcat:</span></div><div class="line"><span class="attr">      default-auto-commit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      initial-size:</span> <span class="number">30</span></div><div class="line"><span class="attr">      max-active:</span> <span class="number">120</span></div><div class="line"><span class="attr">      max-wait:</span> <span class="number">10000</span></div><div class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      test-while-idle:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      validation-query:</span> <span class="string">'SELECT 1'</span></div><div class="line"><span class="attr">      validation-query-timeout:</span> <span class="number">3</span></div><div class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">10000</span></div><div class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">120000</span></div><div class="line"><span class="attr">      remove-abandoned:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      remove-abandoned-timeout:</span> <span class="number">120</span></div></pre></td></tr></table></figure><p></p>
<p>Spring Boot Data Jpa 依赖声明：</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<h3 id="HikariCP-连接池"><a href="#HikariCP-连接池" class="headerlink" title="HikariCP 连接池"></a>HikariCP 连接池</h3><p>Spring Boot 如果发现 Tomcat 连接池不可用，则尝试选择 HikariCP 作为默认连接池。HikariCP 连接池常用的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>dataSourceClassName</td>
<td>JDBC 驱动程序提供的 DataSource 类的名称，如果使用了jdbcUrl则不需要此属性</td>
<td>-</td>
</tr>
<tr>
<td>jdbcUrl</td>
<td>数据库连接地址</td>
<td>-</td>
</tr>
<tr>
<td>username</td>
<td>数据库账户，如果使用了jdbcUrl则需要此属性</td>
<td>-</td>
</tr>
<tr>
<td>password</td>
<td>数据库密码，如果使用了jdbcUrl则需要此属性</td>
<td>-</td>
</tr>
<tr>
<td>autoCommit</td>
<td>是否自动提交事务</td>
<td>true</td>
</tr>
<tr>
<td>connectionTimeout</td>
<td>连接超时时间（毫秒），如果在没有连接可用的情况下等待超过此时间，则抛出 SQLException</td>
<td>30000（30秒）</td>
</tr>
<tr>
<td>idleTimeout</td>
<td>空闲超时时间（毫秒），只有在minimumIdle&lt;maximumPoolSize时生效，超时的连接可能被回收，数值 0 表示空闲连接永不从池中删除</td>
<td>600000（10分钟）</td>
</tr>
<tr>
<td>maxLifetime</td>
<td>连接池中的连接的最长生命周期（毫秒）。数值 0 表示不限制</td>
<td>1800000（30分钟）</td>
</tr>
<tr>
<td>connectionTestQuery</td>
<td>连接池每分配一条连接前执行的查询语句（如：SELECT 1），以验证该连接是否是有效的。如果你的驱动程序支持 JDBC4，HikariCP 强烈建议我们不要设置此属性</td>
<td>-</td>
</tr>
<tr>
<td>minimumIdle</td>
<td>最小空闲连接数，HikariCP 建议我们不要设置此值，而是充当固定大小的连接池</td>
<td>与maximumPoolSize数值相同</td>
</tr>
<tr>
<td>maximumPoolSize</td>
<td>连接池中可同时连接的最大连接数，当池中没有空闲连接可用时，就会阻塞直到超出connectionTimeout设定的数值</td>
<td>10</td>
</tr>
<tr>
<td>poolName</td>
<td>连接池名称，主要用于显示在日志记录和 JMX 管理控制台中</td>
<td>auto-generated</td>
</tr>
</tbody>
</table>
<p></p><p class="code-title"># src/main/resources/application.properties</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1/spring_boot_testing_storage</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.hikari.auto-commit=<span class="keyword">true</span></div><div class="line">spring.datasource.hikari.connection-test-query=SELECT <span class="number">1</span></div><div class="line">spring.datasource.hikari.maximum-pool-size=<span class="number">150</span></div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">      url:</span> <span class="attr">jdbc:mysql://127.0.0.1/spring_boot_testing_storage</span></div><div class="line"><span class="attr">      username:</span> <span class="string">root</span></div><div class="line"><span class="attr">      password:</span> <span class="string">root</span></div><div class="line"><span class="attr">      driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">      hikari:</span></div><div class="line"><span class="attr">        auto-commit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">        connection-test-query:</span> <span class="string">'SELECT 1'</span></div><div class="line"><span class="attr">        maximum-pool-size:</span> <span class="number">150</span></div></pre></td></tr></table></figure><p></p>
<p>Spring Boot Data Jpa 依赖声明：</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.zaxxer<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>HikariCP<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<h3 id="DBCP-连接池"><a href="#DBCP-连接池" class="headerlink" title="DBCP 连接池"></a>DBCP 连接池</h3><p>Spring Boot 如果发现 HikariCP 连接池不可用，则尝试选择 DBCP 作为默认连接池。DBCP（2） 连接池常用的属性：</p>
<table>
<thead>
<tr>
<th>属性</th>
<th>描述</th>
<th>默认值</th>
</tr>
</thead>
<tbody>
<tr>
<td>url</td>
<td>数据库连接地址</td>
<td>-</td>
</tr>
<tr>
<td>username</td>
<td>数据库账户</td>
<td>-</td>
</tr>
<tr>
<td>password</td>
<td>数据库密码</td>
<td>-</td>
</tr>
<tr>
<td>driverClassName</td>
<td>驱动类的名称</td>
<td>-</td>
</tr>
<tr>
<td>defaultAutoCommit</td>
<td>连接池中创建的连接默认是否自动提交事务</td>
<td>驱动的缺省值</td>
</tr>
<tr>
<td>defaultReadOnly</td>
<td>连接池中创建的连接默认是否为只读状态</td>
<td>驱动的缺省值</td>
</tr>
<tr>
<td>defaultCatalog</td>
<td>连接池中创建的连接默认的 catalog</td>
<td>-</td>
</tr>
<tr>
<td>initialSize</td>
<td>连接池启动时创建的初始连接数量</td>
<td>0</td>
</tr>
<tr>
<td>maxTotal</td>
<td>连接池同一时间可分配的最大活跃连接数；负数表示不限制</td>
<td>8</td>
</tr>
<tr>
<td>maxIdle</td>
<td>可以在池中保持空闲的最大连接数，超出此值的空闲连接被释放，负数表示不限制</td>
<td>8</td>
</tr>
<tr>
<td>minIdle</td>
<td>可以在池中保持空闲的最小连接数，低于此值将创建空闲连接，若设置为 0，则不创建</td>
<td>0</td>
</tr>
<tr>
<td>maxWaitMillis</td>
<td>最大等待时间（毫秒），如果在没有连接可用的情况下等待超过此时间，则抛出异常；-1 表示无限期等待，直到获取到连接为止</td>
<td>-</td>
</tr>
<tr>
<td>validationQuery</td>
<td>在连接池返回连接给调用者前用来对连接进行验证的查询 SQL</td>
<td>-</td>
</tr>
<tr>
<td>validationQueryTimeout</td>
<td>SQL 查询验证超时时间（秒）</td>
<td>-</td>
</tr>
<tr>
<td>testOnCreate</td>
<td>连接在创建之后是否进行验证</td>
<td>false</td>
</tr>
<tr>
<td>testOnBorrow</td>
<td>当从连接池中取出一个连接时是否进行验证，若验证失败则从池中删除该连接并尝试取出另一个连接</td>
<td>true</td>
</tr>
<tr>
<td>testOnReturn</td>
<td>当一个连接使用完归还到连接池时是否进行验证</td>
<td>false</td>
</tr>
<tr>
<td>testWhileIdle</td>
<td>对池中空闲的连接是否进行验证，验证失败则释放此连接</td>
<td>false</td>
</tr>
<tr>
<td>timeBetweenEvictionRunsMillis</td>
<td>在空闲连接回收器线程运行期间休眠时间（毫秒），如果设置为非正数，则不运行此线程</td>
<td>-1</td>
</tr>
<tr>
<td>numTestsPerEvictionRun</td>
<td>空闲连接回收器线程运行期间检查连接的个数</td>
<td>3</td>
</tr>
<tr>
<td>minEvictableIdleTimeMillis</td>
<td>连接在池中保持空闲而不被回收的最小时间（毫秒）</td>
<td>1800000（30分钟）</td>
</tr>
<tr>
<td>removeAbandonedOnBorrow</td>
<td>标记是否删除泄露的连接，如果连接超出removeAbandonedTimeout的限制，且该属性设置为 true，则连接被认为是被泄露并且可以被删除</td>
<td>false</td>
</tr>
<tr>
<td>removeAbandonedTimeout</td>
<td>泄露的连接可以被删除的超时时间（秒），该值应设置为应用程序查询可能执行的最长时间</td>
<td>300（5分钟）</td>
</tr>
<tr>
<td>poolPreparedStatements</td>
<td>设置该连接池的预处理语句池是否生效</td>
<td>false</td>
</tr>
</tbody>
</table>
<p></p><p class="code-title"># src/main/resources/application.properties</p><br><figure class="highlight java"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">spring.jmx.enabled=<span class="keyword">false</span></div><div class="line">spring.datasource.url=jdbc:mysql:<span class="comment">//127.0.0.1/spring_boot_testing_storage</span></div><div class="line">spring.datasource.username=root</div><div class="line">spring.datasource.password=root</div><div class="line">spring.datasource.driver-<span class="class"><span class="keyword">class</span>-<span class="title">name</span></span>=com.mysql.jdbc.Driver</div><div class="line">spring.datasource.dbcp2.<span class="keyword">default</span>-auto-commit=<span class="keyword">true</span></div><div class="line">spring.datasource.dbcp2.initial-size=<span class="number">30</span></div><div class="line">spring.datasource.dbcp2.max-total=<span class="number">120</span></div><div class="line">spring.datasource.dbcp2.max-idle=<span class="number">120</span></div><div class="line">spring.datasource.dbcp2.min-idle=<span class="number">30</span></div><div class="line">spring.datasource.dbcp2.max-wait-millis=<span class="number">10000</span></div><div class="line">spring.datasource.dbcp2.validation-query=SELECT <span class="number">1</span></div><div class="line">spring.datasource.dbcp2.validation-query-timeout=<span class="number">3</span></div><div class="line">spring.datasource.dbcp2.test-on-borrow=<span class="keyword">true</span></div><div class="line">spring.datasource.dbcp2.test-<span class="keyword">while</span>-idle=<span class="keyword">true</span></div><div class="line">spring.datasource.dbcp2.time-between-eviction-runs-millis=<span class="number">10000</span></div><div class="line">spring.datasource.dbcp2.num-tests-per-eviction-run=<span class="number">10</span></div><div class="line">spring.datasource.dbcp2.min-evictable-idle-time-millis=<span class="number">120000</span></div><div class="line">spring.datasource.dbcp2.remove-abandoned-on-borrow=<span class="keyword">true</span></div><div class="line">spring.datasource.dbcp2.remove-abandoned-timeout=<span class="number">120</span></div><div class="line">spring.datasource.dbcp2.pool-prepared-statements=<span class="keyword">true</span></div></pre></td></tr></table></figure><p></p>
<p></p><p class="code-title"># src/main/resources/application.yml</p><br><figure class="highlight yml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="attr">spring:</span></div><div class="line"><span class="attr">  jmx:</span></div><div class="line"><span class="attr">    enabled:</span> <span class="literal">false</span></div><div class="line"><span class="attr">  datasource:</span></div><div class="line"><span class="attr">    url:</span> <span class="attr">jdbc:mysql://127.0.0.1/spring_boot_testing_storage</span></div><div class="line"><span class="attr">    username:</span> <span class="string">root</span></div><div class="line"><span class="attr">    password:</span> <span class="string">root</span></div><div class="line"><span class="attr">    driver-class-name:</span> <span class="string">com.mysql.jdbc.Driver</span></div><div class="line"><span class="attr">    dbcp2:</span></div><div class="line"><span class="attr">      default-auto-commit:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      initial-size:</span> <span class="number">30</span></div><div class="line"><span class="attr">      max-total:</span> <span class="number">120</span></div><div class="line"><span class="attr">      max-idle:</span> <span class="number">120</span></div><div class="line"><span class="attr">      min-idle:</span> <span class="number">30</span></div><div class="line"><span class="attr">      max-wait-millis:</span> <span class="number">10000</span></div><div class="line"><span class="attr">      validation-query:</span> <span class="string">'SELECT 1'</span></div><div class="line"><span class="attr">      validation-query-timeout:</span> <span class="number">3</span></div><div class="line"><span class="attr">      test-on-borrow:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      test-while-idle:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      time-between-eviction-runs-millis:</span> <span class="number">10000</span></div><div class="line"><span class="attr">      num-tests-per-eviction-run:</span> <span class="number">10</span></div><div class="line"><span class="attr">      min-evictable-idle-time-millis:</span> <span class="number">120000</span></div><div class="line"><span class="attr">      remove-abandoned-on-borrow:</span> <span class="literal">true</span></div><div class="line"><span class="attr">      remove-abandoned-timeout:</span> <span class="number">120</span></div><div class="line"><span class="attr">      pool-prepared-statements:</span> <span class="literal">true</span></div></pre></td></tr></table></figure><p></p>
<p>Spring Boot Data Jpa 依赖声明：</p>
<p></p><p class="code-title"># pom.xml</p><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-jpa<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-jdbc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.commons<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-dbcp2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></div></pre></td></tr></table></figure><p></p>
<blockquote>
<p>参考文档文献链接：<a href="http://tomcat.apache.org/tomcat-8.0-doc/jdbc-pool.html#Common_Attributes" target="_blank" rel="external">tomcat-8-jdbc-pool-doc</a>、<a href="https://github.com/brettwooldridge/HikariCP#configuration-knobs-baby" target="_blank" rel="external">HikariCP-doc</a>、<a href="http://commons.apache.org/proper/commons-dbcp/configuration.html" target="_blank" rel="external">commons-dbcp-doc</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Tomcat-JDBC-连接池&quot;&gt;&lt;a href=&quot;#Tomcat-JDBC-连接池&quot; class=&quot;headerlink&quot; title=&quot;Tomcat JDBC 连接池&quot;&gt;&lt;/a&gt;Tomcat JDBC 连接池&lt;/h3&gt;&lt;p&gt;Spring Boot 默认选择 T
    
    </summary>
    
    
      <category term="Spring Boot" scheme="http://yoursite.com/tags/Spring-Boot/"/>
    
  </entry>
  
</feed>
